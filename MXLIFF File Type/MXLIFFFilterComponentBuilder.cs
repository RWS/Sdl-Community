namespace Sdl.Community.FileTypeSupport.MXLIFF
{
    using Sdl.Core.Globalization;
    using Sdl.FileTypeSupport.Framework;
    using Sdl.FileTypeSupport.Framework.IntegrationApi;
    using Sdl.FileTypeSupport.Framework.NativeApi;

    [FileTypeComponentBuilder(Id = "MXLIFFFilterComponentBuilderExtensionId",
                                       Name = "MXLIFFFilterComponentBuilderExtensionName",
                                       Description = "MXLIFFFilterComponentBuilderExtensionDescription")]
    public class MXLIFFFilterComponentBuilder : IFileTypeComponentBuilder
    {
        /// <summary>
        /// Gets or sets Filter Definition
        /// </summary>
        public IFileTypeDefinition FileTypeDefinition { get; set; }

        /// <summary>
        /// Gets or sets file type manager
        /// </summary>
        public IFileTypeManager FileTypeManager { get; set; }

        #region FileInfo

        /// <summary>
        /// Returns a file type information object.
        /// </summary>
        /// <param name="name">The <see cref="IFileTypeDefinition"/> will pass "" as the name for this parameter</param>
        /// <returns>an SimpleText file type information object</returns>
        public IFileTypeInformation BuildFileTypeInformation(string name)
        {
            var info = FileTypeManager.BuildFileTypeInformation();

            info.FileTypeDefinitionId = new FileTypeDefinitionId("MXLIFF File Type 1.0.0.0");
            info.FileTypeName = new LocalizableString("Memsource MXLIFF");
            info.FileTypeDocumentName = new LocalizableString("MXLIFF Document");
            info.FileTypeDocumentsName = new LocalizableString("MXLIFF Documents");
            info.Description = new LocalizableString("MXLIFF documents, as generated by Memsource. Documents may be untranslated, partially or fully translated.");
            info.FileDialogWildcardExpression = "*.mxliff";
            info.DefaultFileExtension = "*.mxliff";
            info.Icon = new IconDescriptor(PluginResources.bil);
            info.Enabled = true;

            return info;
        }

        #endregion FileInfo

        /// <summary>
        /// Gets a native or bilingual document generator of the type
        /// defined for the specified name.
        /// </summary>
        /// <param name="name">Abstract generator name</param>
        /// <returns>An instance of <see cref="IAbstractGenerator"/></returns>
        public IAbstractGenerator BuildAbstractGenerator(string name)
        {
            return null;
        }

        /// <summary>
        /// The the additional generator information for this file type
        /// </summary>
        /// <param name="name">Not used here</param>
        /// <returns>An instance of <see cref="IAdditionalGeneratorsInfo"/></returns>
        public IAdditionalGeneratorsInfo BuildAdditionalGeneratorsInfo(string name)
        {
            return null;
        }

        /// <summary>
        /// Gets the bilingual writer components for this component (if any).
        /// </summary>
        /// <param name="name">Not used here</param>
        /// <returns>Null if no bilingual generator is defined</returns>
        public IBilingualDocumentGenerator BuildBilingualGenerator(string name)
        {
            return null;
        }

        /// <summary>
        /// Gets the file extractor for this component.
        /// </summary>
        /// <param name="name">Not used here</param>
        /// <returns>An instance of <see cref="IFileExtractor"/> </returns>
        public IFileExtractor BuildFileExtractor(string name)
        {
            var parser = new MXLIFFParser();
            var extractor = FileTypeManager.BuildFileExtractor(parser, this);
            return extractor;
        }

        /// <summary>
        /// Gets the file generator for this component.
        /// </summary>
        /// <param name="name">Not used herer</param>
        /// <returns>Null if no file generator is defined</returns>
        public IFileGenerator BuildFileGenerator(string name)
        {
            return FileTypeManager.BuildFileGenerator(new MXLIFFWriter());
        }

        /// <summary>
        /// Gets the file sniffer for this component.
        /// </summary>
        /// <param name="name">Not used here</param>
        /// <returns>An instance of <see cref="INativeFileSniffer"/></returns>
        public INativeFileSniffer BuildFileSniffer(string name)
        {
            return new MXLIFFSniffer();
        }

        /// <summary>
        /// Creates a new instance of the preview application with the specified name.
        /// Right now only allows to build external preview application.
        /// </summary>
        /// <param name="name">Preview application name</param>
        /// <returns>External preview application</returns>
        public IAbstractPreviewApplication BuildPreviewApplication(string name)
        {
            return null;
        }

        /// <summary>
        /// Creates a new instance of the preview control with the specified name.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Should only be called from the main thread, as controls must always be
        /// instantiated on the same thread as the application message pump.
        /// </para>
        /// </remarks>
        /// <param name="name">Not used here</param>
        /// <returns>An instance of <see cref="IAbstractPreviewControl"/></returns>
        public IAbstractPreviewControl BuildPreviewControl(string name)
        {
            return null;
        }

        /// <summary>
        /// Gets the different sets of previews supported for this component.
        /// </summary>
        /// <param name="name">Not used here</param>
        /// <returns>An instance of <see cref="IPreviewSetsFactory"/></returns>
        public IPreviewSetsFactory BuildPreviewSetsFactory(string name)
        {
            IPreviewSetsFactory previewFactory = FileTypeManager.BuildPreviewSetsFactory();

            return previewFactory;
        }

        /// <summary>
        /// Gets the QuickTags object for this component.
        /// </summary>
        /// <param name="name">Not used here</param>
        /// <returns>a Quick tags factory</returns>
        public IQuickTagsFactory BuildQuickTagsFactory(string name)
        {
            return FileTypeManager.BuildQuickTagsFactory();
        }

        /// <summary>
        /// Gets the verifier list of this component.
        /// </summary>
        /// <param name="name">Not used here</param>
        /// <returns>An instance of <see cref="IVerifierCollection"/></returns>
        /// <remarks> The verifier list is an optional component for a file type.</remarks>
        public IVerifierCollection BuildVerifierCollection(string name)
        {
            return FileTypeManager.BuildVerifierCollection();
        }
    }
}