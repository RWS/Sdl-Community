<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sdl.Desktop.Platform</name>
    </assembly>
    <members>
        <member name="T:Sdl.Desktop.Platform.DockingViewCenterMode">
            <summary>
            Possible docking view center modes, specifying how view parts appear in the central area of a docking view.
            </summary>
            <seealso cref="P:Sdl.Desktop.Platform.AbstractDockingView.CenterMode"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockingViewCenterMode.None">
            <summary>
            No centered view part.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockingViewCenterMode.SingleViewPart">
            <summary>
            A single fixed view part can appear in the central area.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockingViewCenterMode.TabbedViewParts">
            <summary>
            Multiple view parts can appear in the central area, organized on a tab control.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.AbstractDockingView">
            <summary>
            Abstract base class for creating a view with centrally tabbed view parts (MDI) and view parts docked on all sides.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Sdl.Platform.Interfaces.Services.IFeatureToggleService)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractDockingView.CenterViewParts">
            <summary>
            Gets the read-only collection of view parts appearing in the central tab area.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractDockingView.DockedViewParts">
            <summary>
            Gets the read-only collection of docking view parts (also includes non-visible parts).
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.SaveState(Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Saves the layout information the view parts.
            </summary>
            <remarks>Override this method to save additional settings. Make sure to call the base method to ensure that the layout
            information is saved.</remarks>
            <param name="settings">The settings object in which to save settings.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.LoadViewParts">
            <summary>
            Loads the view parts.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.ExcludeViewPartFromInformationRibbonGroup(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Checks if the view part should be excluded from the View>Information ribbon group
            </summary>
            <param name="viewPartReference">the view part reference</param>
            <returns>Returns true if the view part should be excluded from the View>Information ribbon group</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractDockingView.ActiveConfiguration">
            <summary>
            Gets or sets the active view configuration.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractDockingView.Configurations">
            <summary>
            Gets the read-only collection of docking view configurations.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractDockingView.ShowConfigurationsMenu">
            <summary>
            Gets or sets whether to show the configuration selection menu in the view menu.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractDockingView.CenterMode">
            <summary>
            Gets or sets the mode of the central viewpart area.
            </summary>
            <remarks>This property can only be set before the view has been initialized, i.e. in the constructor of the deriving view class.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to set this property after the view has been initialized.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.ResetViewPartLayout(System.Boolean)">
            <summary>
            Resets the layout of the view parts.
            </summary>
            <param name="activeConfigurationOnly">When true, only resets the layout for the active configuration.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.CreateViewPartToolBarManager(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Creates a toolbar manager for the specified view part.
            This method returns null for centrally located view parts, making them use the views default toolbar manager.
            For other view parts, a new toolbar manager is created, which creates toolbars on the view part's site itself.
            </summary>
            <param name="viewPartReference">The reference to the view part for which to create a new toolbar manager.</param>
            <returns>A new toolbar manager for the specified view part; or null to use the default view toolbar manager.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.GetLayoutInfo(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Gets the initial layout info for the specified view part.
            </summary>
            <remarks>This does not represent tha actual layout of the view part, but only the layout as it was specified initially in the configuration.</remarks>
            <param name="viewPartReference">The reference to the view part for which to get the layout information.</param>
            <returns>The initial layout info for the specified view part. Returns the layout specified by the active configuration, if availbale; otherwise returns
            the default layout for the view part as specified by a <see cref="T:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute"/> attribute (if available). If none of these is specified, 
            a generic default layout is returned.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.GetDefaultLayoutInfo(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Returns the default layout info for the specified view part.
            </summary>
            <param name="viewPartReference">The view part.</param>
            <returns>
            The default layout info for the specified view part, or null if the view part does not specify a default layout.
            </returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.GetActiveConfigurationLayoutExtension(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Gets the layout specified by the view part for use in the active configuration, or null if it is not specified.
            </summary>
            <param name="viewPartReference">The view part reference for which to get the layout information.</param>
            <returns>The layout specified by the view part for use in the active configuration, using a <see cref="T:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute"/>, or null
            if no such attribute is specified.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.SetLayoutInfo(Sdl.Desktop.Platform.IViewPartReference,Sdl.Desktop.Platform.DockingViewPartLayoutInfo)">
            <summary>
            Sets the layout information for the specified view part.
            </summary>
            <remarks>This method is intended for use by <see cref="T:Sdl.Desktop.Platform.IDockingViewConfiguration"/> implementations and should not be used for other purposes.</remarks>
            <param name="viewPartReference">The view part reference for which to set the layout information.</param>
            <param name="layoutInfo">The new layout information.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.GetViewPartToolBarLocation(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Gets the view part tool bar location.
            </summary>
            <param name="viewPartReference">The view part reference.</param>
            <returns>The location of the specified view part's toolbars.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.AddViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Adds a new central view part to this view.
            </summary>
            <param name="viewPartReference">The reference to the new view part to add.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.RemoveViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Removes the specified view part from this view.
            </summary>
            <param name="viewPartReference">The reference to the new view part to remove.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.CreateControl">
            <summary>
            Creates a new <see cref="T:Sdl.Desktop.Platform.InternalUI.IViewWithPartsContentControl"/> which takes care of the visual representation of this view.
            </summary>
            <returns>A new <see cref="T:Sdl.Desktop.Platform.InternalUI.IViewWithPartsContentControl"/>.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.OnInitControl">
            <summary>
            Initializes the content control for this view with the active configuration layout.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.OnViewPartAdded(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Handles the on view part added event; it adds the view part to the history.
            </summary>
            <param name="viewPartReference">view part reference</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.OnViewPartActivated(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Handles the on view part activated event; it adds the view part to the history.
            </summary>
            <param name="viewPartReference">view part reference</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.OnViewPartRemoved(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Handles the on view part removed event; it removes the view part from the history.
            </summary>
            <param name="viewPartReference"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.AddToViewPartsHistory(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Adds the view part to the history; 
            </summary>
            <param name="viewPartReference">view part reference</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.RemoveViewPartsHistory(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Removes the view part from the history
            </summary>
            <param name="viewPartReference">view part reference</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractDockingView.ViewPartsHistory">
            <summary>
            ViewPartsHistory property is a view part reference collection 
            ordered from most recently added/activated view part to least 
            recently added/activated view part.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.GetVisibleViewPartsHistory">
            <summary>
            Dynamically populates a collection of all view parts for the current view
            ordered as CenterViewPartsHistory collection that are visible, including those 
            that are docked behind some other viewpart
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.SelectViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Selects the view part with the given view part reference.
            </summary>
            <param name="viewPartReference">view part reference</param>
            <returns>whether view part was selected</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.SelectControl(Sdl.Desktop.Platform.IInternalUIControl)">
            <summary>
            Selects the given control.
            </summary>
            <param name="control">control</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingView.CanSelectControl(System.Windows.Forms.Control)">
            <summary>
            Determines whether the given control can be selected.
            </summary>
            <param name="control">control</param>
            <returns>whether control can be selected</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.AbstractSelectViewPartAction">
            <summary>
            AbstractSelectViewPartAction class represents a select view part action that 
            shows the select view part dialog.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractSelectViewPartAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractSelectViewPartAction.Execute">
            <summary>
            Executes the action; shows the select view part dialog.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractSelectViewPartAction.NextKeys">
            <summary>
            NextKeys property represents the nexy keys.
            </summary>
            <returns>next keys</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractSelectViewPartAction.PreviousKeys">
            <summary>
            PreviousKeys property represents the previous keys.
            </summary>
            <returns>previous keys</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractSelectViewPartAction.ActiveDockingView">
            <summary>
            ActiveDockingView property represents the active docking view.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractSelectViewPartAction.GetSelectedViewPart(Sdl.Desktop.Platform.ViewPartReferenceCollection)">
            <summary>
            Gets the selected view part or rather the view part to be selected initially
            in the select view part dialog.
            </summary>
            <param name="viewPartHistory">view part history</param>
            <returns>selected view part</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.SelectNextViewPartAction">
            <summary>
            SelectNextViewPartAction class represents a select next view part action that 
            shows the select view part dialog with the "next" view part selected.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.SelectNextViewPartAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.SelectNextViewPartAction.GetSelectedViewPart(Sdl.Desktop.Platform.ViewPartReferenceCollection)">
            <summary>
            Gets the selected view part or rather the view part to be selected initially
            in the select view part dialog. Here the selected view part is the next youngest
            view part in the view part history.
            </summary>
            <param name="viewPartHistory">view part history</param>
            <returns>selected view part</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.SelectPreviousViewPartAction">
            <summary>
            SelectNextPreviousPartAction class represents a select previous view part action that 
            shows the select view part dialog with the "previous" view part selected.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.SelectPreviousViewPartAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.SelectPreviousViewPartAction.GetSelectedViewPart(Sdl.Desktop.Platform.ViewPartReferenceCollection)">
            <summary>
            Gets the selected view part or rather the view part to be selected initially
            in the select view part dialog. Here the selected view part is the oldest
            view part in the view part history.
            </summary>
            <param name="viewPartHistory">view part history</param>
            <returns>selected view part</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.ActiveDockingViewCondition">
            <summary>
            ActiveDockingViewCondition class represents the active docking view condition.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ActiveDockingViewCondition.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ActiveDockingViewCondition.OnServiceContextChanged">
            <summary>
            Handles the on service context changed; it listens to the active view changed event.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ActiveDockingViewCondition.Window_ActiveViewChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the active view changed event; it updates the condition value.
            </summary>
            <param name="sender">sender</param>
            <param name="eventArgs">event arguments</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.ActiveDockingViewCondition.GetValue">
            <summary>
            Gets the condition value.
            </summary>
            <returns>condition value</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.ActiveDockingViewCondition.ActiveDockingView">
            <summary>
            ActiveDockingView property represents the active docking view.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.SelectViewPartCondition">
            <summary>
            SelectViewPartCondition class represents the select view part condition.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.SelectViewPartCondition.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.SelectViewPartCondition.Window_ActiveViewChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the active view changed event; it unhooks/hooks events to the active docking view.
            </summary>
            <param name="sender">sender</param>
            <param name="eventArgs">event arguments</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.SelectViewPartCondition.ActiveDockingView_ViewPartAdded(Sdl.Desktop.Platform.IViewWithParts,Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Handles the active docking view part added event; it updates the condition value.
            </summary>
            <param name="view">view</param>
            <param name="viewPartReference">view part reference</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.SelectViewPartCondition.ActiveDockingView_ViewPartRemoved(Sdl.Desktop.Platform.IViewWithParts,Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Handles the active docking view part removed event; it updates the condition value.
            </summary>
            <param name="view">view</param>
            <param name="viewPartReference">view part reference</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.SelectViewPartCondition.GetValue">
            <summary>
            Gets the condition value.
            </summary>
            <returns>condition value</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.AbstractDockingViewConfiguration">
            <summary>
            Abstract base class for docking view configurations.
            </summary>
            <remarks>To create a new configuration, create a class extending <see cref="T:Sdl.Desktop.Platform.AbstractDockingViewConfiguration"/> 
            and annotate it with the <see cref="T:Sdl.Desktop.Platform.DockingViewConfigurationAttribute"/>, specifying the view at which the configuration is targeted.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingViewConfiguration.UpdateLayout(Sdl.Desktop.Platform.IDockingView)">
            <summary>
            Updates the layout of view parts within the view.
            </summary>
            <remarks>
            For every view part, first checks whether there is a layout for this configuration specified by the view part using a <see cref="T:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute"/>.
            If this is not specified, calls the <see cref="M:Sdl.Desktop.Platform.AbstractDockingViewConfiguration.GetInitialLayout(Sdl.Desktop.Platform.IViewPartReference,Sdl.Desktop.Platform.DockingViewPartLayoutInfo)"/> method to get a layout for the view part.
            </remarks>
            <param name="view">The view within which to set the layout of the view parts.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingViewConfiguration.GetInitialLayout(Sdl.Desktop.Platform.IViewPartReference,Sdl.Desktop.Platform.DockingViewPartLayoutInfo)">
            <summary>
            Called to get a layout for the specified view part if there no a layout specified by the view part for this configuration using a <see cref="T:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute"/>.
            </summary>
            <param name="viewPartReference">The view part reference for which to get the layout.</param>
            <param name="defaultLayoutInfo">The default layout info that will be applied.</param>
            <returns>A <see cref="T:Sdl.Desktop.Platform.DockingViewPartLayoutInfo"/> object, or null to fall back to the default layout.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.AbstractDockingViewEx">
            <summary>
            Abstract base class for creating a view with centrally tabbed view parts (MDI) and view parts docked on all sides,
            including support for view parts in the explorer bar area.
            
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractDockingViewEx.GetExplorerBarControl">
            <summary>
            Returns the explorer bar control for this view. This control will be placed in the content area of the explorer bar
            while this view is active.
            </summary>
            <returns>A Windows Forms control.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.AbstractView">
            <summary>
            Abstract base class for views. Users should typically extend this abstract class instead of directly implementing
            <see cref="T:Sdl.Desktop.Platform.IView"/>, since it already implements standard functionality.
            
            For views that consist of several view parts and that require the ability for plug-ins to add new view parts, implement 
            <see cref="T:Sdl.Desktop.Platform.IViewWithParts"/> (or <see cref="T:Sdl.Desktop.Platform.AbstractViewWithParts"/>. Typically, users should <see cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>, for
            a view consisting of a central MDI interface, accompanied by view parts that can be docked on on all sides.
            </summary>
            <seealso cref="T:Sdl.Desktop.Platform.IView"/>
            <seealso cref="T:Sdl.Desktop.Platform.IViewWithParts"/>
            <seealso cref="T:Sdl.Desktop.Platform.AbstractViewWithParts"/>
            <seealso cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>
            <seealso cref="T:Sdl.Desktop.Platform.AbstractDockingViewEx"/>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractView.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractView.ViewSite">
            <summary>
            Returns the site of the view. The site is the interface between the view and its owner window. This 
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to access this property before the <see cref="M:Sdl.Desktop.Platform.AbstractView.Init(Sdl.Desktop.Platform.IViewSite,Sdl.Core.Settings.ISettingsGroup)"/> method has been called.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractView.Init(Sdl.Desktop.Platform.IViewSite,Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called right before this view is about to become visible for the first time.
            </summary>
            <remarks>This method calls the virtual <see cref="M:Sdl.Desktop.Platform.AbstractView.OnInit(Sdl.Desktop.Platform.IViewSite,Sdl.Core.Settings.ISettingsGroup)"/> method. Override that method to restore this views state and the views command bars, which are accessible through the site.</remarks>
            <param name="site">The site of the view.</param>
            <param name="settings">A settings object which can be used to restore this views previously persisted state.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractView.OnInit(Sdl.Desktop.Platform.IViewSite,Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called right before this view is about to become visible for the first time.
            </summary>
            <remarks>Override this method to restore this views state and the views command bars, which are accessible through the site.</remarks>
            <param name="site">The site of the view.</param>
            <param name="settings">A settings object which can be used to restore this views previously persisted state.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractView.GetContentControl">
            <summary>
            Returns the content control for this view. This control will occupy the entire content area of the studio window while this view is active.
            </summary>
            <returns>A Windows Forms control.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractView.GetExplorerBarControl">
            <summary>
            Returns the explorer bar control for this view. This control will be placed in the content area of the explorer bar
            while this view is active.
            </summary>
            <returns>A Windows Forms control.</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractView.RefreshWhenActivate">
            <summary>
            True if Refresh() should be automatically called when the view is activated, otherwise false.
            True by default.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractView.OnActivate">
            <summary>
            Called by the window when this view has been set as the active view.
            If the RefreshWhenActivate property is true, then this refreshes the view by calling <see cref="M:Sdl.Desktop.Platform.AbstractView.Refresh"/>.
            Override this method to change its behaviour.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractView.OnDeactivate">
            <summary>
            Called by the window when this view is being deactivated. By default, this method always returns true.
            Override this method to change its behaviour.
            </summary>
            <returns>True if it is ok to deactivate this view. False to keep this view as the active view.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractView.Refresh">
            <summary>
            Refreshes this view.
            </summary>
            <remarks>By default, does nothing. Override this method to change its behaviour.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractView.SaveState(Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called by the window so this view can save its state in the specified settings object.
            </summary>
            <remarks>By default, does nothing. Override this method to change its behaviour.</remarks>
            <param name="settings">The settings object to store this views state in.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractView.Dispose">
            <summary>
            Called by the window it is being disposed. Dispose any resources here.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractView.Settings">
            <summary>
            Provides access to the settings object, which was passed to this view in the <see cref="M:Sdl.Desktop.Platform.AbstractView.Init(Sdl.Desktop.Platform.IViewSite,Sdl.Core.Settings.ISettingsGroup)"/> method.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to access this property before the <see cref="M:Sdl.Desktop.Platform.AbstractView.Init(Sdl.Desktop.Platform.IViewSite,Sdl.Core.Settings.ISettingsGroup)"/> method has been called.</exception>
        </member>
        <member name="T:Sdl.Desktop.Platform.AbstractViewPart">
            <summary>
            Abstract base class for view parts.Users should typically extend this abstract class instead of directly implementing
            <see cref="T:Sdl.Desktop.Platform.IViewPart"/>, since it already implements standard functionality.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPart.ViewPartSite">
            <summary>
            Returns the site of the view prta. The site is the interface between the view part and its owning view.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to access this property before the <see cref="M:Sdl.Desktop.Platform.AbstractViewPart.Init(Sdl.Desktop.Platform.IViewPartSite,Sdl.Core.Settings.ISettingsGroup)"/> method has been called.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.Init(Sdl.Desktop.Platform.IViewPartSite,Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called by the view right before this view part is about to become visible for the first time.
            </summary>
            <remarks>This method calls <see cref="M:Sdl.Desktop.Platform.AbstractViewPart.OnInit(Sdl.Desktop.Platform.IViewPartSite,Sdl.Core.Settings.ISettingsGroup)"/>. Override that method to restore this view part's state and the view part's command bars, which are accessible through the site.</remarks>
            <param name="site">The site of the view part.</param>
            <param name="settings">A settings object which can be used to restore this view part's previously persisted state.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.OnInit(Sdl.Desktop.Platform.IViewPartSite,Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called by the view right before this view part is about to become visible for the first time.
            </summary>
            <remarks>Override this method to restore this view part's state and fill the view part's command bars, which are accessible through the site.</remarks>
            <param name="site">The site of the view part.</param>
            <param name="settings">A settings object which can be used to restore this view part's previously persisted state.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.GetControl">
            <summary>
            Returns the control which visually represents the view part.
            </summary>
            <returns>A Windows Forms control.</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPart.IsActive">
            <summary>
            Returns true if the view part site has been assigned and this view part is the active view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPart.IsVisible">
            <summary>
            Returns true if the view part site has been assigned and this view part is currently visible.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPart.LazyRefresh">
            <summary>
            Gets or sets whether this view part should only be refreshed if is currently in view (<see cref="P:Sdl.Desktop.Platform.IViewPartSite.IsInView"/>).
            If it isn't in view the refresh will be performed when the viewpart comes in view next.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPart.RefreshRequired">
            <summary>
            Gets or sets whether refresh is required when the view part is next brought into view (<see cref="P:Sdl.Desktop.Platform.IViewPartSite.IsInView"/>).
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.OnShow">
            <summary>
            Called by the view when this view part is shown.
            </summary>
            <remarks>When overriding this method, make sure to call the base class method to ensure it functions properly.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.OnHide">
            <summary>
            Called by the view when this view part is about to be hidden.
            </summary>
            <returns>True to allow hiding the view part. False to cancel to operation. By default, always returns true.</returns>
            <remarks>When overriding this method, make sure to call the base class method to ensure it functions properly.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.OnActivate">
            <summary>
            Called by the view when this view part is activated.
            </summary>
            <remarks>When overriding this method, make sure to call the base class method to ensure it functions properly.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.OnDeactivate">
            <summary>
            Called by the view when this view part is being deactivated.
            </summary>
            <returns>True if it is ok to deactivate this view part. False to prevent this from happening. By default, always returns true.</returns>
            <remarks>When overriding this method, make sure to call the base class method to ensure it functions properly.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.OnRemove">
            <summary>
            Called by the view when this view part is about to be removed from the view.
            </summary>
            <returns>True to allow removing the view part. False to cancel to operation.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.Refresh">
            <summary>
            Refreshes this view part's contents. Called by the view when the view itself is being refreshed.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.SaveState(Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called by the view so this view part can save its state in the specified settings object.
            </summary>
            <param name="settings">The settings object to store this views state in.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.Dispose">
            <summary>
            Called by the view when it is being disposed. Dispose any resources here.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPart.RefreshLazily">
            <summary>
            Use this method to refresh the view part if it is in view, or to schedule a refresh when it comes in view next.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.AbstractViewPartReference">
            <summary>
            Abstract base class for view part references (<see cref="T:Sdl.Desktop.Platform.IViewPartReference"/>).
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewPartReference.#ctor(System.String)">
            <summary>
            Constructor with view part id.
            </summary>
            <param name="id">A unique id for this view part.</param>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewPartReference.AvailableChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.AbstractViewPartReference.Available"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewPartReference.NameChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.AbstractViewPartReference.Name"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewPartReference.DescriptionChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.AbstractViewPartReference.Description"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewPartReference.ShortcutChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.AbstractViewPartReference.Shortcut"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewPartReference.IconChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.AbstractViewPartReference.Icon"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPartReference.Id">
            <summary>
            Gets the unique id of the view part. This id should be unique within the view this view part is added to.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPartReference.Name">
            <summary>
            Gets or sets the friendly name of this view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPartReference.Description">
            <summary>
            Gets or sets the description of this view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPartReference.Shortcut">
            <summary>
            Gets or sets the keyboard shortcut for this view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPartReference.Icon">
            <summary>
            Gets or sets an icon representing this view part. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPartReference.Available">
            <summary>
            Gets or sets whether this view part is currently available.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPartReference.IsInitialized">
            <summary>
            Returns whether the view part associated with this view part reference has been initialized (see also <see cref="P:Sdl.Desktop.Platform.AbstractViewPartReference.ViewPart"/>).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewPartReference.ViewPart">
            <summary>
            Returns the view part associated with this view part reference.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.AbstractViewWithParts">
            <summary>
            Abstract base class for creating a view consisting of several view parts.
            Typically, users should extend <see cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>, for
            a view consisting of a central MDI interface, accompanied by view parts that can be docked on on all sides.
            </summary>
            <seealso cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>
            <seealso cref="T:Sdl.Desktop.Platform.AbstractDockingViewEx"/>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Sdl.Platform.Interfaces.Services.IFeatureToggleService)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnInit(Sdl.Desktop.Platform.IViewSite,Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called right before this view is about to become visible for the first time.
            </summary>
            <remarks>Override this method to restore this views state and the views command bars, which are accessible through the site.
            Make sure to call <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnInit(Sdl.Desktop.Platform.IViewSite,Sdl.Core.Settings.ISettingsGroup)"/> to let the base class do the necessary initialization.
            After doing that, the view parts have been loaded and are accessible.</remarks>
            <param name="site">The site of the view.</param>
            <param name="settings">A settings object which can be used to restore this views previously persisted state.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.SuspendControlUpdates">
            <summary>
            Suspends update to the view content control.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.ResumeControlUpdates">
            <summary>
            Resumes updates to the view content control.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewWithParts.ControlUpdatesSuspended">
            <summary>
            True if the updates to the view content control are currently suspended.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.AddViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Adds a new view part to this view.
            </summary>
            <param name="viewPartReference">The reference to the view part to add.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.ShowViewPart(Sdl.Desktop.Platform.IViewPartReference,System.Boolean)">
            <summary>
            Shows the specified view part in this view.
            </summary>
            <remarks>The view part has to be part of this view.</remarks>
            <param name="viewPartReference">The reference to the view part to show.</param>
            <param name="selectTab">Specifies whether the tab should be selected.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.CanShowViewPartWithoutHidingAnotherViewPart(Sdl.Desktop.Platform.IViewPartReference,Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Certain views should not be shown if showing that view hides another view that should not be hidden
            </summary>
            <param name="viewPartToShow">View you wish to show</param>
            <param name="viewPartThatCannotBeHidden">View that cannot be hidden</param>
            <returns>True if the view you wish to show can be shown without hiding the view you wish to remain active</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.InitializeViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Initializes the specified view part without showing it.
            </summary>
            <remarks>The view part has to be part of this view. Note that <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.ShowViewPart(Sdl.Desktop.Platform.IViewPartReference,System.Boolean)"/>
            implicitly initializes the view part if it has not been initialized yet.</remarks>
            <param name="viewPartReference">The reference to the view part to initialize.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.HideViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Hides the specified view part from this view.
            </summary>
            <remarks>The view part has to be part of this view.</remarks>
            <param name="viewPartReference">The reference to the view part to hide.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.RemoveViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Removes the specified view part from this view.
            </summary>
            <param name="viewPartReference">The reference to the view part to remove.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnActivate">
            <summary>
            Called by the window when this view has been set as the active view. By default, this refreshes the view by calling <see cref="M:Sdl.Desktop.Platform.IView.Refresh"/>.
            Override this method to change its behaviour. Make sure to call <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnActivate"/> to ensure the base class functions properly.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnDeactivate">
            <summary>
            Called by the window when this view is being deactivated. By default, this method always returns true.
            Override this method to change its behaviour. Make sure to call <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnActivate"/> to ensure the base class functions properly.
            </summary>
            <returns>True if it is ok to deactivate this view. False to keep this view as the active view.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.Refresh">
            <summary>
            Refreshes this view's contents. Called by the window when the view should be refreshed.
            </summary>
            <remarks>By default, this method refreshes all view parts which have been initialized (see <see cref="P:Sdl.Desktop.Platform.IViewPartReference.IsInitialized"/>.
            Override this method to change that behaviour.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.SaveState(Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called by the window so this view can save its state in the specified settings object.
            </summary>
            <param name="settings">The settings object to store this views state in.</param>
            <remarks>By default, does nothing. Override this method to change its behaviour.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.GetContentControl">
            <summary>
            Returns the content control for this view. This control will occupy the entire content area of the studio window while this view is active.
            </summary>
            <returns>A Windows Forms control.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnInitControl">
            <summary>
            Initializes the content control for this view.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartAdded">
            <summary>
            Raised when a new view part is added to the view.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartRemoved">
            <summary>
            Raised when a view part is removed from the view. 
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartInitialized">
            <summary>
            Raised right after a view part has been created and initialized with its view part site (see <see cref="M:Sdl.Desktop.Platform.IViewPart.Init(Sdl.Desktop.Platform.IViewPartSite,Sdl.Core.Settings.ISettingsGroup)"/> and <see cref="T:Sdl.Desktop.Platform.IViewPartSite"/>).
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartShown">
            <summary>
            Raised after a view part is shown in the view.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartHidden">
            <summary>
            Raised after a view part is hidden in the view.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartActivated">
            <summary>
            Raised after a view part has been activated in the view.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartDeactivated">
            <summary>
            Raised after a view part has been deactivated in the view.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.AbstractViewWithParts.ActiveViewPartChanged">
            <summary>
            Raised after the active view part has changed. This event is raised after <see cref="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartActivated"/>.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewWithParts.ActiveViewPart">
            <summary>
            Gets or sets the active view part in this view. The view part has to belong to this view and has to be available (see <see cref="P:Sdl.Desktop.Platform.IViewPartReference.Available"/>).
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when trying to set a view part reference that does not belong to this view.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to set a view part reference that is not available (see <see cref="P:Sdl.Desktop.Platform.IViewPartReference.Available"/>).</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewWithParts.ViewParts">
            <summary>
            Returns the list of view parts that belong to this view. This includes non available and disabled parts.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.CreateViewPartToolBarManager(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Returns a new toolbar manager that should be used by the specified view part. Whe  this method returns null, the view creates a default
            toolbar manager. Always returns null.
            </summary>
            <param name="viewPartReference">The view part reference for which to create a toolbar manager.</param>
            <returns>The newly created toolbar manager, or null to use the default view toolbar manager.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.RegisterViewPartCommandBarProvider(Sdl.Desktop.Platform.IViewPartCommandBarProvider)">
            <summary>
            Registers a view part command bar provider. This allows adding items to command bars that are only 
            available to certain view parts.
            </summary>
            <param name="viewPartCommandBarProvider">The view part command bar provider to register.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if viewPartCommandBarProvider is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.UpdateViewPartCommandBarProviderVisibility">
            <summary>
            Updates the visibility is of command bar contributions from view part command bar providers.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.IsInView(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Checks whether the specified view part is currently in view.
            </summary>
            <param name="viewPartReference">A view part reference that is part of this view.</param>
            <returns>True if the vie wpart is in view.</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartCommandBarProviders">
            <summary>
            Gets the list of command bar providers that are registered in this view.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.ShouldAddViewPartExtension(Sdl.Core.PluginFramework.IExtension)">
            <summary>
            Checks whether the specified view part extension is targeting this view.
            </summary>
            <param name="viewPartExtension">The view part extension.</param>
            <returns>True if the view paret should be added to this view.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.IsNonSpecificTargetViewId(Sdl.Core.PluginFramework.IExtension)">
            <summary>
            Checks whether the view part is classified as 'non target specific'.
            </summary>
            <param name="viewPartExtension">The view part extension.</param>
            <returns>True if the view part can be added to all views.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartAdded(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Raises the <see cref="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartAdded"/> event. Override this method to perform additional processing.
            Make sure to call <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartAdded(Sdl.Desktop.Platform.IViewPartReference)"/> to raise the event.
            </summary>
            <param name="viewPartReference">The view part reference to which the event applies.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnRemovingViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Called when removing a view part.
            </summary>
            <remarks>Override this method if you wabnt to cancel the removal under certain circumstances.</remarks>
            <param name="viewPartReference">The view part reference.</param>
            <returns>Return false to cancel the removal.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartRemoved(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Raises the <see cref="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartRemoved"/> event. Override this method to perform additional processing.
            Make sure to call <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartRemoved(Sdl.Desktop.Platform.IViewPartReference)"/> to raise the event.
            </summary>
            <param name="viewPartReference">The view part reference to which the event applies.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartInitialized(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Raises the <see cref="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartInitialized"/> event. Override this method to perform additional processing.
            Make sure to call <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartInitialized(Sdl.Desktop.Platform.IViewPartReference)"/> to raise the event.
            </summary>
            <param name="viewPartReference">The view part reference to which the event applies.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartActivated(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Raises the <see cref="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartActivated"/> event. Override this method to perform additional processing.
            Make sure to call <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartActivated(Sdl.Desktop.Platform.IViewPartReference)"/> to raise the event.
            </summary>
            <param name="viewPartReference">The view part reference to which the event applies.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartDeactivated(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Raises the <see cref="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartDeactivated"/> event. Override this method to perform additional processing.
            Make sure to call <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartDeactivated(Sdl.Desktop.Platform.IViewPartReference)"/> to raise the event.
            </summary>
            <param name="viewPartReference">The view part reference to which the event applies.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnActiveViewPartChanged(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Raises the <see cref="E:Sdl.Desktop.Platform.AbstractViewWithParts.ActiveViewPartChanged"/> event. Override this method to perform additional processing.
            Make sure to call <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnActiveViewPartChanged(Sdl.Desktop.Platform.IViewPartReference)"/> to raise the event.
            </summary>
            <param name="viewPartReference">The view part reference to which the event applies.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartShown(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Raises the <see cref="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartShown"/> event. Override this method to perform additional processing.
            Make sure to call <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartShown(Sdl.Desktop.Platform.IViewPartReference)"/> to raise the event.
            </summary>
            <param name="viewPartReference">The view part reference to which the event applies.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartHidden(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Raises the <see cref="E:Sdl.Desktop.Platform.AbstractViewWithParts.ViewPartHidden"/> event. Override this method to perform additional processing.
            Make sure to call <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnViewPartHidden(Sdl.Desktop.Platform.IViewPartReference)"/> to raise the event.
            </summary>
            <param name="viewPartReference">The view part reference to which the event applies.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.LoadViewParts">
            <summary>
            Called by <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.OnInit(Sdl.Desktop.Platform.IViewSite,Sdl.Core.Settings.ISettingsGroup)"/> method. Use this method to add the initially available view parts to this view, using the <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.AddViewPart(Sdl.Desktop.Platform.IViewPartReference)"/> method.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.CreateControl">
            <summary>
            Creates the visual representation of this view, which is responsible for displaying the view parts and notify the view of changes in view part status.
            </summary>
            <returns>The newly created control, which visually represents this view.</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.AbstractViewWithParts.Control">
            <summary>
            Gets the <see cref="T:Sdl.Desktop.Platform.InternalUI.IViewWithPartsContentControl"/>, which visual representation of this view .
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.AbstractViewWithParts.SetViewPartCommandBarVisibility(System.Boolean)">
            <summary>
            Sets the visiblity of the view part sub command bars.
            </summary>
            <param name="visible">True to show the view part command parts.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Buttons">
            <summary>
            Flags enum representing configurations of standard buttons.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.OK">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.IgnoreAll">
            <summary>
            Ignore All
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.Cancel">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.Help">
            <summary>
            Help
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.Yes">
            <summary>
            Yes
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.No">
            <summary>
            No
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.YesToAll">
            <summary>
            Yes to All
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.NoToAll">
            <summary>
            No to All
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.Apply">
            <summary>
            Apply
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.AddReferenceFile">
            <summary>
            AddReferenceFile
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.AddSourceFile">
            <summary>
            AddSourceFile
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.OKIgnoreAllCancel">
            <summary>
            OK, Ignore All, Cancel
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.OKHelp">
            <summary>
            Ok, Help
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.AddReferenceFileAddSourceFile">
            <summary>
            Add new reference file(s),Add new source files(s)
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.CloseHelp">
            <summary>
            Close, Help
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.OKCancel">
            <summary>
            OK, Cancel
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.OKCancelHelp">
            <summary>
            OK, Cancel, Help
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.YesNo">
            <summary>
            Yes, No
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.YesNoCancel">
            <summary>
            Yes, No, Cancel
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.YesNoCancelHelp">
            <summary>
            Yes, No, Cancel, Help
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.YesNoYesToAllNoToAll">
            <summary>
            Yes, No, Yes to All, No to All
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Buttons.YesNoYesToAllNoToAllCancel">
            <summary>
            Yes, No, Yes to All, No to All, Cancel
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.AbstractAction">
            <summary>
            Abstract base class for user actions, which can be added to a command bar.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.AbstractAction.PropertyChanged">
            <summary>
            Raised when the value of one of the action's properties changed.
            </summary>
            <remarks>For possible property values, see the constants defined in <see cref="T:Sdl.Desktop.Platform.CommandBars.ActionProperties"/>.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.Id">
            <summary>
            Gets or sets the unique id for this action.
            </summary>
            <remarks>This id is unique across the Studio.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.Text">
            <summary>
            Gets or sets the text for this action.
            </summary>
            <remarks>Can contain an ampersand to indicate the mnemonic character.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.ToolTipText">
            <summary>
            Gets or sets the tooltip test for this action.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.Icon">
            <summary>
            Gets or sets the icon for this action. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.Enabled">
            <summary>
            Gets or sets whether this action is currently enabled.
            </summary>
            <remarks>If an action is not enabled, it is shown is greyed out on the command bar.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.Available">
            <summary>
            Gets or sets whether this action is currently available.
            </summary>
            <remarks>If an action is not enabled, it is not shown on the command bar.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.Style">
            <summary>
            Gets or sets the action style.
            </summary>
            <remarks>This should be set before adding the action to a commandbar.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.FontColor">
            <summary>
            Gets or sets the action font color.
            </summary>
            <remarks>This should be set before adding the action to a commandbar.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.BackgroundColor">
            <summary>
            Gets or sets the action background color.
            </summary>
            <remarks>This should be set before adding the action to a commandbar.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.HoverBackgroundColor">
            <summary>
            Gets or sets the action background color on mouse hover.
            </summary>
            <remarks>This should be set before adding the action to a commandbar.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.Bold">
            <summary>
            Gets or sets the bold text.
            </summary>
            <remarks>This should be set before adding the action to a commandbar.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.Checked">
            <summary>
            Gets or sets whether this action is checked. This property is only valid when the action style (<see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.Style"/>
            property is set to <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionStyle.ToggleButton"/>.
            </summary>
            <remarks>Setting this property to true when the action has been added to a command bar will result in the <see cref="M:Sdl.Desktop.Platform.CommandBars.AbstractAction.Execute"/> method being called.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.ActionGroup">
            <summary>
            Gets or sets the action group this action is part of. This property is only valid when the action style (<see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.Style"/>
            property is set to <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionStyle.ToggleButton"/>.
            </summary>
            <remarks>When null, the action is shown on the command bar as a checkbox, otherwise it is shown as a radio button.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractAction.Init(Sdl.Desktop.Platform.IStudioWindow)">
            <summary>
            Called right after the action has been created.
            </summary>
            <param name="window">The studio window this action instance is part of.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractAction.OnInit(Sdl.Desktop.Platform.IStudioWindow)">
            <summary>
            Called right after the action has been created. 
            </summary>
            <remarks>Override this method to perform additional initialization.</remarks>
            <param name="window">The window.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.Window">
            <summary>
            Gets the window.
            </summary>
            <value>The window.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractAction.Execute">
            <summary>
            Called when the user activates this action. Override this method to perform the action logic.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.Extension">
            <summary>
            Gets or sets the extension.
            </summary>
            <value>The extension.</value>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.ActionAttribute">
            <summary>
            Gets the action attribute.
            </summary>
            <value>The action attribute.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractAction.OnPropertyChanged(Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Sdl.Desktop.Platform.CommandBars.AbstractAction.PropertyChanged"/> event.
            </summary>
            <param name="e">The event arguments.</param>
            <remarks>When overriding this method, make sure to call the base class implementation, so the event is raised.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.AvailableCondition">
            <summary>
            Gets or sets the condition that controls the availability of this action.
            </summary>
            <remarks>Use this property if the condition exposes state information that was computed 
            as part of the condition evaluation to avoid having to compute it again.
            </remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractAction.EnabledCondition">
            <summary>
            Gets or sets the condition that controls the enablement of this action.
            </summary>
            <remarks>Use this property if the condition exposes state information that was computed 
            as part of the condition evaluation to avoid having to compute it again.
            </remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType">
            <summary>
            Possibles sites for adding items to command bars.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType.Window">
            <summary>
            Adds the item to the window; it is available while the window is showing.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType.View">
            <summary>
            Adds the item to the Controller; it is available while the view specified in <see cref="P:Sdl.Desktop.Platform.CommandBars.AbstractCommandBarItemAttribute.TargetCommandBarSiteId"/> is active.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType.ViewPart">
            <summary>
            Adds the item to the Controller; it is available while the view part specified in <see cref="P:Sdl.Desktop.Platform.CommandBars.AbstractCommandBarItemAttribute.TargetCommandBarSiteId"/> is visible.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType.ViewPartCommandBarProvider">
            <summary>
            Adds the item to the Controller; it is available while the a view part supported by the view part command bar provider specified in <see cref="P:Sdl.Desktop.Platform.CommandBars.AbstractCommandBarItemAttribute.TargetCommandBarSiteId"/> is visible.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.AbstractCommandBarItemAttribute">
            <summary>
            Abstract base class for command bar item extension attributes.
            </summary>
            <remarks>
            The concrete classes extending this abstract base class:
            <list>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/>: allows plugging in new static actions into the studio, for which all proeprties are defined in the extennsion attribute.</item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute"/>: allows plugging in new standard actions into the studio, for which all properties are defined programmatically.</item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute"/>: allows registering new dynamically created actions with the studio.</item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginMenuAttribute"/>: allows plugging in new menus into the studio.</item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginToolBarAttribute"/>: allows plugging in new toolbars into the studio.</item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginSeparatorAttribute"/>: allows plugging in new separators into the studio.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractCommandBarItemAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractCommandBarItemAttribute.#ctor(System.String,System.String,System.String,Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType)">
            <summary>
            Constructor with basic properties.
            </summary>
            <param name="id">A unique id for this command bar item.</param>
            <param name="name">A name for this command bar item. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">A description for this command bar item. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="targetCommandBarSiteType">The site at which to add the item. This controls when the item will be available within the studio.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractCommandBarItemAttribute.#ctor(System.String,System.String,System.String,Sdl.Desktop.Platform.CommandBars.ActionSize,Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType)">
            <summary>
            Constructor with basic properties.
            </summary>
            <param name="id">A unique id for this command bar item.</param>
            <param name="name">A name for this command bar item. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">A description for this command bar item. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="size">A size for the command bar item.</param>
            <param name="targetCommandBarSiteType">The site at which to add the item. This controls when the item will be available within the studio.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractCommandBarItemAttribute.TargetCommandBarSiteType">
            <summary>
            Gets or sets the site at which to add the item. This controls when the item will be available within the studio.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractCommandBarItemAttribute.TargetCommandBarSiteId">
            <summary>
            Gets or sets the id of the site at which to add the item. Depending on the <see cref="P:Sdl.Desktop.Platform.CommandBars.AbstractCommandBarItemAttribute.TargetCommandBarSiteType"/>, this should be:
            <list>
            <item><see cref="F:Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType.Window"/>: null</item>
            <item><see cref="F:Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType.View"/>: the id of the view for which to make the item available.</item>
            <item><see cref="F:Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType.ViewPart"/>: the id of the view part for which to make the item available.</item>
            <item><see cref="F:Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType.ViewPartCommandBarProvider"/>: the id of the view part command bar provider for which to make the item available.</item>
            </list>
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractCommandBarItemAttribute.Size">
            <summary>
            Gets or sets the size of the item on the command bar.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.AbstractDynamicAction">
            <summary>
            Abstract base class for dynamic actions. A dynamic action is an action that is dynamically created in user
            code and added to a command bar programmatically.
            </summary>
            <remarks>To implement a dynamic action, either implement <see cref="T:Sdl.Desktop.Platform.CommandBars.IDynamicAction"/> directly or extend <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractDynamicAction"/>.
            In order to register a dynamic action with the environment
            so it becomes available for keyboard shortcut customization etc., mark your dynamic action implementation with a <see cref="T:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute"/>.
            Other types of actions include static action (<see cref="T:Sdl.Desktop.Platform.CommandBars.IStaticAction"/> and <see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/>) and standard actions
            (<see cref="T:Sdl.Desktop.Platform.CommandBars.IAction"/> and <see cref="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute"/>).</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractDynamicAction.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractDynamicAction"/> class.
            </summary>
            <param name="id">The action id.</param>
            <param name="text">The action text.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionHandler">
            <summary>
            Abstract base class for retargetable action handlers. A retargetable action handler defines the behaviour and enabled state of a retargetable
            action a long as it is this action's current handler.
            </summary>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.IRetargetableActionHandler"/>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionHandler"/> class.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionHandler.EnabledChanged">
            <summary>
            Raised when the state of the action changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionHandler.Enabled">
            <summary>
            Gets or sets whether this action is enabled.
            </summary>
            <value></value>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionHandler.Execute">
            <summary>
            Called when the user activates the action.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionHandler.OnEnabledChanged">
            <summary>
            Raises the <see cref="E:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionHandler.EnabledChanged"/> event.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionWithPopup">
            <summary>
            Abstract base class for creating a retargetable action with a pop-up control (see <see cref="T:Sdl.Desktop.Platform.CommandBars.IRetargetableActionWithPopup"/>).
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionWithPopup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionWithPopup.UpdateAction">
            <summary>
            Updates the action based on the current handler.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionWithPopup.Handler">
            <summary>
            Gets or sets the handler that is used to handle execute action, to control its enabled state and to provide the pop-up control.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionWithPopup.DefaultHandler">
            <summary>
            Gets or sets the handler that gets used when no specific handler is assigned to <see cref="P:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionWithPopup.Handler"/>.
            </summary>
            <remarks>Can be null.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionWithPopup.PopupControl">
            <summary>
            Gets the control to be displayed when the user clicks the side-arrow of the button.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionWithPopup.OnShowingPopup">
            <summary>
            Called before the popup control is shown.
            Calls <see cref="M:Sdl.Desktop.Platform.CommandBars.IRetargetableActionHandlerWithPopup.OnShowingPopup"/> on the currently enabled handler.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionWithPopup.OnPopupClosed">
            <summary>
            Called after the popup control is closed.
            Calls <see cref="M:Sdl.Desktop.Platform.CommandBars.IRetargetableActionHandlerWithPopup.OnPopupClosed"/> on the currently enabled handler.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.AbstractStaticAction">
            <summary>
            Abstract base class for static actions. A static action is an action for which all its properties are defined using the <see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/> extension
            attribute.
            </summary>
            <remarks>In order to create a static action extend <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractStaticAction"/> or implement <see cref="T:Sdl.Desktop.Platform.CommandBars.IStaticAction"/> directly. Then, mark your implementation with the <see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/>.
            See the description of <see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/> for a list of supported auxiliary attributes for defining on which command
            bars the action appears and which keyboard shortcuts the action has.
            </remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractStaticAction.Window">
            <summary>
            Gets the window.
            </summary>
            <value>The window.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractStaticAction.Init(Sdl.Desktop.Platform.IStudioWindow)">
            <summary>
            Called right after the action has been created.
            </summary>
            <param name="window">The studio window this action instance is part of.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractStaticAction.OnInit(Sdl.Desktop.Platform.IStudioWindow)">
            <summary>
            Called right after the action has been created.
            </summary>
            <remarks>Override this method to perform additional initialization.</remarks>
            <param name="window">The window.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractStaticAction.Execute">
            <summary>
            Called when the user activates this action.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractStaticAction.OnConditionAdded(Sdl.Desktop.Platform.Extensions.ICondition,Sdl.Desktop.Platform.Extensions.ConditionResult)">
            <summary>
            Called after the action has been created.
            </summary>
            <param name="condition">The condition that is attached to the action.</param>
            <param name="result">The result controlled by the attached condition.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractStaticAction.Conditions">
            <summary>
            Gets the collection of conditions attached to this action.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractStaticAction.GetCondition``1">
            <summary>
            Gets the condition of the specified type attached to this action.
            </summary>
            <typeparam name="T">The condition type.</typeparam>
            <returns>The (first) condition with matching type that is attached to this action; or null if no such condition is attached to the action.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.AbstractViewAction">
            <summary>
             Abstract base class for a view-specific action.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractViewAction.OnInit(Sdl.Desktop.Platform.IStudioWindow)">
            <summary>
            Called right after the action has been created.
            </summary>
            <param name="window">The window.</param>
            <remarks>Override this method to perform additional initialization.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractViewAction.ViewId">
            <summary>
            The ID of the view this action relates to.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractViewAction.OnInitView(Sdl.Desktop.Platform.IViewReference)">
            <summary>
            Called when this action obtains a reference to the view it relates to.
            This is not necessarily when the action is first created - it may be when the view first becomes active.
            </summary>
            <param name="view">The view.</param>
            <remarks>Override this method to perform additional initialization which requires the view reference.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractViewAction.View">
            <summary>
            The view this action relates to.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.AbstractViewPartAction">
            <summary>
            Abstract base class for an action that is specific to a <see cref="T:Sdl.Desktop.Platform.IViewPart"/>
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractViewPartAction.OnInit(Sdl.Desktop.Platform.IStudioWindow)">
            <summary>
            Called right after the action has been created. 
            </summary>
            <remarks>Override this method to perform additional initialization.</remarks>
            <param name="window">The window.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractViewPartAction.ViewPartId">
            <summary>
            The ID of the view part this action relates to.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.AbstractViewPartAction.OnInitViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Called when this action obtains a reference to the view part it relates to.
            This is when the view or view part is first shown.
            </summary>
            <param name="viewPart">The view part.</param>
            <remarks>Override this method to perform additional initialization.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.AbstractViewPartAction.ViewPart">
            <summary>
            The view part this action relates to.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute">
            <summary>
            Extension attribute for defining actions.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ActionAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ActionAttribute.#ctor(System.String,System.String,System.String,Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType)">
            <summary>
            Constructor with basic properties.
            </summary>
            <param name="id">A unique id for this plug-in action.</param>
            <param name="name">A name for this plug-in action. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">A description for this plug-in action. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="targetCommandBarSiteType">The site at which to add the item. This controls when the plug-in action will be available within the studio.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ActionAttribute.Category">
            <summary>
            The category to which this action belongs to (for example, "Window").  This will be used
            when displaying all actions on screen when, for example, allowing users to change shortcut keys.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ActionAttribute.CanChangeShortcut">
            <summary>
            Gets or sets whether this shortcut can be changed by the user, <c>true</c> by default.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ActionAttribute.VisibleToUsers">
            <summary>
            Gets or set whether this action should be displayed to the user, <c>true</c> by default
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ActionAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            Validates the attribute at build time to make sure all required members have been set.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ActionAttribute.ValidateRequireInterface(Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            Validates whether the extension implements <see cref="T:Sdl.Desktop.Platform.CommandBars.IAction"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ActionInfoCollection">
            <summary>
            Read-only collection of <see cref="T:Sdl.Desktop.Platform.CommandBars.IActionInfo"/> objects.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ActionInfoCollection.Item(System.String)">
            <summary>
            Returns the action witgh the specified id.
            </summary>
            <param name="id">The id for which to retrieve the action.</param>
            <returns>The action with the specified id; or null, if this collection does not contain an action with the given id.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ActionInfoCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains the action with the specified id.
            </summary>
            <param name="id">The action id.</param>
            <returns>
            	<c>true</c> if this collection contains the action with the specified id; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ActionInfoEventArgs">
            <summary>
            Event args related to an <see cref="T:Sdl.Desktop.Platform.CommandBars.IActionInfo"/> object.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ActionInfoEventArgs.#ctor(Sdl.Desktop.Platform.CommandBars.IActionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.CommandBars.ActionInfoEventArgs"/> class.
            </summary>
            <param name="actionInfo">The action info.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ActionInfoEventArgs.ActionInfo">
            <summary>
            Gets the action info object.
            </summary>
            <value>The action info object.</value>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.CommandBarActionCollection">
            <summary>
            Read-only collection of command bar actions.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.CommandBarItemCancelEventArgs">
            <summary>
            Provides data for a cancelable event.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.CommandBarItemCancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the event should be canceled.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.CommandBarItemCollection">
            <summary>
            Read-only collection of command bar items.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.CommandBarItemCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the item with the given id. Returns -1 if the item was not found.
            </summary>
            <param name="itemId">The id of the command bar item.</param>
            <returns>The index of the item; or -1 if the item was not found.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.CommandBarItemEventArgs">
            <summary>
            Event args for events related to command bar items.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.CommandBarItemEventArgs.#ctor(Sdl.Desktop.Platform.CommandBars.ICommandBarItem,System.Int32)">
            <summary>
            Creates an instance for an event for a given item at a given index within a command bar.
            </summary>
            <param name="item"></param>
            <param name="index"></param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.CommandBarItemEventArgs.Item">
            <summary>
            Gets the command bar item.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.CommandBarItemEventArgs.Index">
            <summary>
            Gets the index where the item resides or resided within the command bar.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ContextMenuShowingEventArgs">
            <summary>
            Event args for events related to showing a context menu.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ContextMenuShowingEventArgs.#ctor(System.Drawing.Point,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="location">The screen location where the context menu will or should be shown.</param>
            <param name="keyboard">True if the event was generated through the keyboard.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ContextMenuShowingEventArgs.Location">
            <summary>
            The suggested screen location where the context menu should be displayed. Set this property to change the location.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ContextMenuShowingEventArgs.Keyboard">
            <summary>
            Returns whether the context menu is being shown as the result of a key press.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute">
            <summary>
            Extension attribute for registering an dynamic action with the Studio. A dynamic action is an action that is dynamically created in user
            code and added to a command bar programmtically. 
            </summary>
            <remarks>
            <para>When you register a dynamic action (this is not required), the action becomes available for keyboard shortut customization.</para>
            <para>To implement a dynamic action, either implement <see cref="T:Sdl.Desktop.Platform.CommandBars.IDynamicAction"/> directly or extend <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractDynamicAction"/>. 
            In order to register a dynamic action with the environment
            so it becomes available for keyboard shortcut customization etc., mark your dynamic action implementation with a <see cref="T:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute"/>.</para>
            <para>Other types of actions include static action (<see cref="T:Sdl.Desktop.Platform.CommandBars.IStaticAction"/> and <see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/>) and standard actions 
            (<see cref="T:Sdl.Desktop.Platform.CommandBars.IAction"/> and <see cref="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute"/>).</para></remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute.#ctor(System.String,System.String,System.String,Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType)">
            <summary>
            Constructor with basic properties.
            </summary>
            <param name="id">A unique id for this plug-in action.</param>
            <param name="name">A name for this plug-in action. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">A description for this plug-in action. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="targetCommandBarSiteType">The site at which to add the item. This controls when the plug-in action will be available within the studio.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            Validates the attribute at build time to make sure all required members have been set.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.AbstractCommandBarItemLocationAttribute">
            <summary>
            Abstract base class for auxiliary extension attributes that specify the location of plug-in items on a command bar.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.AbstractCommandBarItemLocationAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.AbstractCommandBarItemLocationAttribute.#ctor(System.String)">
            <summary>
            Constructor using the target command bar path.
            </summary>
            <param name="path">The command bar path at which to insert the plug-in item.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.Extensions.AbstractCommandBarItemLocationAttribute.Path">
            <summary>
            Gets or sets the command bar path at which to insert the plug-in item.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.Extensions.AbstractCommandBarItemLocationAttribute.InsertBefore">
            <summary>
            The id of the command bar item before which this plug-in item should be inserted.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.Extensions.AbstractCommandBarItemLocationAttribute.InsertAfter">
            <summary>
            The id of the command bar item after which this plug-in item should be inserted.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.Extensions.AbstractCommandBarItemLocationAttribute.InstanceName">
            <summary>
            An instance specific name, overriding the default <see cref="P:Sdl.Core.PluginFramework.ExtensionAttribute.Name"/>, which should be 
            used for this instance. This only has an effect for instances of actions. Can be null.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.ContextFactory">
            <summary>
            Implements the action context factory
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.ContextFactory.GetActionContext(System.Type)">
            <summary>
            Creates the action context based on a type
            </summary>
            <param name="contextType">The type from which the action context is built.
            </param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.ContextMenuLocationAttribute">
            <summary>
            Auxiliary extension attribute to specify the location of a command bar item plug-in within a context menu.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.ContextMenuLocationAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.ContextMenuLocationAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor specifying the id of the context menu on which to add the plug-in item.
            </summary>
            <param name="contextMenuId">The id of the context menu.</param>
            <param name="path">The path of a sub-menu within the context menu on which the item shoudl appear. Can be null.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.Extensions.ContextMenuLocationAttribute.ContextMenuId">
            <summary>
            Gets or sets the id of the context menu on which to add the plug-in item.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.ContextMenuLocationAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            Validates an extension targeting this extension point. This method is called by the framework while generating the plug-in manifest.
            </summary>
            <param name="info">Information about the extension.</param>
            <param name="context">Provides functionality to validate extensions targeting the extension point
            and report warning or error messages</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaData">
            <summary>
            Default implementation of <see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.IDynamicActionMetaData"/>.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaData.#ctor(Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute)">
            <summary>
            Constructor with a dynamic action attribute.
            </summary>
            <param name="attribute">A dynamic action attribute, describing the action.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaData.DynamicActionAttribute">
            <summary>
            Gets a <see cref="P:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaData.DynamicActionAttribute"/> attribute that describes the dynamic action.
            </summary>
            <value></value>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaData.GetShortcuts(Sdl.Desktop.Platform.IUserProfile)">
            <summary>
            Gets the keyboard shortcuts for the specified user profile.
            </summary>
            <param name="userProfileReference">The user profile for which to get the keyboard shortcuts.</param>
            <returns>
            An array of keyboard shortcuts that can be used to execute this action when the specified user profile is active.
            </returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaData.GetDefaultShortcuts">
            <summary>
            Gets the default shortcuts for this action. These shortcuts will be used when there are no explicit
            shortcuts defined for the current user profile, as returned by <see cref="M:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaData.GetShortcuts(Sdl.Desktop.Platform.IUserProfile)"/>.
            </summary>
            <returns>
            An array of keyboard shortcuts that can be used to execute this action.
            </returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaData.SetShortcuts(System.String,System.Windows.Forms.Keys[])">
            <summary>
            Sets the shortcuts for the specified user profile.
            </summary>
            <param name="userProfileId">The user profile id.</param>
            <param name="shortcuts">The shortcuts.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaData.SetDefaultShortcuts(System.Windows.Forms.Keys[])">
            <summary>
            Sets the default shortcuts.
            </summary>
            <param name="shortcuts">The shortcuts.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaDataProviderAttribute">
            <summary>
            <para>Extension attribute for registering dynamic action metadata providers.
            These can be used to publich dynamic action meta data to the dektop platform, specifically
            in order to publish shortcuts for dynamic actions, which are known at application startup, but not at design time. 
            An example of this is the View->[View X] actions. These can be discovered at startup through the plug-in framework, but are not known at
            design time. </para>
            <para>In order to implement a provider, create a class that implements <see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.IDynamicActionMetaDataProvider"/> and mark it with this attribute.</para>
            <para>For publishing meta data about a dynamic action that is known at design time, use the <see cref="T:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute"/> attribute.</para>
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaDataProviderAttribute.#ctor">
            <summary>
            Default constructor for xml serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaDataProviderAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor with required attributes.
            </summary>
            <param name="id">The unique id of the provider.</param>
            <param name="name">The name of the provider.</param>
            <param name="description">The description of the provider.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaDataProviderAttribute.ValidateName(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            Validates the extension Name. Does not do any specific checks, since the name is not essential.
            </summary>
            <param name="info">Information about the extension.</param>
            <param name="context">Provides functionality to validate extensions targeting the extension point
            and report warning or error messages</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.IDynamicActionMetaData">
            <summary>
            Provides meta data for a dynamic action. For more information see <see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.IDynamicActionMetaDataProvider"/>.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.Extensions.IDynamicActionMetaData.DynamicActionAttribute">
            <summary>
            Gets a <see cref="P:Sdl.Desktop.Platform.CommandBars.Extensions.IDynamicActionMetaData.DynamicActionAttribute"/> attribute that describes the dynamic action.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.IDynamicActionMetaData.GetShortcuts(Sdl.Desktop.Platform.IUserProfile)">
            <summary>
            Gets the keyboard shortcuts for the specified user profile.
            </summary>
            <param name="userProfileReference">The user profile for which to get the keyboard shortcuts.</param>
            <returns>An array of keyboard shortcuts that can be used to execute this action when the specified user profile is active.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.IDynamicActionMetaData.GetDefaultShortcuts">
            <summary>
            Gets the default shortcuts for this action. These shortcuts will be used when there are no explicit 
            shortcuts defined for the current user profile, as returned by <see cref="M:Sdl.Desktop.Platform.CommandBars.Extensions.IDynamicActionMetaData.GetShortcuts(Sdl.Desktop.Platform.IUserProfile)"/>.
            </summary>
            <returns>An array of keyboard shortcuts that can be used to execute this action.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.IDynamicActionMetaDataProvider">
            <summary>
            This interface can be implemented in order to publish dynamic action meta data to the dektop platform, specifically
            in order to publish shortcuts for dynamic actions, which are known at application startup, but not at design time. 
            Implementations should be marked up with the <see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaDataProviderAttribute"/> attribute.
            For more information see <see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.DynamicActionMetaDataProviderAttribute"/>.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.IDynamicActionMetaDataProvider.GetMetaData">
            <summary>
            Gets an array of dynmic action meta data.
            </summary>
            <returns>The dnamic action meta data to puclish to the platform.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.IPluginCommandBarControl">
            <summary>
            Interface to be implemented for creating a plug-in command bar control.
            </summary>
            <remarks>To create a new plug-in command bar control, create a class that implements this interface and annotate it with the
            <see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginCommandBarControlAttribute"/> attribute.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.IPluginCommandBarControl.GetControl(Sdl.Desktop.Platform.IStudioWindow)">
            <summary>
            Gets the control to be shown in the command bar.
            </summary>
            <param name="window">The window within which the control will be displayed. Use this to access services or other information available within the window.</param>
            <returns>The control.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.IPluginMenu">
            <summary>
            Interface to be implemented for creation a plug-in menu. 
            </summary>
            <remarks>To create a new plug-in menu, create a class that implements this interface and annotate it with the
            <see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginMenuAttribute"/> attribute.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.IPluginMenu.FillMenu(Sdl.Desktop.Platform.CommandBars.IMenu)">
            <summary>
            Called when the menu needs to be popluated.
            </summary>
            <param name="menu">The empty plug-in menu.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.IPluginSeparator">
            <summary>
            Interface to be implemented to create a plug-in separator.
            </summary>
            <remarks>To create a new plug-in separator, create a class that implements this interface and annotate it with the
            <see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginSeparatorAttribute"/> attribute.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.IPluginToolBar">
            <summary>
            Interface to be implemented for creation a plug-in tool bar. 
            </summary>
            <remarks>To create a new plug-in toolbar, create a class that implements this interface and annotate it with the
            <see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginToolBarAttribute"/> attribute.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.IPluginToolBar.FillToolBar(Sdl.Desktop.Platform.CommandBars.IToolBar)">
            <summary>
            Called when the tool bar needs to be populated.
            </summary>
            <param name="toolBar">The empty plug-in tool bar.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.MenuLocationAttribute">
            <summary>
            Auxiliary extension attribute to specify the location of a command bar item on a menu.
            </summary>
            <remarks>Use this attribute together with one of the command bar item extension attributes to indicate that the item
            should appear on a particular menu:
            <list>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginMenuAttribute"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginSeparatorAttribute"/></item>
            </list>
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.MenuLocationAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.MenuLocationAttribute.#ctor(System.String)">
            <summary>
            Constructor with path of the menu on which to display the command bar item.
            </summary>
            <param name="path">The path of the menu on which to display the command bar item.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginCommandBarControlAttribute">
            <summary>
            Extension attribute for defining plug-in command bar controls.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.PluginCommandBarControlAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.PluginCommandBarControlAttribute.#ctor(System.String,System.String,System.String,Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType)">
            <summary>
            Constructor with required properties
            </summary>
            <param name="id">A unique if for the command bar control.</param>
            <param name="name">The name of the command bar control.</param>
            <param name="description">The description of the command bar control.</param>
            <param name="targetCommandBarSiteType">The site at which to add the control. This controls when the control will be available within the studio.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.Extensions.PluginCommandBarControlAttribute.Spring">
            <summary>
            Gets or sets whether this command bar control spans the entire width available.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.Extensions.PluginCommandBarControlAttribute.Width">
            <summary>
            Gets or sets the width of this item. This property is ignored when <see cref="P:Sdl.Desktop.Platform.CommandBars.Extensions.PluginCommandBarControlAttribute.AutoSize"/> is set to true.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.Extensions.PluginCommandBarControlAttribute.AutoSize">
            <summary>
            Gets or sets whether this item needs to automatically resize to reflect the size of the hosted control.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginMenuAttribute">
            <summary>
            Extension attribute for defining plug-in menus.
            </summary>
            <remarks>To create a new plug-in menu, create a class that implements this interface and annotate it with the
            <see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginMenuAttribute"/> attribute.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.PluginMenuAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.PluginMenuAttribute.#ctor(System.String,System.String,System.String,Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType)">
            <summary>
            Constructor with required properties
            </summary>
            <param name="id">A unique if for the plug-in menu.</param>
            <param name="name">The name for the plug-in menu. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">The description for the plug-in menu. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="targetCommandBarSiteType">The site at which to add the plug-in menu. This controls when the menu will be available within the studio.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.PluginPopupControlContainerAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.PluginPopupControlContainerAttribute.#ctor(System.String,System.String,System.String,Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType)">
            <summary>
            Constructor with required properties
            </summary>
            <param name="id">A unique if for the plug-in menu.</param>
            <param name="name">The name for the plug-in menu. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">The description for the plug-in menu. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="targetCommandBarSiteType">The site at which to add the plug-in menu. This controls when the menu will be available within the studio.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginSeparatorAttribute">
            <summary>
            Extension attribute for defining plug-in tool separators.
            </summary>
            <remarks>To create a new plug-in separator, create a class that implements this interface and annotate it with the
            <see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginSeparatorAttribute"/> attribute.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.PluginSeparatorAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.PluginSeparatorAttribute.#ctor(System.String,Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType)">
            <summary>
            Constructor with required properties
            </summary>
            <param name="id">A unique if for the plug-in separator.</param>
            <param name="targetCommandBarSiteType">The site at which to add the plug-in separator. This controls when the separator will be available within the studio.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.PluginSeparatorAttribute.ValidateName(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            Validates the extension Name. Does not check anything, since Name is not a required attribute for a separator.
            </summary>
            <param name="info">Information about the extension.</param>
            <param name="context">Provides functionality to validate extensions targeting the extension point
            and report warning or error messages</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginToolBarAttribute">
            <summary>
            Extension attribute for defining plug-in tool bars.
            </summary>
            <remarks>To create a new plug-in tool bar, create a class that implements this interface and annotate it with the
            <see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginToolBarAttribute"/> attribute.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.PluginToolBarAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.PluginToolBarAttribute.#ctor(System.String,System.String,System.String,Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType)">
            <summary>
            Constructor with required properties
            </summary>
            <param name="id">A unique if for the plug-in tool bar.</param>
            <param name="name">The name for the plug-in tool bar. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">The description for the plug-in tool bar. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="targetCommandBarSiteType">The site at which to add the plug-in tool bar. This controls when the tool bar will be available within the studio.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.RibbonApplicationMenuLocationAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.RibbonApplicationMenuLocationAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor specifying the id of the context menu on which to add the plug-in item.
            </summary>
            <param name="ribbonApplicationMenuId">The id of the context menu.</param>
            <param name="path">The path of a sub-menu within the context menu on which the item should appear. Can be null.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.Extensions.RibbonApplicationMenuLocationAttribute.RibbonApplicationMenuId">
            <summary>
            Gets or sets the id of the context menu on which to add the plug-in item.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.RibbonApplicationMenuLocationAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            Validates an extension targeting this extension point. This method is called by the framework while generating the plug-in manifest.
            </summary>
            <param name="info">Information about the extension.</param>
            <param name="context">Provides functionality to validate extensions targeting the extension point
            and report warning or error messages</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.RibbonGroupLocationAttribute">
            <summary>
            Auxiliary extension attribute to specify the location of a ribbon tab.
            </summary>
            <remarks>Use this attribute together with one of the command bar item extension attributes to indicate that the item
            should appear on a particular menu:
            <list>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginMenuAttribute"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginSeparatorAttribute"/></item>
            </list>
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.RibbonGroupLocationAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.RibbonGroupLocationAttribute.#ctor(System.String)">
            <summary>
            Constructor with path of the ribbon group on which to display the command bar item.
            </summary>
            <param name="path">The path of the ribbon group on which to display the command bar item.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.RibbonTabLocationAttribute">
            <summary>
            Auxiliary extension attribute to specify the location of a ribbon tab.
            </summary>
            <remarks>Use this attribute together with one of the command bar item extension attributes to indicate that the item
            should appear on a particular menu:
            <list>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginMenuAttribute"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginSeparatorAttribute"/></item>
            </list>
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.RibbonTabLocationAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.Extensions.ToolBarLocationAttribute">
            <summary>
            Auxiliary extension attribute to specify the location of a command bar item on a tool bar.
            </summary>
            <remarks>Use this attribute together with one of the command bar item extension attributes to indicate that the item
            should appear on a particular menu:
            <list>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginMenuAttribute"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.CommandBars.Extensions.PluginSeparatorAttribute"/></item>
            </list>
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.ToolBarLocationAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.Extensions.ToolBarLocationAttribute.#ctor(System.String)">
            <summary>
            Constructor with path of the toolbar or toolbar sub-menu on which to display the command bar item.
            </summary>
            <param name="path">The path of the toolbar or toolbar sub-menu on which to display the command bar item.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.Extensions.ToolBarLocationAttribute.ShowToolBarText">
            <summary>
            Gets or sets whether to show the command bar item's text on the toolbar. Default is false.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ActionStyle">
            <summary>
            Enumeration of different action styles.
            </summary>
            <seealso cref="P:Sdl.Desktop.Platform.CommandBars.IAction.Style"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionStyle.PushButton">
            <summary>
            Push button action.
            </summary>
            <remarks>This type of action is represented by a normal menu item or toolbar button.
            When click the <see cref="M:Sdl.Desktop.Platform.CommandBars.IStaticAction.Execute"/> method is called.</remarks>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionStyle.ToggleButton">
            <summary>
            Toggle button action.
            </summary>
            <remarks>Depending on the whether <see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.ActionGroup"/> is set, the action is either represented as
            a checkbox or as a radio button.</remarks>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionStyle.ToggleButtonWithIcon">
            <summary>
            Toggle button with icon action.
            </summary>
            <remarks>The action is represented as a toggle button with icon instead of checkbox.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ActionSize">
            <summary>
             The size of the tool
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionSize.Default">
            <summary>
             The size of the tool will be based on default for the tool or the containing
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionSize.ImageOnly">
            <summary>
            The caption of the tool is hidden.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionSize.Normal">
            <summary>
             The image and text of the tool are displayed.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionSize.Large">
            <summary>
            The tool displays an image with the text below.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.LayoutDirection">
            <summary>
            Enumeration used to define how the tools within the group are arranged.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.LayoutDirection.Vertical">
            <summary>
            The tools are arranged in columns.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.LayoutDirection.Horizontal">
            <summary>
            The tools are arranged into a series of rows of tools.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.LayoutAlignment">
            <summary>
             Enumeration used to define how the items within the group are aligned with respect to the group's
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.LayoutAlignment.Default">
            <summary>
            The alignment of the items is the default, which is near.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.LayoutAlignment.Near">
            <summary>
            The items are arranged such that they are nearest to the top edge when the
            layout direction is vertical and nearest the left edge when the layout direction
            is horizontal.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.LayoutAlignment.Center">
            <summary>
            The items are arranged such that they are vertically centered when the layout
            direction is vertical and horizontally centered when the layout direction
            is horizontal.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.LayoutAlignment.Far">
            <summary>
            The items are arranged such that they are nearest to the bottom edge when
            the layout direction is vertical and nearest the right edge when the layout
            direction is horizontal.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ActionProperties">
            <summary>
            Flags enumeration defining action properties for use in action property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.None">
            <summary>
            No action properties are affected.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Text">
            <summary>
            Text property.
            </summary>
            <see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.Text"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.ToolTipText">
            <summary>
            ToolTipText property.
            </summary>
            <see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.ToolTipText"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Icon">
            <summary>
            Icon property.
            </summary>
            <see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.Icon"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Shortcuts">
            <summary>
            Shortcut property.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Enabled">
            <summary>
            Enabled property.
            </summary>
            <see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.Enabled"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Available">
            <summary>
            Available property.
            </summary>
            <see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.Available"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Style">
            <summary>
            Style property.
            </summary>
            <see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.Style"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Checked">
            <summary>
            Checked property.
            </summary>
            <see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.Checked"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.ActionGroup">
            <summary>
            ActionGroup property.
            </summary>
            <see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.ActionGroup"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.ShowText">
            <summary>
            ShowText property.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.PopupControl">
            <summary>
            PopupControl property. Only applies to <see cref="T:Sdl.Desktop.Platform.CommandBars.IActionWithPopup"/>
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Size">
            <summary>
            Action size
            </summary>
            <see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.ActionGroup"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.FontColor">
            <summary>
             Font color
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.BackgroundColor">
            <summary>
             Background color
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Bold">
            <summary>
            Bold text
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.HoverBackgroundColor">
            <summary>
             Mouse Hover Background color
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.All">
            <summary>
            All properties combined.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs">
            <summary>
            Event args for the <see cref="E:Sdl.Desktop.Platform.CommandBars.IAction.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.Text">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.Text"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.ActionGroup">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.Text"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.All">
            <summary>
            Static instance for property change events covering all action properties.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.Available">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Available"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.Checked">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Checked"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.Enabled">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Enabled"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.Icon">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Icon"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.Shortcuts">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Shortcuts"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.Style">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Style"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.ToolTipText">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.ToolTipText"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.ShowText">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.ShowText"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.PopupControl">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.PopupControl"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.Size">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Size"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.FontColor">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.FontColor"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.BackgroundColor">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.BackgroundColor"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.Bold">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.Bold"/> property change events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.HoverBackgroundColor">
            <summary>
            Static instance for <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionProperties.HoverBackgroundColor"/> property change events.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.#ctor(Sdl.Desktop.Platform.CommandBars.ActionProperties)">
            <summary>
            Creates a new instance for the specified action properties.
            </summary>
            <param name="properties">The action properties that have changed.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.Properties">
            <summary>
            Gets the action properties that have changed.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ActionPropertyChangedEventArgs.ContainsProperty(Sdl.Desktop.Platform.CommandBars.ActionProperties)">
            <summary>
            Returns true when the specified property has been changed.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IAction">
            <summary>
            Represents a user action, which can be added to a command bar.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.IAction.PropertyChanged">
            <summary>
            Raised when the value of one of the action's properties changed.
            </summary>
            <remarks>For possible property values, see the constants defined in <see cref="T:Sdl.Desktop.Platform.CommandBars.ActionProperties"/>.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.Id">
            <summary>
            Returns the unique id for this action.
            </summary>
            <remarks>This id is unique across the Studio.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.Text">
            <summary>
            Returns the text for this action.
            </summary>
            <remarks>Can contain an ampersand to indicate the mnemonic character.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.ToolTipText">
            <summary>
            Returns the tooltip test for this action.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.Icon">
            <summary>
            Returns the icon for this action. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.Enabled">
            <summary>
            Returns whether this action is currently enabled.
            </summary>
            <remarks>If an action is not enabled, it is shown is greyed out on the command bar.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.Available">
            <summary>
            Returns whether this action is currently available.
            </summary>
            <remarks>If an action is not enabled, it is not shown on the command bar.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.Style">
            <summary>
            Returns the action style.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.FontColor">
            <summary>
             font color
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.BackgroundColor">
            <summary>
             background color
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.HoverBackgroundColor">
            <summary>
             Mouse hover background color
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.Bold">
            <summary>
             bold text
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.Checked">
            <summary>
            Gets or sets whether this action is checked. This property is only valid when the action style (<see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.Style"/>
            property is set to <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionStyle.ToggleButton"/>.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IAction.ActionGroup">
            <summary>
            Returns the action group this action is part of. This property is only valid when the action style (<see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.Style"/>
            property is set to <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionStyle.ToggleButton"/>.
            </summary>
            <remarks>
            <para>This property is ignored unless the <see cref="P:Sdl.Desktop.Platform.CommandBars.IAction.Style"/> property is set to <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionStyle.ToggleButton"/>.</para>
            <para>The action group should be a string that is unique across the studio. All ToggleButton style actions
            that share the same action group act as a group and are rendered as a rdaio button.</para>
            <para>When null, the action is shown on the command bar as a checkbox, otherwise it is shown as a radio button.</para>
            </remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IActionContext">
            <summary>
            Provides information about the context the action id valid in.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionContext.TargetCommandBarSiteType">
            <summary>
            Gets the context type, in the sense of a command bar site (Window, Controller, ViewPart, ViewPartCommandBarProvider)
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionContext.TargetCommandBarSiteId">
            <summary>
            Gets the id of the command bar site, in case the type is Controller, ViewPart, ViewPartCommandBarProvider.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IActionInfo">
            <summary>
            Represents an action that has been registered with the studio.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionInfo.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionInfo.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionInfo.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionInfo.CanChangeShortcuts">
            <summary>
            Gets or sets whether the keyboard shortcuts of this action can be customized.
            </summary>
            <value>
            	True if the keyboard shortcuts of this action can be customized.
            </value>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionInfo.Shortcuts">
            <summary>
            Gets or sets the keyboard shortcuts for this action.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the keyboard shortcuts of this action cannot be changed.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionInfo.Context">
            <summary>
            Gets information about the context the action id valid in.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionInfo.IsActionCreated">
            <summary>
            Returns true when an instance of this action has been created.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionInfo.Action">
            <summary>
            Gets the singleton instance of the action.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionInfo.Icon">
            <summary>
            Returns the icon for this action. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionInfo.VisibleToUsers">
            <summary>
            Return true if the action should be hidden for the user. False by default. 
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionInfo.ResetShortcuts">
            <summary>
            Resets the shortcuts for the action and associated settings to the defaults
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IActionService">
            <summary>
            Window-level service that provides functionality for working with the actions that have been regsitered in the studio.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.IActionService.ShortcutsChanged">
            <summary>
            Raised when the shortuts for an action change.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionService.Actions">
            <summary>
            Gets a collection of all registered actions.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.RegisterDynamicAction(Sdl.Desktop.Platform.CommandBars.IDynamicAction)">
            <summary>
            Registers a dynamic action.
            </summary>
            <remarks>This adds the action to the action list and will allow customizing its keyboard shortcuts.</remarks>
            <param name="action"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.UnregisterDynamicAction(System.String)">
            <summary>
            Unregisters a dynamic action.
            </summary>
            <remarks>This will remove the action from the action list.</remarks>
            <param name="id"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.GetPrimaryShortcut(System.String)">
            <summary>
            Gets the primary keybaord shortcut for the action with the specified id.
            The primary keyboard shortcut is shown on  menu items or as a tooltip for toolbar buttons.
            </summary>
            <param name="id">The id of the action.</param>
            <returns>The primary keyboard shortcut.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.GetAction(System.String)">
            <summary>
            Gets the instance of the action with the specified id.
            </summary>
            <remarks>This will instantiate the action in case this has not happened yet.</remarks>
            <param name="id">The id of the action.</param>
            <returns>The action; or null if the action does not exist.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.GetRetargetableAction(System.String)">
            <summary>
            Gets the retargetable action with the specified id.
            </summary>
            <remarks>This will instantiate the action in case this has not happened yet.</remarks>
            <param name="id">The id of the retargetable action.</param>
            <returns>The retargetable action; or if the action does not exist.</returns>
            <exception cref="T:Sdl.Desktop.Platform.StudioException">Thrown if the action exists, but if it is not a retargetable action.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.GetActionWithPopup(System.String)">
            <summary>
            Gets the retargetable action with the specified id.
            </summary>
            <remarks>This will instantiate the action in case this has not happened yet.</remarks>
            <param name="id">The id of the retargetable action.</param>
            <returns>The retargetable action; or if the action does not exist.</returns>
            <exception cref="T:Sdl.Desktop.Platform.StudioException">Thrown if the action exists, but if it is not a retargetable action.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.GetActionForShortcut(System.Windows.Forms.Keys)">
            <summary>
            Gets the action that is currently associated with the specified keyboard shortcut.
            </summary>
            <remarks>This takes into account custom keybaord shortcuts and the current user profile.</remarks>
            <param name="shortcut">The keyboard shortcut.</param>
            <returns>the action that is mapped to the keyboard shortcut; or null if no mapping exists.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.ExecuteActionForShortcut(System.Windows.Forms.Keys)">
            <summary>
            Executes the action, if any, that is currently associated with the specified keyboard shortcut.
            </summary>
            <remarks>This uses GetActionForShortcut to obtain the action.</remarks>
            <param name="shortcut">The keyboard shortcut.</param>
            <returns>true if an action was found and executed, otherwise false .</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.IsShortcutEnabled(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the given shortcut is enabled.
            </summary>
            <param name="shortcut">shortcut</param>
            <returns>whether shortcut is enabled</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.SetShortcutEnabled(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Sets whether the given shortcut is enabled.
            </summary>
            <param name="shortcut">shortcut</param>
            <param name="enabled">enabled</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.ExecuteAction(System.String)">
            <summary>
            Executes the action.
            </summary>
            <param name="actionId">The action id.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.ExecuteAction(Sdl.Desktop.Platform.CommandBars.IAction)">
            <summary>
            Executes the action.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.ExecuteAction(Sdl.Desktop.Platform.CommandBars.IAction,Sdl.Desktop.Platform.CommandBars.ActionOrigin)">
            <summary>
            Executes the action.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="origin">The origin of the action.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionService.ExecuteAction(Sdl.Desktop.Platform.CommandBars.IAction,Sdl.Desktop.Platform.CommandBars.ActionOrigin,System.Boolean)">
            <summary>
            Executes the action.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="origin">The origin of the action.</param>
            <param name="allowToggle">For actions with style <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionStyle.ToggleButton"/>, 
            setting this to <c>true</c> will cause the button to be toggled when the action is executed.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IActionWithPopup">
            <summary>
            Represents a user action with a pop-up control, which can be added to a command bar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IActionWithPopup.PopupControl">
            <summary>
            Gets the control to be displayed when the user clicks the side-arrow of the button.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionWithPopup.OnShowingPopup">
            <summary>
            Called before the popup control is shown.
            This is useful if the control needs to be updated before it is shown.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IActionWithPopup.OnPopupClosed">
            <summary>
             Called after the popup control is closed.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ICommandBar">
            <summary>
            Base interface representing a command bar in the studio. 
            </summary>
            <remarks>
            This interface defines common functionality for any type of command bar:
            <list>
            <item>Menu, represented by the <see cref="T:Sdl.Desktop.Platform.CommandBars.IMenu"/> interface.</item>
            <item>Toolbar, represented by the <see cref="T:Sdl.Desktop.Platform.CommandBars.IToolBar"/> interface.</item>
            <item>Statusbar, represented by the <see cref="T:Sdl.Desktop.Platform.CommandBars.IStatusBar"/> interface.</item>
            <item>Context menu, represented by the <see cref="T:Sdl.Desktop.Platform.CommandBars.IContextMenu"/> interface.</item> 
            </list>
            Instances of command bars can be accessed through the <see cref="T:Sdl.Desktop.Platform.CommandBars.ICommandBars"/> interface.
            </remarks>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.IMenu"/>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.IToolBar"/>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.IStatusBar"/>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.IContextMenu"/>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.ICommandBar.BeforeItemAdded">
            <summary>
            Raised before an item is added to this command bar.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.ICommandBar.ItemAdded">
            <summary>
            Raised when an item is added to this command bar.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.ICommandBar.BeforeItemRemoved">
            <summary>
            Raised before an item is removed from this command bar.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.ICommandBar.ItemRemoved">
            <summary>
            Raised when an item is removed from this command bar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBar.Id">
            <summary>
            Return the unique id of this command bar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBar.Name">
            <summary>
            Gets or sets the name of this command bar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBar.Description">
            <summary>
            Gets or sets the description of this command bar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBar.Window">
            <summary>
            Gets the window within which these command bars reside.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.FindByPath(System.String)">
            <summary>
            Returns the command bar item at the specified path.
            </summary>
            <remarks>The item path needs to be of the following format: [parentCommandBarId/]*itemId, where the parentCommandBarId's are the ids of 
            child command bars of this command bar of which the item is a member.</remarks>
            <param name="itemPath">The path of the command bar item to return.</param>
            <returns>The comamnd bar item at the specified path, or null if this does not exist.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when itemPath is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when itemPath is invalid.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.FindCommandBarByPath(System.String)">
            <summary>
            Returns the child command bar at the specified path.
            </summary>
            <remarks>The item path needs to be of the following format: [parentCommandBarId/]*commandBarId.</remarks>
            <param name="commandBarPath">The path of the child command bar to return.</param>
            <returns>The comamnd bar item at the specified path, or null if this does not exist or if it is not a command bar.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when commandBarPath is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when commandBarPath is invalid.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.FindMenuByPath(System.String)">
            <summary>
            Returns the child menu at the specified path.
            </summary>
            <remarks>The item path needs to be of the following format: [parentCommandBarId/]*menuId.</remarks>
            <param name="menuPath">The path of the child command bar to return.</param>
            <returns>The comamnd bar item at the specified path, or null if this does not exist or if it is not a menu.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when menuPath is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when menuPath is invalid.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.FindRibbonTabByPath(System.String)">
            <summary>
            Returns the ribbon tab at the specified path.
            </summary>
            <remarks>The item path needs to be of the following format: [parentCommandBarId/]*tabId.</remarks>
            <param name="path">The path of the child command bar to return.</param>
            <returns>The command bar item at the specified path, or null if this does not exist or if it is not a ribbon tab.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when path is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when path is invalid.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.FindRibbonGroupByPath(System.String)">
            <summary>
            Returns the ribbon group at the specified path.
            </summary>
            <remarks>The item path needs to be of the following format: [parentCommandBarId/]*.groupId</remarks>
            <param name="path">The path of the child command bar to return.</param>
            <returns>The command bar item at the specified path, or null if this does not exist or if it is not a ribbon group.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when path is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when path is invalid.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBar.Item(System.String)">
            <summary>
            Returns the command bar item with the specified id.
            </summary>
            <param name="itemId">The id of the command bar item to return.</param>
            <returns>The command bar item with the specified id, or null if there is no such item..</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when itemId is null or empty.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBar.Items">
            <summary>
            Read-only collection of command bar items that are part of this command bar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBar.UpdateRequired">
            <summary>
            Returns true when the underlying native command bar needs updating. 
            When true, the native command bar can be updated using <see cref="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.UpdateCommandBar(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.MarkUpdateRequired">
            <summary>
            Marks that this command bar needs updating.
            </summary>
            <remarks>This method is meant for internal use only.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.Add(System.String)">
            <summary>
            Adds an action to this command bar.
            </summary>
            <remarks>To create a new action, create a class that inherits from the <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractAction"/> class.</remarks>
            <param name="actionId">The id of the action to add to this command bar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when action is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.InsertBefore(System.String,System.String)">
            <summary>
            Inserts an action before the item with the speicfied id.
            </summary>
            <remarks>To create a new action, create a class that inherits from the <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractAction"/> class.</remarks>
            <param name="itemId">The id of the item before which to insert the action.</param>
            <param name="actionId">The id of the action to insert.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when itemId or action is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the specified item does not exist.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.InsertAfter(System.String,System.String)">
            <summary>
            Inserts an action after the item with the speicfied id.
            </summary>
            <remarks>To create a new action, create a class that inherits from the <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractAction"/> class.</remarks>
            <param name="itemId">The id of the item after which to insert the action.</param>
            <param name="actionId">The id of the action to insert.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when itemId or action is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the specified item does not exist.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.Insert(System.Int32,System.String)">
            <summary>
            Inserts an action at the specified index.
            </summary>
            <remarks>To create a new action, create a class that inherits from the <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractAction"/> class.</remarks>
            <param name="index">The index at which to insert the action. This should be between 0 and the number of items in this command bar.</param>
            <param name="actionId">The id of the action to insert.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when action is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specified index is out of range.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.Add(Sdl.Desktop.Platform.CommandBars.IDynamicAction)">
            <summary>
            Adds an action to this command bar.
            </summary>
            <remarks>To create a new action, create a class that inherits from the <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractAction"/> class.</remarks>
            <param name="action">The action to add to this command bar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when action is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.InsertBefore(System.String,Sdl.Desktop.Platform.CommandBars.IDynamicAction)">
            <summary>
            Inserts an action before the item with the speicfied id.
            </summary>
            <remarks>To create a new action, create a class that inherits from the <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractAction"/> class.</remarks>
            <param name="itemId">The id of the item before which to insert the action.</param>
            <param name="action">The action to insert.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when itemId or action is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the specified item does not exist.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.InsertAfter(System.String,Sdl.Desktop.Platform.CommandBars.IDynamicAction)">
            <summary>
            Inserts an action after the item with the speicfied id.
            </summary>
            <remarks>To create a new action, create a class that inherits from the <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractAction"/> class.</remarks>
            <param name="itemId">The id of the item after which to insert the action.</param>
            <param name="action">The action to insert.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when itemId or action is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the specified item does not exist.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.Insert(System.Int32,Sdl.Desktop.Platform.CommandBars.IDynamicAction)">
            <summary>
            Inserts an action at the specified index.
            </summary>
            <remarks>To create a new action, create a class that inherits from the <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractAction"/> class.</remarks>
            <param name="index">The index at which to insert the action. This should be between 0 and the number of items in this command bar.</param>
            <param name="action">The action to insert.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when action is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specified index is out of range.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.Add(Sdl.Desktop.Platform.CommandBars.ICommandBarItem)">
            <summary>
            Adds the specified item to this command bar.
            </summary>
            <param name="item">The item to add. This should be created using one of the factory methods implemented by this command bar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when item is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the item is already part of a command bar.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.InsertBefore(System.String,Sdl.Desktop.Platform.CommandBars.ICommandBarItem)">
            <summary>
            Inserts a command bar item before the item with the specified id.
            </summary>
            <param name="itemId">The id of the item before which to insert the action.</param>
            <param name="item">The item to insert. This should be created using one of the factory methods implemented by this command bar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when itemId or item is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the item with id itemId does not exist.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the item is already part of a command bar.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.InsertAfter(System.String,Sdl.Desktop.Platform.CommandBars.ICommandBarItem)">
            <summary>
            Inserts a command bar item after the item with the specified id.
            </summary>
            <param name="itemId">The id of the item after which to insert the action.</param>
            <param name="item">The item to insert. This should be created using one of the factory methods implemented by this command bar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when itemId or item is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the item with id itemId does not exist.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the item is already part of a command bar.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.Insert(System.Int32,Sdl.Desktop.Platform.CommandBars.ICommandBarItem)">
            <summary>
            Inserts a command bar item at the specified index.
            </summary>
            <param name="index">The index at which to insert the command bar item. This should be between 0 and the number of items in this command bar.</param>
            <param name="item">The item to insert. This should be created using one of the factory methods implemented by this command bar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when item is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specified index is out of range.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the item is already part of a command bar.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.AddRange(Sdl.Desktop.Platform.CommandBars.ICommandBarItem[])">
            <summary>
            Adds the specified items to this command bar.
            </summary>
            <param name="items">The items to add. These should be created using the factory methods implemented by this command bar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when items is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when one of the items is already part of a command bar.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.InsertRangeBefore(System.String,Sdl.Desktop.Platform.CommandBars.ICommandBarItem[])">
            <summary>
            Inserts a range of command bar items before the item with the specified id.
            </summary>
            <param name="itemId">The id of the item before which to insert the action.</param>
            <param name="items">The items to insert. These should be created using the factory methods implemented by this command bar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when itemId or items is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the item with id itemId does not exist.</exception>
            <exception cref="T:System.ArgumentException">Thrown when one of the items is already part of a command bar.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.InsertRangeAfter(System.String,Sdl.Desktop.Platform.CommandBars.ICommandBarItem[])">
            <summary>
            Inserts a range of command bar items after the item with the specified id.
            </summary>
            <param name="itemId">The id of the item after which to insert the action.</param>
            <param name="items">The items to insert. These should be created using the factory methods implemented by this command bar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when itemId or items is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the item with id itemId does not exist.</exception>
            <exception cref="T:System.ArgumentException">Thrown when of the the items is already part of a command bar.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.InsertRange(System.Int32,Sdl.Desktop.Platform.CommandBars.ICommandBarItem[])">
            <summary>
            Inserts a range of command bar items at the specified index.
            </summary>
            <param name="index">The index at which to insert the command bar items. This should be between 0 and the number of items in this command bar.</param>
            <param name="items">The items to insert. These should be created using the factory methods implemented by this command bar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when item is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the specified index is out of range.</exception>
            <exception cref="T:System.ArgumentException">Thrown when one of the items is already part of a command bar.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.Remove(System.String)">
            <summary>
            Removes the item with the specified id from this command bar.
            </summary>
            <param name="itemId">The id of the item to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when itemId is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when no item with id itemId exists.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.Remove(Sdl.Desktop.Platform.CommandBars.ICommandBarItem)">
            <summary>
            Removes the specified item from this command bar.
            </summary>
            <param name="item">The item to remove from this command bar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when item is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the specified item is not part of this command bar.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.RemoveAt(System.Int32)">
            <summary>
            Removes the command bar item at the specified index.
            </summary>
            <param name="index">The index of the command bar item to remove.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.Clear">
            <summary>
            Removes all command bar items from this command bar.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.UpdateCommandBar(System.Boolean)">
            <summary>
            Updates the underlying native command bar.
            </summary>
            <param name="force">True to force the underlying to be update, even if this is not absolutely necessary.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarAction(System.String)">
            <summary>
            Creates a new command bar action.
            </summary>
            <param name="actionId">The id of the action.</param>
            <returns>The newly created command bar action.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarDynamicActionMenu(System.String,System.String[])">
            <summary>
            Creates a new command bar action menu.
            </summary>
            <param name="actionMenuId">A unique id for the command bar action menu.</param>
            <param name="actionIds">Array of ids of actions to add to the menu.</param>
            <returns>The newly created command bar action menu.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarActionWithPopup(System.String)">
            <summary>
            Creates a new command bar action with an associated popup.
            </summary>
            <param name="actionId">The id of the action.</param>
            <returns>The newly created command bar action.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarAction(Sdl.Desktop.Platform.CommandBars.IDynamicAction)">
            <summary>
            Creates a new command bar action.
            </summary>
            <param name="action">The action.</param>
            <returns>The newly created command bar action.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarActionWithPopup(Sdl.Desktop.Platform.CommandBars.IDynamicActionWithPopup)">
            <summary>
            Creates a new command bar action with an associated popup.
            </summary>
            <param name="action">The action.</param>
            <returns>The newly created command bar action.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarControl(System.String,System.String,System.Windows.Forms.Control)">
            <summary>
            Creates a command bar control that can be added to this command bar, containing the specified control.
            </summary>
            <remarks>A command bar control offers a way to add any kind of control to a command bar.</remarks>
            <param name="id">a unique id for the command bar control.</param>
            <param name="name">Display name to represent the comamnd bar control.</param>
            <param name="control">The control to </param>
            <returns>The newly created command bar control.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarLabel(System.String)">
            <summary>
            Creates a new command bar label that can be added to this command bar.
            </summary>
            <param name="id">A unique id for the command bar label.</param>
            <returns>The newly created command bar label.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarSeparator(System.String)">
            <summary>
            Creates a new command bar separator.
            </summary>
            <param name="id">A unique id for the command bar separator.</param>
            <returns>The newly created command bar separator.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateMenu(System.String,System.String)">
            <summary>
            Creates a new menu that can be added to this command bar.
            </summary>
            <param name="id">A unique id for the command bar label.</param>
            <param name="text">The text for the new menu.</param>
            <returns>The newly created menu.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ICommandBarAction">
            <summary>
            Represents an instance of an action on a specific command bar.
            </summary>
            <remarks>When adding an action to a command bar using <see cref="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.Add(System.String)"/> or one of the overloads, 
            this results in an command bar action item being added to the command bar, 
            which represents the instance of the action on that specific command bar.</remarks>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.IAction"/>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.ICommandBarAction.Executed">
            <summary>
            Raised after this action is executed.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarAction.Action">
            <summary>
            Returns the action related to this command bar action.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarAction.ShowText">
            <summary>
            Gets or sets whether to show the text of this action when it is added to a toolbar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarAction.Text">
            <summary>
            Gets or sets the action text. By default this returns the text of the action itself, but it allows overriding
            the text of a specific action, for instance on a toolbar only.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarAction.ShowIcon">
            <summary>
            Gets or sets whether to show the icon of this action when it is added to a toolbar.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBarAction.Execute">
            <summary>
            Executes the command bar action.
            </summary>
            <remarks>Use this method to programmtically execute an action, instead of directly calling the action's <see cref="M:Sdl.Desktop.Platform.CommandBars.IStaticAction.Execute"/> method.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBarAction.Update(Sdl.Desktop.Platform.CommandBars.ActionProperties)">
            <summary>
            Updates the comand bar properties with the action properties
            </summary>
            <param name="properties">Properties to update</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ICommandBarActionMenu">
            <summary>
            Represents a menu with command bar actions. There must be an main action that will be shown as a push button
            while the other actions are shown in a dropdown menu, which is accessible through an arrow button new to the current action button.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ICommandBarActionWithPopup">
            <summary>
            Represents a command bar action with an associated popup control.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.ICommandBarActionWithPopup.ShowingPopup">
            <summary>
            Raised before the popup control is shown
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.ICommandBarActionWithPopup.PopupClosed">
            <summary>
            Raised when the popup is closed.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarActionWithPopup.Action">
            <summary>
            Gets the action with pop-up.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBarActionWithPopup.ShowPopup">
            <summary>
            Shows the popup.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBarActionWithPopup.ClosePopup">
            <summary>
            Closes the popup.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ICommandBarControl">
            <summary>
            Represents a command bar item that hosts a Windows Forms control.
            </summary>
            <remarks>To create an instance of a command bar control, use the factory method <see cref="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarControl(System.String,System.String,System.Windows.Forms.Control)"/>
            of the command bar on which you want to add this item.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarControl.Name">
            <summary>
            Gets or sets the display name of the command bar control.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarControl.AutoSize">
            <summary>
            Gets or sets whether this item needs to automatically resize to reflect the size of the hosted control.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarControl.Width">
            <summary>
            Gets or sets the width of this item. This property is ignored when <see cref="P:Sdl.Desktop.Platform.CommandBars.ICommandBarControl.AutoSize"/> is set to true.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarControl.Spring">
            <summary>
            Gets or sets whether this command bar control spans the entire width available.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ICommandBarDynamicActionMenu">
            <summary>
            Represents a menu with command bar actions of which one action is the current action. The current action is shown as
            a push button, while the other actions are shown in a dropdown menu, which is accessible through an arrow button new to
            the current action button.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.ICommandBarDynamicActionMenu.CurrentActionChanged">
            <summary>
            Raised when the <see cref="P:Sdl.Desktop.Platform.CommandBars.ICommandBarDynamicActionMenu.CurrentAction"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarDynamicActionMenu.CurrentAction">
            <summary>
            Gets or sets the current action.
            </summary>
            <remarks>Whenever the user executes an action, it will automatically become the current action.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarDynamicActionMenu.Actions">
            <summary>
            Gets the collection of command bar actions that are part of this command bar action menu.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarDynamicActionMenu.ShowText">
            <summary>
            Gets or sets whether to show the text or the icon only when it is added to a toolbar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarDynamicActionMenu.AllowCurrentActionChange">
            <summary>
            Gets or sets whether the current action is changed when the user executes an action from the menu
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarDynamicActionMenu.Style">
            <summary>
            Gets or sets the style.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarDynamicActionMenu.Checked">
            <summary>
            Gets or sets whether this command bar dynamic action menu is checked.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarDynamicActionMenu.AllowToggle">
            <summary>
            Gets or sets whether this command bar dynamic action menu allows toggle.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ICommandBarItem">
            <summary>
            Base interface for all command bar items. A command bar item is an element that can be part of a command bar, for instance
            a button on a toolbar.
            </summary>
            <remarks>
            A command bar item is always part of one specific command bar and cannot be shared among command bars.
            Instances of command bar items must always be created through one of the factory methods of the command bar to which
            they will be added (<see cref="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarControl(System.String,System.String,System.Windows.Forms.Control)"/>, <see cref="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarLabel(System.String)"/>, <see cref="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarSeparator(System.String)"/> or <see cref="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateMenu(System.String,System.String)"/>).
            </remarks>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.ICommandBar"/>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarItem.Id">
            <summary>
            Unique id of this command bar item.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarItem.Enabled">
            <summary>
            Gets or sets whether this command bar item is enabled.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarItem.Visible">
            <summary>
            Gets or sets whether this command bar item is visible.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarItem.Parent">
            <summary>
            Returns the command bar to which this item belongs. Can be null. 
            </summary>
            <remarks>Users should never set this property. It is for internal use only.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBarItem.Create(Sdl.Desktop.Platform.CommandBars.INativeCommandBarItemCollection,System.Int32)">
            <summary>
            Realizes the native presentation of this command bar item in the given native command bar item collection.
            </summary>
            <param name="nativeCommandBarItemCollection">The collection in which this command bar item should be created.</param>
            <param name="index">The index at which to insert the native representation of this command bar item in the collection.</param>
            <remarks>This method should never be called from user code. It is being called by the framework when appropriate.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBarItem.Dispose">
            <summary>
            Disposes the native representation of this item. 
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.CommandBarLabelSizingMode">
            <summary>
            Enumeration representing the possible sizing modes of a command bar label,
            </summary>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel"/>
            <seealso cref="P:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel.SizingMode"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.CommandBarLabelSizingMode.AutoSize">
            <summary>
            The label automatically resizes to fit the label text.
            </summary>
            <seealso cref="P:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel.Text"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.CommandBarLabelSizingMode.Fixed">
            <summary>
            The label has a fixed width, as specified by the <see cref="P:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel.Width"/> property.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.CommandBarLabelSizingMode.Stretch">
            <summary>
            The label stretches horizontally to fill up any space left on the parent command bar.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel">
            <summary>
            Represents a label on a command bar.
            </summary>
            <remarks>To create an instance of a command bar label, use the factory method <see cref="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarLabel(System.String)"/>
            of the command bar on which you want to add this item.</remarks>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel.Click">
            <summary>
            Raised when the label is clicked
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel.DoubleClick">
            <summary>
            Raised when the label is double-clicked.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel.Text">
            <summary>
            Gets or sets the text of the label.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel.ToolTipText">
            <summary>
            Gets or sets the tooltip text of the label.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel.Icon">
            <summary>
            Gets or sets the icon of the label.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel.SizingMode">
            <summary>
            Gets or sets the sizing mode of the label.
            </summary>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.CommandBarLabelSizingMode"/>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel.Width">
            <summary>
            Gets or sets the width of the label. Setting this property only has an effect when the <see cref="P:Sdl.Desktop.Platform.CommandBars.ICommandBarLabel.SizingMode"/> property
            is set to <see cref="F:Sdl.Desktop.Platform.CommandBars.CommandBarLabelSizingMode.Fixed"/>.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ICommandBarMenu">
            <summary>
            Represents a menu with command bar actions. There must be an main action that will be shown as a push button
            while the other actions are shown in a dropdown menu, which is accessible through an arrow button new to the current action button.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ICommandBars">
            <summary>
            This class encapsulates all available command bars.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBars.Menu">
            <summary>
            Returns the main menu bar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBars.Ribbon">
            <summary>
            Gets the application Ribbon
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBars.RibbonApplicationMenu">
            <summary>
            Returns the Ribbon application menu
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBars.RibbonQuickAccessToolbar">
            <summary>
            Returns the Ribbon Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBars.RibbonRightSideTabItemsToolbar">
            <summary>
            Returns the Ribbon toolbar that contains the items from the top right corner
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBars.StatusBar">
            <summary>
            Returns the status bar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBars.ToolBars">
            <summary>
            Returns the toolbar manager.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ICommandBars.ServiceContext">
            <summary>
            Returns the service context associated with this set of command bars.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBars.CreateContextMenu(System.String,System.Windows.Forms.Control)">
            <summary>
            Creates a new contex menu with given id, associated with the specified control.
            </summary>
            <param name="id">The globally uniqe id for the new context menu.</param>
            <param name="sourceControl">The control with which this context menu is available.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBars.CreateContextMenu(System.String)">
            <summary>
            Creates a new contex menu with given id.
            </summary>
            <remarks>Since the context menu is not associated with a control, the context menu must be shown programmatically using the <see cref="M:Sdl.Desktop.Platform.CommandBars.IContextMenu.Show"/> method.</remarks>
            <param name="id">The globally uniqe id for the new context menu.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBars.GetContextMenu(System.String)">
            <summary>
            Gets the context menu with the given id.
            </summary>
            <param name="id">The id of the context menu to retrieve.</param>
            <returns>The context menu, or null if it does not exist.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBars.CreateSubCommandBars(Sdl.Desktop.Platform.Services.IServiceContext)">
            <summary>
            Creates a set a sub command bars, which define a new scope though which new items can be added
            to the command bars belonging to this <see cref="T:Sdl.Desktop.Platform.CommandBars.ICommandBars"/> instance. The visibility of all the items 
            added to one of the sub command bars can be controlled through the <see cref="P:Sdl.Desktop.Platform.CommandBars.ISubCommandBars.VisibleInParent"/> property.
            </summary>
            <param name="serviceContext">The service context with which to associate the sub command bars. This is typically a child service context of this instance's service context.</param>
            <returns>The new set of sub command bars.</returns>
            <remarks>This method should normally not be called from user code.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ICommandBars.Update(System.Boolean)">
            <summary>
            Updates all the command bars at once.
            </summary>
            <param name="force">True to update the command bars even if <see cref="P:Sdl.Desktop.Platform.CommandBars.ICommandBar.UpdateRequired"/> is false.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ICommandBarSeparator">
            <summary>
            Represents a command bar separator.
            </summary>
            <remarks>To create an instance of a command bar separator, use the factory method <see cref="M:Sdl.Desktop.Platform.CommandBars.ICommandBar.CreateCommandBarSeparator(System.String)"/>
            of the command bar on which you want to add this item.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IContextMenu">
            <summary>
            Represents a context menu.
            </summary>
            <remarks>To create a new context menu, use the <see cref="M:Sdl.Desktop.Platform.CommandBars.ICommandBars.CreateContextMenu(System.String)"/> factory method on the <see cref="T:Sdl.Desktop.Platform.CommandBars.ICommandBars"/> instance
            available in your component's context.</remarks>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.IContextMenu.Showing">
            <summary>
            Raised before the context menu is shown.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IContextMenu.SourceControl">
            <summary>
            Gets or sets the control with which this context menu is associated.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IContextMenu.ServiceContext">
            <summary>
            Returns the service context to which this context menu has access.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IContextMenu.ConditionInitializer">
            <summary>
            Returns a condition initialzier that can be used to initialize condition related to items on this context menu.
            </summary>
            <remarks>This condition initializer is used by the framework to initialize plug-in action conditions and should not be used
            in user code.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IContextMenu.Show">
            <summary>
            Shows this context menu at the current mouse position.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IContextMenu.Show(System.Drawing.Point)">
            <summary>
            Shows this context menu at the specified screen coordinate.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IDynamicAction">
            <summary>
            Interface for dynamic actions. A dynamic action is an action that is dynamically created in user
            code and added to a command bar programmatically. 
            </summary>
            <remarks>To implement a dynamic action, either implement <see cref="T:Sdl.Desktop.Platform.CommandBars.IDynamicAction"/> directly or extend <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractDynamicAction"/>. 
            In order to register a dynamic action with the environment
            so it becomes available for keyboard shortcut customization etc., mark your dynamic action implementation with a <see cref="T:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute"/>.
            Other types of actions include static action (<see cref="T:Sdl.Desktop.Platform.CommandBars.IStaticAction"/> and <see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/>) and standard actions 
            (<see cref="T:Sdl.Desktop.Platform.CommandBars.IAction"/> and <see cref="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute"/>).</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IDynamicActionWithPopup">
            <summary>
            Represents a dynamic user action with a pop-up control, which can be added to a command bar.
            </summary>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.IDynamicAction"/>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IMenu">
            <summary>
            Represents a main or sub menu in the Studio.
            </summary>
            <remarks>Instances of main menus can be accessed through the <see cref="T:Sdl.Desktop.Platform.CommandBars.ICommandBars"/> interface.</remarks>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.IMenu.Showing">
            <summary>
            Raised before the menu is shown. Use this event to change the menu's content as it is opening.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IMenu.Text">
            <summary>
            Gets or sets the text for this menu. This can include an ampersand to indicate the mnemonic character.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.INativeCommandBarItemCollection">
            <summary>
            Collection of native command bar item objects.
            </summary>
            <remarks>This class is intended for internal use only.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.INativeCommandBarItemCollection.NativeCommandBar">
            <summary>
            Returns the native command bar with which this collection is associated.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IPopupControl">
            <summary>
            The interface for a popup control which can be used in IActionWithPopup
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IPopupControl.Control">
            <summary>
            The actual control to pop up
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.IPopupControl.RequestClosePopup">
            <summary>
            Fired when the user has somehow confirmed their actions on the control, e.g. by clicking 
            an "OK" button. When this event is fired, the popup control is closed.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IRetargetableAction">
            <summary>
            Interface for creating retargetable actions. A retargetable action is an action which has different effects depending
            on the context it is executed in, even though these effects are semantically similar. An example of such an action is "Copy": depending on which part 
            of the UI is active, different content will be copied to the clipboard. 
            </summary>
            <remarks><para>For creating a new retargetable action, use <see cref="T:Sdl.Desktop.Platform.CommandBars.RetargetableAction"/> as a base class. A retargetable action can be regsitered in the studio using the
            <see cref="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute"/> or the <see cref="T:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute"/> extension attributes.</para>
            <para>Users can change the semantics of a retargetable action ("retarget the action") by settings its handler (see <see cref="P:Sdl.Desktop.Platform.CommandBars.RetargetableAction.Handler"/>). A retargetable action can also have a default handler, which is active whenever
            no specific handler is set.</para></remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IRetargetableAction.Handler">
            <summary>
            Gets or sets the handler that is used to handle execute action and to control its enabled state.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IRetargetableAction.DefaultHandler">
            <summary>
            Gets or sets the handler that gets used when no specific handler is assigned to <see cref="P:Sdl.Desktop.Platform.CommandBars.IRetargetableAction.Handler"/>.
            </summary>
            <remarks>Can be null.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IRetargetableAction.VisibleWithoutHandler">
            <summary>
            Gets or sets whether the action should be visible, even when no handler or default handler is set. Default is <code>false</code>.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IRetargetableActionHandler">
            <summary>
            Represents a handler for a retargetable action. A retargetable action handler defines the behaviour and enabled state of a retargetable
            action a long as it is this action's current handler.
            </summary>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.IRetargetableAction"/>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.IRetargetableActionHandler.EnabledChanged">
            <summary>
            Raised when the state of the action changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IRetargetableActionHandler.Enabled">
            <summary>
            Gets whether this action is enabled.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IRetargetableActionHandler.Execute">
            <summary>
            Called when the user activates the action.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IRetargetableActionHandlerWithPopup">
            <summary>
            Represents a handler for a retargetable action with a pop-up control. A retargetable action handler defines the behaviour, the enabled state 
            and the pop-up control of a retargetable action with pop-upa long as it is this action's current handler.
            </summary>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.IRetargetableActionWithPopup"/>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IRetargetableActionHandlerWithPopup.PopupControl">
            <summary>
            Gets the control to be displayed when the user clicks the side-arrow of the button.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IRetargetableActionHandlerWithPopup.OnShowingPopup">
            <summary>
            Called before the popup control is shown.
            This is useful if the control needs to be updated before it is shown.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IRetargetableActionHandlerWithPopup.OnPopupClosed">
            <summary>
             Called after the popup control is closed.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IRetargetableActionWithPopup">
            <summary>
            Interface for creating retargetable actions with a pop-up control. A retargetable action is an action which has different effects depending
            on the context it is executed in, even though these effects are semantically similar. An example of such an action is "Copy": depending on which part 
            of the UI is active, different content will be copied to the clipboard. The pop-up control is also diffent depending on the context.
            </summary>
            <remarks><para>For creating a new retargetable action with a pop-up, use <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractRetargetableActionWithPopup"/> as a base class. A retargetable action can be registered in the studio using the
            <see cref="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute"/> or the <see cref="T:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute"/> extension attributes.</para>
            <para>Users can change the semantics of a retargetable action ("retarget the action") by settings its handler (see <see cref="P:Sdl.Desktop.Platform.CommandBars.IRetargetableActionWithPopup.Handler"/>). A retargetable action can also have a default handler, which is active whenever
            no specific handler is set.</para></remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IRetargetableActionWithPopup.Handler">
            <summary>
            Gets or sets the handler that is used to handle execute action, to control its enabled state and to provide the pop-up control.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IRetargetableActionWithPopup.DefaultHandler">
            <summary>
            Gets or sets the handler that gets used when no specific handler is assigned to <see cref="P:Sdl.Desktop.Platform.CommandBars.IRetargetableActionWithPopup.Handler"/>.
            </summary>
            <remarks>Can be null.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IRibbonApplicationMenu">
            <summary>
            Represents the main ribbon application menu in Studio
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.IRibbonApplicationMenu.Showing">
            <summary>
            Raised before the menu is shown. Use this event to change the menu's content as it is opening.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IRibbonGroup.Text">
            <summary>
            Gets or sets the text for this menu. This can include an ampersand to indicate the mnemonic character.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IRibbonGroup.LayoutDirection">
            <summary>
            Gets or sets the how the tools within the group are arranged
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IRibbonGroup.LayoutAlignment">
            <summary>
            Gets or sets how the items are aligned with respect to group
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IRibbonTab.Text">
            <summary>
            Gets or sets the text for this menu. This can include an ampersand to indicate the mnemonic character.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IRibbonTab.KeyTip">
            <summary>
            Gets or sets the key tip (hotkey) for this menu.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IStaticAction">
            <summary>
            Interface for static actions. A static action is an action for which all its properties are defined using the <see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/> extension
            attribute.
            </summary>
            <remarks>In order to create a static action, implement this interface, or extend <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractStaticAction"/>. Then, mark your implementation with the <see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/>.
            See the description of <see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/> for a list of supported auxiliary attributes for defining on which command
            bars the action appears and which keyboard shortcuts the action has.
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IStaticAction.Init(Sdl.Desktop.Platform.IStudioWindow)">
            <summary>
            Called right after the action has been created.
            </summary>
            <param name="window">The studio window this action instance is part of.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IStaticAction.Execute">
            <summary>
            Called when the user activates this action.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IStatusBar">
            <summary>
            Represents a status bar in the Studio.
            </summary>
            <remarks>The status bar can be accessed through the <see cref="T:Sdl.Desktop.Platform.CommandBars.ICommandBars"/> interface.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IStatusBar.CreateProgressBar(System.String,System.String)">
            <summary>
            Creates a new progress bar that can be added to this status bar.
            </summary>
            <param name="id">A unique id for this progress bar.</param>
            <param name="name">The dispaly name of the progress bar.</param>
            <returns>The newly created progress bar.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IStatusProgressBar">
            <summary>
            Represents a progress bar on a status bar bar.
            </summary>
            <remarks>To create an instance of a status progress bar, use the factory method <see cref="M:Sdl.Desktop.Platform.CommandBars.IStatusBar.CreateProgressBar(System.String,System.String)"/>
            of the status bar on which you want to add this item.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IStatusProgressBar.Width">
            <summary>
            Gets or sets the width of this progress bar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IStatusProgressBar.Value">
            <summary>
            Gets or sets the value of this progress bar. This should be between 0 and <see cref="P:Sdl.Desktop.Platform.CommandBars.IStatusProgressBar.MaximumValue"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when trying to set this property to a value higher than <see cref="P:Sdl.Desktop.Platform.CommandBars.IStatusProgressBar.MaximumValue"/> or a value less than 0.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IStatusProgressBar.MaximumValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <remarks>When settings this value to a value lower than the current value, 
            the current value will be set equal to newly set maximum value. The maximumvalue value must be higher than 0.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when trying to set the maximum value to 0 or less.</exception>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ISubCommandBar">
            <summary>
            Defines a scope for command bar items, whose visibility in the parent command bar can be controlled as a unit. 
            The items belonging to the parent command bar can be accessed through this sub command bar, but only items added directly to this sub command bar can be controlled
            through the <see cref="P:Sdl.Desktop.Platform.CommandBars.ISubCommandBar.VisibleInParent"/> property.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ISubCommandBar.VisibleInParent">
            <summary>
            Gets or sets whether the items that were added to this commnd bar
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ISubCommandBar.ParentCommandBar">
            <summary>
            Returns the parent command bar to with which this sub command bar is associated.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ISubCommandBars">
            <summary>
            This class encapsulates a set of sub command bars, whose visibility can be controlled as a unit.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ISubCommandBars.VisibleInParent">
            <summary>
            Gets or sets whether the items that belong to any of the command bars should be visible in its parent command bar.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ISubMenu">
            <summary>
            Defines a scope for command bar items  within a menu, whose visibility in the parent menu can be controlled as a unit. 
            The items belonging to the parent menu can be accessed through this sub menu, but only items added directly to this sub menu can be controlled
            through the <see cref="P:Sdl.Desktop.Platform.CommandBars.ISubCommandBar.VisibleInParent"/> property.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ISubRibbon">
            <summary>
            Defines a scope for command bar items  within a ribbon, whose visibility in the parent menu can be controlled as a unit. 
            The items belonging to the parent menu can be accessed through this sub menu, but only items added directly to this sub menu can be controlled
            through the <see cref="P:Sdl.Desktop.Platform.CommandBars.ISubCommandBar.VisibleInParent"/> property.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ISubRibbonGroup">
            <summary>
            Defines a scope for command bar items  within a ribbon group, whose visibility in the parent menu can be controlled as a unit. 
            The items belonging to the parent menu can be accessed through this sub menu, but only items added directly to this sub menu can be controlled
            through the <see cref="P:Sdl.Desktop.Platform.CommandBars.ISubCommandBar.VisibleInParent"/> property.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ISubRibbonTab">
            <summary>
            Defines a scope for command bar items  within a ribbon tab, whose visibility in the parent menu can be controlled as a unit. 
            The items belonging to the parent menu can be accessed through this sub menu, but only items added directly to this sub menu can be controlled
            through the <see cref="P:Sdl.Desktop.Platform.CommandBars.ISubCommandBar.VisibleInParent"/> property.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ISubStatusBar">
            <summary>
            Defines a scope for command bar items within a status bar, whose visibility in the parent status bar can be controlled as a unit. 
            The items belonging to the parent status bar can be accessed through this sub status bar, but only items added directly to this sub status bar can be controlled
            through the <see cref="P:Sdl.Desktop.Platform.CommandBars.ISubCommandBar.VisibleInParent"/> property.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ISubToolBar">
            <summary>
            Defines a scope for command bar items within a toolbar, whose visibility in the parent toolbar can be controlled as a unit. 
            The items belonging to the parent toolbar can be accessed through this sub toolbar, but only items added directly to this sub toolbar can be controlled
            through the <see cref="P:Sdl.Desktop.Platform.CommandBars.ISubCommandBar.VisibleInParent"/> property.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ISubToolBar.ParentCommandBar">
            <summary>
            Returns the parent toolbar.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ISubToolBarManager">
            <summary>
            Defines a scope for toolbars within a toolbar manager, whose visibility in the parent toolbar manager can be controlled as a unit. 
            The toolbars belonging to the parent toolbar manager can be accessed through this sub toolbar manager, but only items added directly to this sub toolbar manager can be controlled
            through the <see cref="P:Sdl.Desktop.Platform.CommandBars.ISubToolBarManager.VisibleInParent"/> property.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ISubToolBarManager.VisibleInParent">
            <summary>
            Gets or sets whether the toolbars within this scope are visible in the parent toolbar manager.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IToolBar">
            <summary>
            Represents a toolbar in the Studio.
            </summary>
            <remarks>Instances of main menus can be accessed through <see cref="P:Sdl.Desktop.Platform.CommandBars.ICommandBars.ToolBars"/>.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IToolBar.Visible">
            <summary>
            Gets or sets whether this toolbar is visible.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IToolBar.IsShowing">
            <summary>
            Gets whether toolbar is currently actually visible.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IToolBar.Stretch">
            <summary>
            Gets or sets whether this toolbar fills up all horizontal space that is left in its container.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IToolBar.DockedRow">
            <summary>
            Gets or sets the docked row.
            </summary>
            <value>The docked row.</value>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IToolBar.DockedColumn">
            <summary>
            Gets or sets the docked column.
            </summary>
            <value>The docked column.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBar.CreateCommandBarAction(System.String,System.Boolean)">
            <summary>
            Creates a new command bar action.
            </summary>
            <param name="actionId">The id of the action.</param>
            <param name="showText">True if the action's text should be shown on the toolbar.</param>
            <returns>The newly created command bar action.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBar.CreateCommandBarActionWithPopup(System.String,System.Boolean)">
            <summary>
            Creates a new command bar action with an associated popup.
            </summary>
            <param name="actionId">The id of the action.</param>
            <param name="showText">True if the action's text should be shown on the toolbar.</param>
            <returns>The newly created command bar action.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBar.CreateCommandBarAction(Sdl.Desktop.Platform.CommandBars.IDynamicAction,System.Boolean)">
            <summary>
            Creates a new command bar action.
            </summary>
            <param name="action">The action.</param>
            <param name="showText">True if the action's text should be shown on the toolbar.</param>
            <returns>The newly created command bar action.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBar.CreateCommandBarActionWithPopup(Sdl.Desktop.Platform.CommandBars.IDynamicActionWithPopup,System.Boolean)">
            <summary>
            Creates a new command bar action with an associated popup.
            </summary>
            <param name="action">The action.</param>
            <param name="showText">True if the action's text should be shown on the toolbar.</param>
            <returns>The newly created command bar action.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBar.ShowToolBarInternal(System.Boolean)">
            <summary>
            Called by the framework to control visibility of a toolbar, indepedently of the <see cref="P:Sdl.Desktop.Platform.CommandBars.IToolBar.Visible"/> property.
            This method should not be called in user code.
            </summary>
            <param name="show"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBar.SaveState">
            <summary>
            Saves the docked state of the toolbar
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IToolBarManager">
            <summary>
            This class provides functionality for managing toolbars.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.IToolBarManager.ToolBarShown">
            <summary>
            Raised when a toolbar has been shown.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.IToolBarManager.ToolBarHidden">
            <summary>
            Raised when a toolbar has been hidden.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.IToolBarManager.ToolBarAdded">
            <summary>
            Raised when a toolbar has been added.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.IToolBarManager.ToolBarRemoved">
            <summary>
            Raised when a toolbar has been removed.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.CommandBars.IToolBarManager.Updated">
            <summary>
            Raised when the toolbars have been updated.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IToolBarManager.Window">
            <summary>
            Returns the window on which this tool bar manager resides.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IToolBarManager.Item(System.Int32)">
            <summary>
            Returns the toolbar at the given index.
            </summary>
            <param name="index">The index for which to get the toolbar.</param>
            <returns>The toolbar.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when index is out of range.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IToolBarManager.Item(System.String)">
            <summary>
            Returns the toolbar with the given id, or null if there is no such toolbar.
            </summary>
            <param name="toolBarId">The id of the required toolbar.</param>
            <returns>The toolbar with the given id, or null if it doesn't exist.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when id is null or empty.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.IToolBarManager.Count">
            <summary>
            Gets the number of toolbars in this toolbar manager.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBarManager.AddToolBar(System.String,System.String,System.String)">
            <summary>
            Adds a new toolbar to this toolbar manager.
            </summary>
            <param name="id">A unique id for this toolbar.</param>
            <param name="name">The name for the toolbar.</param>
            <param name="description">The description for the toolbar.</param>
            <returns>The newly added toolbar.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBarManager.AddToolBar(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a new toolbar to this toolbar manager.
            </summary>
            <param name="id">A unique id for this toolbar.</param>
            <param name="name">The name for the toolbar.</param>
            <param name="description">The description for the toolbar.</param>
            <param name="defaultVisibility">if set to <c>true</c> the toolbar will be visible by default.</param>
            <returns>The newly added toolbar.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBarManager.AddToolBar(System.String,System.String,System.String,Sdl.Desktop.Platform.CommandBars.ToolBarDefaults)">
            <summary>
            Adds a new toolbar to this toolbar manager.
            </summary>
            <param name="id">A unique id for this toolbar.</param>
            <param name="name">The name for the toolbar.</param>
            <param name="description">The description for the toolbar.</param>
            <param name="defaults">A class containing the default properties to use when creating the toolbar.</param>
            <returns>The newly added toolbar.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBarManager.Remove(Sdl.Desktop.Platform.CommandBars.IToolBar)">
            <summary>
            Removes the specified toolbar from this toolbar manager.
            </summary>
            <param name="toolBar"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBarManager.Remove(System.String)">
            <summary>
            Removes the toolbar with the specified id from this toolbar manager.
            </summary>
            <param name="toolBarId"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBarManager.Update(System.Boolean)">
            <summary>
            Updates all toolbars contained by this toolbar manager.
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBarManager.SaveState">
            <summary>
            Saves the state of all the managed toolbars.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBarManager.AddSubToolBar(Sdl.Desktop.Platform.CommandBars.ISubToolBarManager,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a subtoolbar to the specified sub toolbar manager.
            </summary>
            <param name="subToolBarManager">The sub toolbar manager.</param>
            <param name="id">The unique id for the new sub toolbar.</param>
            <param name="name">The name for the new sub toolabr</param>
            <param name="description">The description for the new sub toolbar.</param>
            <param name="defaultVisibility">Whether the toolbar is visible by default.</param>
            <returns>The newly created subtoolbar.</returns>
            <remarks>The method is used by the framework internally and is not intended for use by user code.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBarManager.AddSubToolBar(Sdl.Desktop.Platform.CommandBars.ISubToolBarManager,System.String,System.String,System.String,Sdl.Desktop.Platform.CommandBars.ToolBarDefaults)">
            <summary>
            Adds a subtoolbar to the specified sub toolbar manager.
            </summary>
            <param name="subToolBarManager">The sub toolbar manager.</param>
            <param name="id">The unique id for the new sub toolbar.</param>
            <param name="name">The name for the new sub toolabr</param>
            <param name="description">The description for the new sub toolbar.</param>
            <param name="defaults">A class containing the default properties to use when creating the toolbar.</param>
            <returns>The newly created subtoolbar.</returns>
            <remarks>The method is used by the framework internally and is not intended for use by user code.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IToolBarManager.RemoveSubToolBar(Sdl.Desktop.Platform.CommandBars.ISubToolBar)">
            <summary>
            Removes the specified sub toolbar from this toolbar manager.
            </summary>
            <param name="subToolBar">The sub toolbar to remove.</param>
            <remarks>The method is used by the framework internally and is not intended for use by user code.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.RetargetableAction">
            <summary>
            Base class for creating retargetable actions. A retargetable action is an action which has different effects depending
            on the context it is executed in, even though these effects are semantically similar. An example of such an action is "Copy": depending on which part 
            of the UI is active, different content will be copied to the clipboard. 
            </summary>
            <remarks><para>For creating a new retargetable action, use <see cref="T:Sdl.Desktop.Platform.CommandBars.RetargetableAction"/> as a base class. A retargetable action can be regsitered in the studio using the
            <see cref="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute"/> or the <see cref="T:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute"/> extension attributes.</para>
            <para>Users can change the semantics of a retargetable action ("retarget the action") by settings its handler (see <see cref="P:Sdl.Desktop.Platform.CommandBars.RetargetableAction.Handler"/>). A retargetable action can also have a default handler, which is active whenever
            no specific handler is set.</para></remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.RetargetableAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.CommandBars.RetargetableAction"/> class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.RetargetableAction.Handler">
            <summary>
            Gets or sets the handler that is used to handle execute action and to control its enabled state.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.RetargetableAction.DefaultHandler">
            <summary>
            Gets or sets the handler that gets used when no specific handler is assigned to <see cref="P:Sdl.Desktop.Platform.CommandBars.RetargetableAction.Handler"/>.
            </summary>
            <remarks>Can be null.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.RetargetableAction.VisibleWithoutHandler">
            <summary>
            Gets or sets whether the action should be visible, even when no handler or default handler is set. Default is <code>false</code>.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.RetargetableAction.EnabledHandler">
            <summary>
            Gets the enabled handler.
            </summary>
            <value>The enabled handler.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.RetargetableAction.Execute">
            <summary>
            Called when the user activates this action. Override this method to perform the action logic.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.RetargetableAction.UpdateAction">
            <summary>
            Updates the action based on the current handler.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.RibbonQuickAccessToolbarLocationAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.RibbonQuickAccessToolbarLocationAttribute.#ctor(System.String)">
            <summary>
            Constructor with path of the quick access toolbar on which to display the command bar item.
            </summary>
            <param name="path">The path of the  quick access toolbar on which to display the command bar item.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.RibbonRightSideTabItemsToolbarLocationAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ShortcutAttribute">
            <summary>
            Auxiliary extension attribute for defining shortcuts for actions.
            </summary>
            <remarks>This auxiliary extension attribute can be used in conjunction with the following extension attributes:
            <list>
            		<item><see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/></item>
            		<item><see cref="T:Sdl.Desktop.Platform.CommandBars.ActionAttribute"/></item>
            		<item><see cref="T:Sdl.Desktop.Platform.CommandBars.DynamicActionAttribute"/></item>
            	</list></remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ShortcutAttribute.#ctor">
            <summary>
            Constructor for XML serialization
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ShortcutAttribute.#ctor(System.Windows.Forms.Keys,System.String)">
            <summary>
            Defines a shortcut for a specific user profile.
            </summary>
            <param name="shortcut">The keyboard shortcut.</param>
            <param name="userProfileId">The id of the user profile for which this keyboard shortcut should be defined.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ShortcutAttribute.#ctor(System.Windows.Forms.Keys)">
            <summary>
            Defines a default shortcut to be used when no specific shortcut is defined for the current user profile.
            </summary>
            <param name="shortcut">The keyboard shortcut.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ShortcutAttribute.Shortcut">
            <summary>
            Gets or sets the shortcut.
            </summary>
            <value>The shortcut.</value>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ShortcutAttribute.UserProfileId">
            <summary>
            Gets or sets the user profile id.
            </summary>
            <value>The user profile id.</value>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ShortcutAttribute.Primary">
            <summary>
            Gets or sets whether this shortcut is the primary shortcut for it's user profile.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute">
            <summary>
            Extension attribute for defining plug-in actions.
            </summary>
            <remarks>To create a new static plug-in action, create a class that implements <see cref="T:Sdl.Desktop.Platform.CommandBars.IStaticAction"/> (or extend <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractStaticAction"/>)
            and annotate it with the  <see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/> attribute:
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute.#ctor(System.String,System.String,System.String,Sdl.Desktop.Platform.CommandBars.PluginTargetCommandBarSiteType)">
            <summary>
            Constructor with basic properties.
            </summary>
            <param name="id">A unique id for this plug-in action.</param>
            <param name="name">A name for this plug-in action. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">A description for this plug-in action. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="targetCommandBarSiteType">The site at which to add the item. This controls when the plug-in action will be available within the studio.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute.Style">
            <summary>
            Gets or sets the action style.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute.Checked">
            <summary>
            Gets or sets whether the action is initially checked.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute.FontColor">
            <summary>
            Gets or sets the action font color in HTML format (#88AAFF).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute.BackgroundColor">
            <summary>
            Gets or sets the action background color in HTML format (#88AAFF).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute.HoverBackgroundColor">
            <summary>
            Gets or sets the action mouse hover background color in HTML format (#88AAFF).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute.Bold">
            <summary>
            Gets or sets the bold text.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute.ActionGroup">
            <summary>
            Gets or sets the action group to which this action belongs. Can be null.
            </summary>
            <remarks>
            <para>This property is ignored unless the <see cref="P:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute.Style"/> property is set to <see cref="F:Sdl.Desktop.Platform.CommandBars.ActionStyle.ToggleButton"/>.</para>
            <para>The action group should be a string that is unique across the studio. All ToggleButton style actions
            that share the same action group act as a group and are rendered as a rdaio button.</para>
            <para>When null, the action is shown on the command bar as a checkbox, otherwise it is shown as a radio button.</para>
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute.ValidateRequireInterface(Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            Validates whether the extension implements <see cref="T:Sdl.Desktop.Platform.CommandBars.IStaticAction"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ToolBarVisibility">
            <summary>
            Used to hold the visibility of a toolbar in the user settings.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ToolBarVisibility.Visible">
            <summary>
            The toolbar is visible.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ToolBarVisibility.Hidden">
            <summary>
            The toolbar is hidden.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ToolBarVisibility.Default">
            <summary>
            The toolbar uses any default visibility specified when it is being created otherwise it is made visible.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ToolBarDockedPosition">
            <summary>
            Used to define a default docked position when creating a toolbar.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ToolBarDockedPosition.Top">
            <summary>
            The toolbar is docked at the Top.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ToolBarDockedPosition.Bottom">
            <summary>
            The toolbar is docked at the Bottom.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ToolBarDockedPosition.Left">
            <summary>
            The toolbar is docked at the Left.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ToolBarDockedPosition.Right">
            <summary>
            The toolbar is docked at the Right.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ToolBarDockedPosition.Floating">
            <summary>
            The toolbar is floating.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ToolBarDockedPosition.Default">
            <summary>
            The toolbar uses any default docked position specified when it is being created otherwise it is docked at the Top.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ToolBarDefaults">
            <summary>
            This class is used to pass in first time defaults to be used for Adding new toolbars to a toolbar manager.
            </summary>
            <remarks>
            If a toolbar already has any user setting defined for it then those settings values will be 
            used instead of the matching value in this class.
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ToolBarDefaults.#ctor">
            <summary>
            Constructs a ToolBarDefaults class to be used to specify default values when creating a toolbar.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ToolBarDefaults.#ctor(System.Boolean)">
            <summary>
            Constructs a ToolBarDefaults class to be used to specify default values when creating a toolbar.
            </summary>
            <param name="visible">The default visibility.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ToolBarDefaults.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a ToolBarDefaults class to be used to specify default values when creating a toolbar.
            </summary>
            <param name="visible">The default visibility.</param>
            <param name="row">The default docked row.</param>
            <param name="column">The default docked column.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ToolBarDefaults.#ctor(System.Int32)">
            <summary>
            Constructs a ToolBarDefaults class to be used to specify default values when creating a toolbar.
            </summary>
            <param name="row">The default docked row.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ToolBarDefaults.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a ToolBarDefaults class to be used to specify default values when creating a toolbar.
            </summary>
            <param name="row">The default docked row.</param>
            <param name="column">The default docked column.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ToolBarDefaults.#ctor(System.Boolean,System.Int32,System.Int32,Sdl.Desktop.Platform.CommandBars.ToolBarDockedPosition)">
            <summary>
            Constructs a ToolBarDefaults class to be used to specify default values when creating a toolbar.
            </summary>
            <param name="visible">The default visibility.</param>
            <param name="row">The default docked row.</param>
            <param name="column">The default docked column.</param>
            <param name="position">The default docked position.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ToolBarDefaults.Visible">
            <summary>
            The default visibility to be used when creating a toolbar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ToolBarDefaults.DockedRow">
            <summary>
            The default docked row to be used when creating a toolbar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ToolBarDefaults.DockedColumn">
            <summary>
            The default docked column to be used when creating a toolbar.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ToolBarDefaults.DockedPosition">
            <summary>
            The default docked position to be used when creating a toolbar.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ToolBarEventArgs">
            <summary>
            Events args related to a toolbar.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.ToolBarEventArgs.#ctor(Sdl.Desktop.Platform.CommandBars.IToolBar)">
            <summary>
            Creates an instance for the specified toolbar.
            </summary>
            <param name="toolBar">The toolbar.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandBars.ToolBarEventArgs.ToolBar">
            <summary>
            Gets or sets the toolbar.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.ActionOrigin">
            <summary>
            Enumeration of different origins for the action
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionOrigin.Keyboard">
            <summary>
            The origin originated from a keyboard shortcut.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionOrigin.Menu">
            <summary>
            The origin originated from a menu selection.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionOrigin.Toolbar">
            <summary>
            The origin originated from a toolbar selection.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.CommandBars.ActionOrigin.QuickAccessToolbar">
            <summary>
            The origin originated from a selection of a quick access toolbar item.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandBars.IOriginAwareAction">
            <summary>
            An action that needs to be aware of how it was executed.  This should be used for
            actions that perform different functions when they are executed through, for example,
            a menu item rather than a keyboard shortcut.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandBars.IOriginAwareAction.Execute(Sdl.Desktop.Platform.CommandBars.ActionOrigin)">
            <summary>
            Execute the action with the specified origin information.
            </summary>
            <param name="origin"></param>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandLineArgument">
            <summary>
            Represents a command line argument and its values.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandLineArgument.#ctor(Sdl.Desktop.Platform.CommandLineArgumentDefinition)">
            <summary>
            Creates a new argument with the specific definition.
            </summary>
            <param name="definition">The definition of the argument.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandLineArgument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.CommandLineArgument"/> class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandLineArgument.Definition">
            <summary>
            Gets the command line argument definition.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandLineArgument.Values">
            <summary>
            Gets the list of values supplied for this argument.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandLineArgumentDefinition">
            <summary>
            Defines a command line argument.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandLineArgumentDefinition.#ctor(Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition)">
            <summary>
            Creates a new command line argument definition based on the API model.
            </summary>
            <param name="externalDefinition">API model used for external plugins</param>        
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandLineArgumentDefinition.#ctor(System.String,System.String)">
            <summary>
            Creates a new command line argument definition with the given argument name and description.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandLineArgumentDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.CommandLineArgumentDefinition"/> class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandLineArgumentDefinition.Name">
            <summary>
            Gets or sets the argument name. The user must use this name, preceded by a slash ('/') in order to specify this argument on the command line,
            followed by a  number of values separated by a space.</summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandLineArgumentDefinition.Required">
            <summary>
            Gets or sets if this argument is required = true or optional = false.
            <remarks>
            This is currently only used to display square brackets around optional arguments in the command line help.
            </remarks>
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandLineArgumentDefinition.SampleValues">
            <summary>
            Gets or sets an array of sample argument value strings to be used in the command line help.
            </summary>
            <remarks>
            The default value is a string[] containing the main argument name appended with '1'.  Also when displaying the command line help if more
            sample names are needed to display required or optional sample names then an incrementing number is appended to the last
            sample name in the the array.
            </remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandLineArgumentDefinition.Aliases">
            <summary>
            Gets or sets a list of alias arguments that can be used instead of the main argument name in the <see cref="P:Sdl.Desktop.Platform.CommandLineArgumentDefinition.Name"/> property.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandLineArgumentDefinition.Description">
            <summary>
            Gets or sets the description of the argument (shown in the usage text).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandLineArgumentDefinition.MinValues">
            <summary>
            Gets or sets the minimum number of values expected for this argument, if it is specified. Defaults to 0.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandLineArgumentDefinition.MaxValues">
            <summary>
            Gets or sets the maximum number of values expected for this argument, if it is specified.
            Set to -1 in order to allow un unlimited number of values. Defaults to -1.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CommandLineArguments">
            <summary>
            A collection of command line arguments supplied by the user.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.CommandLineArguments.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.CommandLineArguments.Item(System.String)">
            <summary>
            Gets the command line argument with the specified name or alias (case insensitive).
            </summary>
            <param name="name">The name of requested argument.</param>
            <returns>The argument; or null if this argument was not supplied.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.DockingViewConfigurationAttribute">
            <summary>
            Extension attribute for defining docking view configurations, which specify a specific configuration layout of view parts within a docking view.
            </summary>
            <remarks>To create a new configuration, create a class extending <see cref="T:Sdl.Desktop.Platform.AbstractDockingViewConfiguration"/> or implement the interface directly
            and annotate it with the <see cref="T:Sdl.Desktop.Platform.DockingViewConfigurationAttribute"/>, specifying the view at which the configuration is targeted.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.DockingViewConfigurationAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.DockingViewConfigurationAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor with required properties.
            </summary>
            <param name="id">The unique id for the docking view configuration.</param>
            <param name="name">The name for the docking view configuration. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">The description for the docking view configuration. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="targetViewId">Id of the view for which this configuration is intended.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewConfigurationAttribute.TargetViewId">
            <summary>
            Gets or sets the id of the view for which this configuration is intended.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.DockingViewConfigurationCollection">
            <summary>
            Read-only collection of docking view conmfigurations (see <see cref="T:Sdl.Desktop.Platform.IDockingViewConfiguration"/>).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewConfigurationCollection.Item(System.String)">
            <summary>
            Returns the configuration with the specified id.
            </summary>
            <param name="id">The id for which to retrieve the configuration.</param>
            <returns>The configuration with the specified id; or null, if this collection does not contain a configuration with the given id.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute">
            <summary>
            An auxiliary extension attribute for use with the <see cref="T:Sdl.Desktop.Platform.ViewPartAttribute"/> to define a view part for use in a docking 
            view (see <see cref="T:Sdl.Desktop.Platform.IDockingView"/>. This extension can be used to specify a default layout for the view part, but also to specify a layout specific
            to a certain docking view configuration (see <see cref="T:Sdl.Desktop.Platform.IDockingViewConfiguration"/>). Multiple instances of this attribute can be applied.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.TargetViewId">
            <summary>
            Gets or sets the target view id in which the layout should be used.
            </summary>
            <value>The target view id.</value>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.TargetConfigurationId">
            <summary>
            Gets or sets the id of the configuration within the target view (see <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.TargetViewId"/>) to which this layout applies.
            If ommitted, this layout is the default layout.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.DockedArea">
            <summary>
            Gets or sets in which area the view part should be docked.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.InsertBefore">
            <summary>
            Gets or sets the id of the view part before which this part should be inserted. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.InsertAfter">
            <summary>
            Gets or sets the id of the view part after which this part should be inserted. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.PreferredLocation">
            <summary>
            Gets or sets the preferred location within the view in which the view part should appear, in case no
            view parts are specified in <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.InsertBefore"/> or <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.InsertAfter"/> or in case these view parts
            are not open in the view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.PreferredGroupStyle">
            <summary>
            Gets or sets the preferred way this view part should be grouped with other view parts in the same area (see <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.PreferredLocation"/>),
            in case no view parts are specified in <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.InsertBefore"/> or <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.InsertAfter"/> or in case these view parts
            are not open in the view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.PreferredWidth">
            <summary>
            Gets or sets the preferred width of the view part in case this is not already implied by the way view parts are grouped
            in the group to which the view parts, specified in <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.InsertBefore"/> or <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.InsertAfter"/>, belong to.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.PreferredHeight">
            <summary>
            Gets or sets the preferred height of the view part in case this is not already implied by the way view parts are grouped
            in the group to which the view parts, specified in <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.InsertBefore"/> or <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.InsertAfter"/>, belong to.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.Visible">
            <summary>
            Gets or sets whether this view part is visible by default. True by default.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.Pinned">
            <summary>
            Gets or sets whether the view part should be pinned. True by default.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.MinimumWidth">
            <summary>
            Gets or sets whether the minimum width of the view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.MinimumHeight">
            <summary>
            Gets or sets whether the minimum height of the view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.CreateNewGroup">
            <summary>
            Gets or sets whether to create a new docking group. When set to true, the new docking group is created 
            positioned relatively to the view parts specified in <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.InsertAfter"/> and <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.InsertBefore"/>.
            The new group is positioned relatively to the existing panes according to the <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.ParentGroupStyle"/> property.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.ParentGroupStyle">
            <summary>
            Gets or sets the group style used when creating a new <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.CreateNewGroup"/> is set to true.
            Refer to <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute.CreateNewGroup"/> for more information.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.DockedLocation">
            <summary>
            Enum specifying possible locations where a view part can be located in a <see cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockedLocation.Top">
            <summary>
            The area above the central area.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockedLocation.Left">
            <summary>
            The area to the left of the central area.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockedLocation.Bottom">
            <summary>
            The area below the central area.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockedLocation.Right">
            <summary>
            The area to the right of the central area.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockedLocation.Center">
            <summary>
            The central area.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockedLocation.Floating">
            <summary>
            A floating tool window.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.DockingGroupStyle">
            <summary>
            Enum specifying possible ways a number of view parts sharing the same area (see <see cref="T:Sdl.Desktop.Platform.DockedLocation"/> can be grouped.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockingGroupStyle.Tab">
            <summary>
            The parts are grouped in tabs, with one part visible at a time.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockingGroupStyle.VerticalSplit">
            <summary>
            The parts are positioned next to each other, separated by vertical splitters.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockingGroupStyle.HorizontalSplit">
            <summary>
            The parts are positioned above each other, separated by horizontal splitter.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.DockedArea">
            <summary>
            Enum with possible values for <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.DockedArea"/>.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockedArea.ContentArea">
            <summary>
            The view part should appear in the content area on the right-hand side.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockedArea.ExplorerArea">
            <summary>
            The view part should appear in the explorer bar area.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.DockingViewPartLayoutInfo">
            <summary>
            The class represents the initial layout of a view part within a <see cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.DockedArea">
            <summary>
            Gets or sets the area where the view part should appear.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.InsertBefore">
            <summary>
            Gets or sets the id of the view part before which this part should be inserted. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.InsertAfter">
            <summary>
            Gets or sets the id of the view part after which this part should be inserted. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.PreferredLocation">
            <summary>
            Gets or sets the preferred location within the view in which the view part should appear, in case no
            view parts are specified in <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.InsertBefore"/> or <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.InsertAfter"/> or in case these view parts
            are not open in the view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.PreferredGroupStyle">
            <summary>
            Gets or sets the preferred way this view part should be grouped with other view parts in the same area (see <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.PreferredLocation"/>),
            in case no view parts are specified in <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.InsertBefore"/> or <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.InsertAfter"/> or in case these view parts
            are not open in the view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.PreferredWidth">
            <summary>
            Gets or sets the preferred width of the view part in case this is not already implied by the way view parts are grouped
            in the group to which the view parts, specified in <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.InsertBefore"/> or <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.InsertAfter"/>, belong to.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.PreferredHeight">
            <summary>
            Gets or sets the preferred height of the view part in case this is not already implied by the way view parts are grouped
            in the group to which the view parts, specified in <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.InsertBefore"/> or <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.InsertAfter"/>, belong to.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.Visible">
            <summary>
            Gets or sets whether the view part should be visible.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.Pinned">
            <summary>
            Gets or sets whether the view part should be pinned. True by default.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.MinimumWidth">
            <summary>
            Gets or sets whether the minimum width of the view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.MinimumHeight">
            <summary>
            Gets or sets whether the minimum height of the view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.CreateNewGroup">
            <summary>
            Gets or sets whether to create a new docking group. When set to true, the new docking group is created 
            positioned relatively to the view parts specified in <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.InsertAfter"/> and <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.InsertBefore"/>.
            The new group is positioned relatively to the existing panes according to the <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.ParentGroupStyle"/> property.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.ParentGroupStyle">
            <summary>
            Gets or sets the group style used when creating a new <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.CreateNewGroup"/> is set to true.
            Refer to <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.CreateNewGroup"/> for more information.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.DockingViewPartToolBarLocation">
            <summary>
            Enum specifying possible locations for a view part's tool bar.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockingViewPartToolBarLocation.MainToolBarArea">
            <summary>
            Tool bars appear in the main tool bar area.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.DockingViewPartToolBarLocation.ViewPartToolBarArea">
            <summary>
            Tool bars appear in the view part's own tool bar area.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.DockingViewPartOptionsAttribute">
            <summary>
            Auxiliary extension attribute for specifying additional options for a view part that appears in a docking view (<see cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>).
            </summary>
            <remarks>This attribute can only be used together with extension attribute <see cref="T:Sdl.Desktop.Platform.ViewPartAttribute"/>.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.DockingViewPartOptionsAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.DockingViewPartOptionsAttribute.#ctor(Sdl.Desktop.Platform.DockingViewPartToolBarLocation)">
            <summary>
            Constructor for XML serialization.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.DockingViewPartOptionsAttribute.ToolBarLocation">
            <summary>
            Gets or sets where the tool bars of this view part should appear.
            </summary>
            <remarks>By default tool bars appear in the view part's own tool bar area (<see cref="F:Sdl.Desktop.Platform.DockingViewPartToolBarLocation.ViewPartToolBarArea"/>).</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.DockingViewPartOptionsAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            Validates an extension targeting this extension point. This method is called by the framework while generating the plug-in manifest.
            </summary>
            <param name="info">Information about the extension.</param>
            <param name="context">Provides functionality to validate extensions targeting the extension point
            and report warning or error messages</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ErrorMessages.StudioWindow_CannotSetActiveViewDisabledorNotAvailable">
            <summary>
              Looks up a localized string similar to Cannot set the active view to a view that is disabled or not available..
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Events.SubscriptionLicensingEvent">
            <summary>
            The event fires when SubscriptionLicense Signals LicensingService that Studio should close due to errors or invalid subscriptions
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.AbstractCondition">
            <summary>
            Abstract base class for conditions.
            <seealso cref="T:Sdl.Desktop.Platform.Extensions.ICondition"/>
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Extensions.AbstractCondition.ValueChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Extensions.AbstractCondition.Value"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Extensions.AbstractCondition.Value">
            <inheritdoc />
            <summary>
            True if this condition is met.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.AbstractCondition.OnValueChanged">
            <summary>
            Raises the <see cref="E:Sdl.Desktop.Platform.Extensions.AbstractCondition.ValueChanged"/> event. Override this method to perform additional processing, but make
            sure you call the base class method so the event gets raised.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.AbstractCondition.UpdateValue">
            <summary>
            Call this method to cause the re-evaluation of the condition, when one of the parameters
            of the condition changes. This method raises the <see cref="E:Sdl.Desktop.Platform.Extensions.AbstractCondition.ValueChanged"/> event, but only if the value if 
            actually different after re-evaluation.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.AbstractCondition.GetValue">
            <summary>
            Computes the current value of the condition.
            </summary>
            <returns>True if the condition is met.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.ConditionResult">
            <summary>
            Enum representing the possible values a condition can define.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Extensions.ConditionResult.Available">
            <summary>
            A condition on the availability of an extension.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Extensions.ConditionResult.Enabled">
            <summary>
            A condition on the enabled state of an extension.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.AbstractConditionAttribute">
            <summary>
            Abstract auxiliary attribute for representing conditions.
            </summary>
            <remarks>Condition attributes are supported on the following types of extensions:
            <list>
            <item>Static actions (<see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/>)</item>
            <item>Views (<see cref="T:Sdl.Desktop.Platform.ViewAttribute"/>)</item>
            <item>View parts (<see cref="T:Sdl.Desktop.Platform.ViewPartAttribute"/>)</item>
            </list></remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.AbstractConditionAttribute.#ctor">
            <summary>
            Constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.AbstractConditionAttribute.#ctor(Sdl.Desktop.Platform.Extensions.ConditionResult)">
            <summary>
            Constructor with required condition result.
            </summary>
            <param name="conditionResult">The condition result.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.AbstractConditionAttribute.#ctor(Sdl.Desktop.Platform.Extensions.ConditionResult,System.Boolean)">
            <summary>
            Constructor with required condition result.
            </summary>
            <param name="conditionResult">The condition result.</param>
            <param name="negative">True to negate the value of the condition.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Extensions.AbstractConditionAttribute.Negative">
            <summary>
            Gets or sets whether to negate the result of the condition.
            </summary>
            <remarks>False by default.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Extensions.AbstractConditionAttribute.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.AbstractConditionAttribute.CreateCondition">
            <summary>
            Creates the condition.
            </summary>
            <returns>The condition.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.AbstractServiceContextAwareCondition">
            <summary>
            Abstract base class for service context aware conditions, which allows a condition initializer (<see cref="T:Sdl.Desktop.Platform.Extensions.IConditionInitializer"/>) to assign a service context (see <see cref="T:Sdl.Desktop.Platform.Services.IServiceContext"/>),
            in order to give the condition the ability to determine its value using services available in that service context.
            <seealso cref="T:Sdl.Desktop.Platform.Extensions.IServiceContextAwareCondition"/>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IServiceContext"/>
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Extensions.AbstractServiceContextAwareCondition.ServiceContext">
            <summary>
            Gets or sets the service context this condition should use to determine its value.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.AbstractServiceContextAwareCondition.OnServiceContextChanged">
            <summary>
            Called when a value is assigned to the <see cref="P:Sdl.Desktop.Platform.Extensions.AbstractServiceContextAwareCondition.ServiceContext"/> property. Override this method
            to initialize the value of the condition and to for instance attach event handlers to events exposed by services in the
            context, in order to dynamically update the value of the condition.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.CompoundCondition">
            <summary>
            Allows a condition to be defined which is a combination of other <see cref="T:Sdl.Desktop.Platform.Extensions.ICondition"/> objects.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.CompoundCondition.Operator">
            <summary>
            The logical operator for combining the constituent conditions.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Extensions.CompoundCondition.Operator.And">
            <summary>
            Logical "And" of the constituent conditions.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Extensions.CompoundCondition.Operator.Or">
            <summary>
            Logical "Or" of the constituent conditions.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.CompoundCondition.#ctor(System.Collections.Generic.IEnumerable{Sdl.Desktop.Platform.Extensions.ICondition},Sdl.Desktop.Platform.Extensions.CompoundCondition.Operator)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Extensions.CompoundCondition"/> class.
            </summary>
            <param name="conditions">The constituent conditions.</param>
            <param name="op">The logical operator for how to combine the conditions.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.CompoundCondition.GetValue">
            <summary>
            Computes the current value of the condition.
            </summary>
            <returns>True if the condition is met.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.ConditionAttribute">
            <summary>
            Default implementation of an auxiliary attribute for representing conditions.
            You can assign a condition to an extension using this attribute, by specifying a condition type name and a result.
            </summary>
            <remarks>Condition attributes are supported on the following types of extensions:
            <list>
            		<item>Static actions (<see cref="T:Sdl.Desktop.Platform.CommandBars.StaticActionAttribute"/>)</item>
            		<item>Views (<see cref="T:Sdl.Desktop.Platform.ViewAttribute"/>)</item>
            		<item>View parts (<see cref="T:Sdl.Desktop.Platform.ViewPartAttribute"/>)</item>
            	</list></remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.ConditionAttribute.#ctor">
            <summary>
            Constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.ConditionAttribute.#ctor(System.Type,Sdl.Desktop.Platform.Extensions.ConditionResult)">
            <summary>
            Constructs a condition attribute with the specified condition type, which has to implement <see cref="T:Sdl.Desktop.Platform.Extensions.ICondition"/>, and
            a condition result, which determines the boolean property of the extension the condition will affect.
            </summary>
            <param name="conditionType">The type of condition you want to apply. This must be a class that implements <see cref="T:Sdl.Desktop.Platform.Extensions.ICondition"/>.</param>
            <param name="result">The boolean property of the extension the condition will affect.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Extensions.ConditionAttribute.ConditionType">
            <summary>
            Gets the condition type.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.ConditionAttribute.CreateCondition">
            <summary>
            Creates the condition.
            </summary>
            <returns>The condition.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.ConditionHelper">
            <summary>
            Helper class for working with condition attributes on extensions.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.ConditionHelper.GetCondition(Sdl.Core.PluginFramework.IExtension,Sdl.Desktop.Platform.Extensions.ConditionResult,Sdl.Desktop.Platform.Extensions.IConditionInitializer)">
            <summary>
            Gets a condition for the specified extension and condition result, using the specifying condition initializer to 
            initialize the condition.
            </summary>
            <param name="extension">The extension.</param>
            <param name="conditionResult">The result.</param>
            <param name="initializer">The condition initializer.</param>
            <returns>A condition object, representing the condition for the specified parameters.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.EventsExtensions">
            <summary>
            Extension class for events
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.EventsExtensions.Raise(System.EventHandler,System.Object)">
            <summary>
            Extension method used to invoke the event with an empty argument.
            </summary>
            <param name="e">The event to be invoked.</param>
            <param name="sender">The event caller.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.EventsExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Extension method used to invoke the event with a custom event argument.
            </summary>
            <typeparam name="T">Type of the event argument</typeparam>
            <param name="e">The event to be invoked.</param>
            <param name="sender">The event caller.</param>
            <param name="eventArgs">The argument of the event.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.EventsExtensions.RaiseCancelable``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Extension method used to invoke a cancelable event with a custom event argument.
            </summary>
            <typeparam name="T">Type of the event argument</typeparam>
            <param name="e">The event to be invoked.</param>
            <param name="sender">The event caller.</param>
            <param name="eventArgs">The argument of the event.</param>
            <returns>True if cancelling is not requested.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.EventsExtensions.RaiseCancelable``1(System.EventHandler{``0},System.Object,``0,System.Boolean)">
            <summary>
            Extension method used to invoke a cancelable event with a custom event argument with the initial cancel value defined.
            </summary>
            <typeparam name="T">Type of the event argument</typeparam>
            <param name="e">The event to be invoked.</param>
            <param name="sender">The event caller.</param>
            <param name="eventArgs">The argument of the event.</param>
            <param name="cancel">The argument of the event.</param>
            <returns>True if cancelling is not requested.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.EventsExtensions.RaiseCancelable(System.EventHandler{System.ComponentModel.CancelEventArgs},System.Object,System.Boolean)">
            <summary>
            Extension method used to invoke a cancelable event with a default cancel event argument.
            </summary>
            <param name="e">The event to be invoked.</param>
            <param name="sender">The event caller.</param>
            <param name="cancel">An optional cancel initializer for the cancel event argument.</param>
            <returns>True if cancelling is not requested.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.GUIDExtensions.ToGuid(System.String)">
            <summary>
            Converts a hex string to a GUID by padding right and adding hyphens. Will throw exception if string is larger than maximum GUID size or not hex string
            </summary>
            <param name="hexString">The hex string to convert.</param>
            <returns>A GUID</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.GUIDExtensions.ToId(System.Guid,System.Int32)">
            <summary>
            Convert a GUID to a normal id by removing hyphens and extracting the first characters as specified by length
            </summary>
            <param name="guid">The GUID to convert.</param>
            <param name="length">The length of the resulting id.</param>
            <returns></returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.ConditionValueChangedEventHandler">
            <summary>
            Delegate for the <see cref="E:Sdl.Desktop.Platform.Extensions.ICondition.ValueChanged"/> event.
            </summary>
            <param name="condition"></param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.ICondition">
            <summary>
            Represents a boolean condition. Conditions can be used in a variety of extensions to control certain
            aspects of the extension.
            </summary>
            <remarks>Typically, you can derive implementations from <see cref="T:Sdl.Desktop.Platform.Extensions.AbstractCondition"/> for convenience.</remarks>
        </member>
        <member name="E:Sdl.Desktop.Platform.Extensions.ICondition.ValueChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Extensions.ICondition.Value"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Extensions.ICondition.Value">
            <summary>
            True if this condition is met.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.IConditionAware">
            <summary>
            Interface to be implemented by extensions that support conditions and want to aware of 
            which conditions are declaratively attached to them using condition atrtibutes.
            </summary>
            <example>This interface is implemented by static actions (see <see cref="T:Sdl.Desktop.Platform.CommandBars.AbstractStaticAction"/>)
            to expose the condition that are attached to the action.</example>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.IConditionAware.OnConditionAdded(Sdl.Desktop.Platform.Extensions.ICondition,Sdl.Desktop.Platform.Extensions.ConditionResult)">
            <summary>
            Called after the extension has been created.
            </summary>
            <param name="condition">The condition that is attached to the extension.</param>
            <param name="result">The result controlled by the attached condition.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.IConditionInitializer">
            <summary>
            This interface gives a class the ability to initialize condition using for instance context information. 
            Typically, classes implementing this interface inspect the type of the condition and pass certain data to the condition 
            depending on that. Examples of types of conditions:
            <list type="">
            <item><see cref="T:Sdl.Desktop.Platform.Extensions.IServiceContextAwareCondition"/>: allows a condition initializer to associate a service context (see <see cref="T:Sdl.Desktop.Platform.Services.IServiceContext"/>),
            in order to give the condition the ability to determine its value using services available in that service context.</item>
            </list>
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.IConditionInitializer.InitializeCondition(Sdl.Desktop.Platform.Extensions.ICondition)">
            <summary>
            Initializes the specified condition.
            </summary>
            <param name="condition">The condition to be initialized.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.IServiceContextAwareCondition">
            <summary>
            Represents a condition which allows a condition initializer (<see cref="T:Sdl.Desktop.Platform.Extensions.IConditionInitializer"/>) to assign a service context (see <see cref="T:Sdl.Desktop.Platform.Services.IServiceContext"/>),
            in order to give the condition the ability to determine its value using services available in that service context.
            <seealso cref="T:Sdl.Desktop.Platform.Extensions.ICondition"/>
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Extensions.IServiceContextAwareCondition.ServiceContext">
            <summary>
            Gets or sets the service context this condition should use to determine its value.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.TrueCondition">
            <summary>
            Represents a condition who's value is always true. This class is a singleton; use the <see cref="P:Sdl.Desktop.Platform.Extensions.TrueCondition.Instance"/> property
            to get the single instance.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Extensions.TrueCondition.Instance">
            <summary>
            Returns the single instance.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Extensions.TrueCondition.ValueChanged">
            <summary>
            This event is never raised, since this condition's value is always true.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Extensions.TrueCondition.Value">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Extensions.UserProfileAttribute">
            <summary>
            Extension attribute for user profiles.
            </summary>
            <remarks>In order to define a new user profile, implement <see cref="T:Sdl.Desktop.Platform.IUserProfile"/> and mark
            the implementation with this extension attribute.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.UserProfileAttribute.#ctor">
            <summary>
            Default constructor for xml serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Extensions.UserProfileAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor with required arguments.
            </summary>
            <param name="id">A unique id for this user profile.</param>
            <param name="name">A display name for this user profile. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">A description for this user profile. Should typically be a key of a resource string in PluginResources.resx.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.FeatureToggleAttribute.#ctor(System.String)">
            <summary>
             Constructor with basic properties
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.FeatureToggleAttribute.Feature">
            <summary>
             The license module to check out when licensing this class
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.CancelEventHandler`1">
            <summary>
            Generic delegate for cancelable events.
            </summary>
            <typeparam name="TCancelEventArgs">A CancelEventArgs type.</typeparam>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.HelpID_Desktop">
            <summary>
            Defines a set of help ID constants. A help ID represents a particular help topic, which can be displayed using the <see cref="T:Sdl.Desktop.Platform.Services.IHelpService"/>
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.HelpID_Desktop._settings">
            <summary>
            NOTE that all default topic IDs are set to fit TranslationStudio help.
            If specific topic IDs are used in a different application too (e.g. MultiTerm)
            overwrite them in the app.config file of that application and leave default
            ones unchanged.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.HelpID_Desktop.TODO_HELP_TOPIC_THIS(System.Object)">
            <summary>
            Should be called to obtain a temporary "to do" help ID, if a real ID has not yet been defined for a topic.
            </summary>
            <param name="caller">The object for which to display help</param>
            <returns></returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.ApplicationColorScheme">
            <summary>
            Possible application color schemes.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.IApplicationLookAndFeel">
            <summary>
            Encapsulates application look-and-feel options.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IApplicationLookAndFeel.ColorSchemeChanged">
            <summary>
            Raised when the application color scheme is changed.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IApplicationLookAndFeel.ColorScheme">
            <summary>
            Gets or sets the current application color scheme.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.ICommandLineProcessor">
            <summary>
            Represents a command line processor extension, which is responsible for processing a number of command line arguments, which 
            allow the user the execute a specific task or a set of tasks from the command line.
            To create a command line processor, which is executed after the application window has been created, implement <see cref="T:Sdl.Desktop.Platform.IWindowAwareCommandLineProcessor"/>.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ICommandLineProcessor.TaskName">
            <summary>
            Gets the name of the task or tasks which the processor allows the user to execute from the command line.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ICommandLineProcessor.TaskDescription">
            <summary>
            Gets the description of the task or tasks which the processor allows the user to execute from the command line.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ICommandLineProcessor.SupportedArguments">
            <summary>
            Gets the definitions for the supported command line arguments for this processor.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ICommandLineProcessor.ProcessCommandLine(Sdl.Desktop.Platform.CommandLineArguments)">
            <summary>
            This methods is called when the processor is executed.
            </summary>
            <remarks>A command line processor will always be executed, even if none of its expected parameters have been specified.</remarks>
            <param name="args">The full set of command line arguments and values supplied by the user, not restricted to the arguments expected by this processor.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.IDockingView">
            <summary>
            Represents a view with centrally tabbed view parts (MDI) and view parts docked on all sides.
            </summary>
            <remarks>To create a new docking view, extend the <see cref="T:Sdl.Desktop.Platform.AbstractDockingView"/> class and annotate it with the 
            <see cref="T:Sdl.Desktop.Platform.ViewPartAttribute"/> attribute. </remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.IDockingView.CenterViewParts">
            <summary>
            Gets the read-only collection of view parts appearing in the central tab area.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IDockingView.DockedViewParts">
            <summary>
            Gets the read-only collection of docking view parts (also includes non-visible parts).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IDockingView.ActiveConfiguration">
            <summary>
            Gets or sets the active view configuration.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IDockingView.Configurations">
            <summary>
            Gets the read-only collection of docking view configurations.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IDockingView.ShowConfigurationsMenu">
            <summary>
            Gets or sets whether to show the configuration selection menu in the view menu.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IDockingView.ResetViewPartLayout(System.Boolean)">
            <summary>
            Resets the layout of the view parts.
            </summary>
            <param name="activeConfigurationOnly">When true, only resets the layout for the active configuration.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.IDockingView.AddViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Adds a new view part to the central tabbed area.
            </summary>
            <param name="viewPartReference">The reference to the new view part to add.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.IDockingView.GetLayoutInfo(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Gets the initial layout info for the specified view part.
            </summary>
            <remarks>This does not represent tha actual layout of the view part, but only the layout as it was specified initially in the configuration.</remarks>
            <param name="viewPartReference">The reference to the view part for which to get the layout information.</param>
            <returns>The initial layout info for the specified view part. Returns the layout specified by the active configuration, if availbale; otherwise returns
            the default layout for the view part as specified by a <see cref="T:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute"/> attribute (if available). If none of these is specified, 
            a generic default layout is returned.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IDockingView.GetDefaultLayoutInfo(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Returns the default layout info for the specified view part.
            </summary>
            <param name="viewPartReference">The view part.</param>
            <returns>The default layout info for the specified view part, or null if the view part does not specify a default layout.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IDockingView.GetActiveConfigurationLayoutExtension(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Gets the layout specified by the view part for use in the active configuration, or null if it is not specified.
            </summary>
            <param name="viewPartReference">The view part reference for which to get the layout information.</param>
            <returns>The layout specified by the view part for use in the active configuration, using a <see cref="T:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute"/>, or null
            if no such attribute is specified.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IDockingView.SetLayoutInfo(Sdl.Desktop.Platform.IViewPartReference,Sdl.Desktop.Platform.DockingViewPartLayoutInfo)">
            <summary>
            Sets the layout information for the specified view part.
            </summary>
            <remarks>This method is intended for use by <see cref="T:Sdl.Desktop.Platform.IDockingViewConfiguration"/> implementations and should not be used for other purposes.</remarks>
            <param name="viewPartReference">The view part reference for which to set the layout information.</param>
            <param name="layoutInfo">The new layout information.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.IDockingView.RemoveViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Removes the specified view part from this view.
            </summary>
            <param name="viewPartReference">The reference to the view part to remove.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.IDockingViewConfiguration">
            <summary>
            Represents a configuration of a docking view, which specifies a specific configuration layout of view parts  within a docking view.
            </summary>
            <remarks>To create a new configuration, create a class extending <see cref="T:Sdl.Desktop.Platform.AbstractDockingViewConfiguration"/> or implement the interface directly
            and annotate it with the <see cref="T:Sdl.Desktop.Platform.DockingViewConfigurationAttribute"/>, specifying the view at which the configuration is targeted.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.IDockingViewConfiguration.UpdateLayout(Sdl.Desktop.Platform.IDockingView)">
            <summary>
            Updates the layout of view parts within the view.
            </summary>
            <remarks>
            <para>Use the <see cref="M:Sdl.Desktop.Platform.IDockingView.SetLayoutInfo(Sdl.Desktop.Platform.IViewPartReference,Sdl.Desktop.Platform.DockingViewPartLayoutInfo)"/> method to set the layout information for specific view parts.</para>
            <para>View parts for which no specific layout is specified, will be layed out using their default layout, if available, or 
            a default layout as specified by the view implementation.</para>
            <para>To explicitly hide a view part within this configuration, call the <see cref="M:Sdl.Desktop.Platform.IDockingView.SetLayoutInfo(Sdl.Desktop.Platform.IViewPartReference,Sdl.Desktop.Platform.DockingViewPartLayoutInfo)"/> method, passing in
            a <see cref="T:Sdl.Desktop.Platform.DockingViewPartLayoutInfo"/> with the <see cref="P:Sdl.Desktop.Platform.DockingViewPartLayoutInfo.Visible"/> property set to false.</para>
            </remarks>
            <param name="view">The view within which to set the layout of the view parts.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.IDockingViewConfigurationReference">
            <summary>
            Reference to a docking view configuration.
            </summary>
            <seealso cref="T:Sdl.Desktop.Platform.IDockingViewConfiguration"/>
        </member>
        <member name="P:Sdl.Desktop.Platform.IDockingViewConfigurationReference.Id">
            <summary>
            Gets the id of the docking view configuration.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IDockingViewConfigurationReference.Name">
            <summary>
            Gets the name of the docking view configuration.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IDockingViewConfigurationReference.Description">
            <summary>
            Gets the description of the docking view configuration.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IDockingViewConfigurationReference.Configuration">
            <summary>
            Gets the actual docking view configuration.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.ImageResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.BrowseUrlAction_Icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.ColorSchemeMenu_Icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.download_bitmap">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.notification">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.notification_count_template">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.notification_no">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.notification_yes">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.Options">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.Plugin">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.Plugins">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.ResetWindowLayout_Icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.RightArrow">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.SdlKnowledgeBase_Icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.SdlVideoTutorials_Icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.transparent">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ImageResources.UserSettings">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.CommandBars.AbstractCommandBarAction.ShowText">
            <summary>
            Gets or sets whether to show the text of this action when it is added to a toolbar.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.CommandBars.AbstractCommandBarItem">
            <summary>
            Abstract base class
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.CommandBars.AbstractCommandBarItem.InsertIntoNativeCommandBarItemCollection(Sdl.Desktop.Platform.CommandBars.INativeCommandBarItemCollection,System.Int32,System.Object)">
            <summary>
            Inserts the specified item at the spedified index in the toolstrip. 
            This method supports specifying index=-1, which adds the item at the end of the toolstrip.
            </summary>
            <param name="nativeCommandBarItemCollection"></param>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.CommandBars.ActionService.GetContextPriority(Sdl.Desktop.Platform.CommandBars.IActionContext)">
            <summary>
            Returns a number indicating whether the current context matches the context the specified action is defined in.
            <list>
            <item>0 means the action is not valid in the current context</item>
            <item>&gt; 0 means the action is valid in the current context, the higher the number, the higher the priority of the action
            in the current context.</item>
            </list>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.CommandBars.Extensions.InternalLocationAttributeBuilder.Build``2(Sdl.Core.PluginFramework.IExtension)">
            <summary>
            Build-up the UI internal attributes
            </summary>
            <typeparam name="TInternalAttribute">Type of the internal location attribute to be built.</typeparam>
            <typeparam name="TTargetAttribute">The target integration extension attribute that can host the UI element.</typeparam>
            <param name="extension">The extension for which the internal attribute is built.</param>
            <returns>A collection with all the internal location attributes of the extension.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.CommandBars.SubToolBar.CreateCommandBarAction(System.String,System.Boolean)">
            <summary>
            Creates a new command bar action.
            </summary>
            <param name="actionId">The id of the action.</param>
            <param name="showText">True if the action's text should be shown on the toolbar.</param>
            <returns>The newly created command bar action.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.CommandBars.SubToolBar.CreateCommandBarActionWithPopup(System.String,System.Boolean)">
            <summary>
            Creates a new command bar action with an associated popup.
            </summary>
            <param name="actionId">The id of the action.</param>
            <param name="showText">True if the action's text should be shown on the toolbar.</param>
            <returns>The newly created command bar action.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.CommandBars.SubToolBar.CreateCommandBarAction(Sdl.Desktop.Platform.CommandBars.IDynamicAction,System.Boolean)">
            <summary>
            Creates a new command bar action.
            </summary>
            <param name="action">The action.</param>
            <param name="showText">True if the action's text should be shown on the toolbar.</param>
            <returns>The newly created command bar action.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.CommandBars.SubToolBar.CreateCommandBarActionWithPopup(Sdl.Desktop.Platform.CommandBars.IDynamicActionWithPopup,System.Boolean)">
            <summary>
            Creates a new command bar action with an associated popup.
            </summary>
            <param name="action">The action.</param>
            <param name="showText">True if the action's text should be shown on the toolbar.</param>
            <returns>The newly created command bar action.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.CommandBars.SubToolBar.ShowToolBarInternal(System.Boolean)">
            <summary>
            Called by the framework to control visibility of a toolbar, indepedently of the <see cref="P:Sdl.Desktop.Platform.Implementation.CommandBars.SubToolBar.Visible"/> property.
            This method should not be called in user code.
            </summary>
            <param name="show"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.CommandBars.SubToolBar.SaveState">
            <summary>
            Saves the docked state of the toolbar
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.DefaultFunctionalityFilter.ShouldLoadPlugin(System.String)">
            <summary>
            Shoulds the load plugin.
            </summary>
            <param name="pluginName">Name of the plugin.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.DefaultFunctionalityFilter.ShouldLoadExtension(Sdl.Core.PluginFramework.IPlugin,System.String)">
            <summary>
            Shoulds the load extension.
            </summary>
            <param name="plugin">The plugin.</param>
            <param name="extensionId">The extension id.</param>
            <returns></returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Exceptions.ExceptionDisplayFilterManager">
            <summary>
            The exception display filters which can be used to customise the error details that are displayed to
            the user for a particular exception.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.Exceptions.ExceptionDisplayFilterManager._exceptionDisplayFilters">
            <summary>
            A collection of <see cref="T:Sdl.Platform.Interfaces.ExceptionHandling.IExceptionDisplayFilter"/> objects, which can be used to filter an 
            exception using the <see cref="M:Sdl.Desktop.Platform.Implementation.Exceptions.ExceptionDisplayFilterManager.GetExceptionDisplayInfo(System.Exception)"/> method.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Exceptions.ExceptionDisplayFilterManager.GetExceptionDisplayInfo(System.Exception)">
            <summary>
            Iterates through the collecion of <see cref="T:Sdl.Platform.Interfaces.ExceptionHandling.IExceptionDisplayFilter"/> objects, returning 
            display information from the first filter that can process the exception.
            </summary>
            <param name="ex">The exception.</param>
            <returns></returns>
        </member>
        <member name="E:Sdl.Desktop.Platform.Implementation.HookManager.KeyPress">
             <summary>
             Occurs when a key is pressed.
             </summary>
             <remarks>
             Key events occur in the following order: 
             <list type="number">
             <item>KeyDown</item>
             <item>KeyPress</item>
             <item>KeyUp</item>
             </list>
            The KeyPress event is not raised by noncharacter keys; however, the noncharacter keys do raise the KeyDown and KeyUp events. 
            Use the KeyChar property to sample keystrokes at run time and to consume or modify a subset of common keystrokes. 
            To handle keyboard events only in your application and not enable other applications to receive keyboard events, 
             set the KeyPressEventArgs.Handled property in your form's KeyPress event-handling method to <b>true</b>. 
             </remarks>
        </member>
        <member name="E:Sdl.Desktop.Platform.Implementation.HookManager.KeyUp">
            <summary>
            Occurs when a key is released. 
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Implementation.HookManager.KeyDown">
            <summary>
            Occurs when a key is preseed. 
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager._keyboardDelegate">
            <summary>
            This field is not objectively needed but we need to keep a reference on a delegate which will be 
            passed to unmanaged code. To avoid GC to clean it up.
            When passing delegates to unmanaged code, they must be kept alive by the managed application 
            until it is guaranteed that they will never be called.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager._keyboardHookHandle">
            <summary>
            Stores the handle to the Keyboard hook procedure.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.HookManager.Point">
            <summary>
            The Point structure defines the X- and Y- coordinates of a point. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/gdi/rectangl_0tiq.asp
            </remarks>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager.Point.X">
            <summary>
            Specifies the X-coordinate of the point. 
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager.Point.Y">
            <summary>
            Specifies the Y-coordinate of the point. 
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.HookManager.MouseLLHookStruct">
            <summary>
            The MSLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager.MouseLLHookStruct.Point">
            <summary>
            Specifies a Point structure that contains the X- and Y-coordinates of the cursor, in screen coordinates. 
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager.MouseLLHookStruct.MouseData">
             <summary>
             If the message is WM_MOUSEWHEEL, the high-order word of this member is the wheel delta. 
             The low-order word is reserved. A positive value indicates that the wheel was rotated forward, 
             away from the user; a negative value indicates that the wheel was rotated backward, toward the user. 
             One wheel click is defined as WHEEL_DELTA, which is 120. 
            If the message is WM_XBUTTONDOWN, WM_XBUTTONUP, WM_XBUTTONDBLCLK, WM_NCXBUTTONDOWN, WM_NCXBUTTONUP,
             or WM_NCXBUTTONDBLCLK, the high-order word specifies which X button was pressed or released, 
             and the low-order word is reserved. This value can be one or more of the following values. Otherwise, MouseData is not used. 
            XBUTTON1
            The first X button was pressed or released.
            XBUTTON2
            The second X button was pressed or released.
             </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager.MouseLLHookStruct.Flags">
             <summary>
             Specifies the event-injected flag. An application can use the following value to test the mouse Flags. Value Purpose 
            LLMHF_INJECTED Test the event-injected flag.  
            0
            Specifies whether the event was injected. The value is 1 if the event was injected; otherwise, it is 0.
            1-15
            Reserved.
             </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager.MouseLLHookStruct.Time">
            <summary>
            Specifies the Time stamp for this message.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager.MouseLLHookStruct.ExtraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.HookManager.KeyboardHookStruct">
            <summary>
            The KBDLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookstructures/cwpstruct.asp
            </remarks>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager.KeyboardHookStruct.VirtualKeyCode">
            <summary>
            Specifies a virtual-key code. The code must be a value in the range 1 to 254. 
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager.KeyboardHookStruct.ScanCode">
            <summary>
            Specifies a hardware scan code for the key. 
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager.KeyboardHookStruct.Flags">
            <summary>
            Specifies the extended-key flag, event-injected flag, context code, and transition-state flag.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager.KeyboardHookStruct.Time">
            <summary>
            Specifies the Time stamp for this message.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.HookManager.KeyboardHookStruct.ExtraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.HookManager.KeyboardHookProc(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            A callback function which will be called every Time a keyboard activity detected.
            </summary>
            <param name="nCode">
            [in] Specifies whether the hook procedure must process the message. 
            If nCode is HC_ACTION, the hook procedure must process the message. 
            If nCode is less than zero, the hook procedure must pass the message to the 
            CallNextHookEx function without further processing and must return the 
            value returned by CallNextHookEx.
            </param>
            <param name="wParam">
            [in] Specifies whether the message was sent by the current thread. 
            If the message was sent by the current thread, it is nonzero; otherwise, it is zero. 
            </param>
            <param name="lParam">
            [in] Pointer to a CWPSTRUCT structure that contains details about the message. 
            </param>
            <returns>
            If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx. 
            If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx 
            and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC 
            hooks will not receive hook notifications and may behave incorrectly as a result. If the hook 
            procedure does not call CallNextHookEx, the return value should be zero. 
            </returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Integration.IntegrationPluginViewPartReference.ZIndex">
            <summary>
            The zero based index positioning of a view part where the highest value has the biggest priority.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Integration.IntegrationViewPartDescriptor.ZIndex">
            <summary>
            The zero based index positioning of a view part where the highest value has the biggest priority.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Notifications.Events.AddGroupNotificationEvent">
            <summary>
            Publish this event through the IEventAggregator in order to add another group of notifications
            to the Notifications View
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Notifications.Events.AddGroupNotificationEvent.#ctor(Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.IGroupNotification)">
            <summary>
            
            </summary>
            <param name="notificationGroup">A notification group</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Events.AddGroupNotificationEvent.NotificationGroup">
            <summary>
            The INotificationGroup that will be added to the Notifications View
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Notifications.Events.AddNotificationToGroupEvent">
            <summary>
            Publish this event through the IEventAggregator in order to add another notification
            to an existing NotificationGroup within the Notifications View 
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Notifications.Events.AddNotificationToGroupEvent.#ctor(System.String,Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotification)">
            <summary>
            
            </summary>
            <param name="groupKey">Unique group identifier</param>
            <param name="notification">A notification</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Events.AddNotificationToGroupEvent.GroupKey">
            <summary>
            Unique Group identifier
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Events.AddNotificationToGroupEvent.Notification">
            <summary>
            The Notification that will be added to the group identified by the GroupKey
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Notifications.Events.NotificationsChangedEvent">
            <summary>
            Publish this event through the IEventAggregator in order to signal a change of notifications
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Notifications.Events.RemoveGroupNotificationEvent">
            <summary>
            Publish this event through the IEventAggregator in order to remove a group of notifications
            from the Notifications View
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Notifications.Events.RemoveGroupNotificationEvent.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="groupKey">Unique group identifier</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Events.RemoveGroupNotificationEvent.GroupKey">
            <summary>
            The unique identifier of the group to be removed
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Notifications.Events.ShowNotificationsViewEvent">
            <summary>
            Publish this event through the IEventAggregator in order to show
            the Notifications View
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Events.ShowNotificationsViewEvent.ShowNotifications">
            <summary>
            Display the notifications control in the current view
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Events.ShowNotificationsViewEvent.SetFocus">
            <summary>
            Sets focus on the notifications control.  
            Useful in cases where the docking location of the view part is set to 
            Auto Hide; retaining focus would keep the view part active on screen as  
            opposed to being dismissed after a 2 second interval.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.IGroupNotification.Title">
            <summary>
            The group title
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.IGroupNotification.Action">
            <summary>
            The ICommand action to be executed when the group action is activated
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.IGroupNotification.IsActionVisible">
            <summary>
            Set this to true if the Action Should be visible
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.IGroupNotification.Key">
            <summary>
            Unique Group Key
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.IGroupNotification.Notifications">
            <summary>
            List of Notifications within the group
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotification.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotification.Title">
            <summary>
            The Title of the Notification
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotification.LinkAction">
            <summary>
            The action to be executed for open HyperLink text
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotification.IsExpanderVisible">
            <summary>
            Set this to True of the Expander should be visible
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotification.IsLinkVisible">
            <summary>
            Set this to True of the Link should be visible
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotification.AlwaysVisibleDetails">
            <summary>
            A list of details that are always visible on the Notification
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotification.OtherDetails">
            <summary>
            Additional notification details visible only if the user wants to have them displayed
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotification.Action">
            <summary>
            The action to be executed for this notification
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotification.IsActionVisible">
            <summary>
            Set this to true if the Action Should be visible
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotification.AllowsUserToDismiss">
            <summary>
            Set this true if the user can remove a notification from the notification group
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotification.ClearNotificationAction">
            <summary>
            The action that will remove this notification
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotificationCommand.CommandToolTip">
            <summary>
            The tooltip for the command
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Notifications.Interfaces.INotificationCommand.CommandIcon">
            <summary>
            The icon for the command
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Notifications.View.GroupNotificationView">
            <summary>
            Interaction logic for GroupNotificationView.xaml
            </summary>
            <summary>
            GroupNotificationView
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Notifications.View.GroupNotificationView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Notifications.View.NotificationInfoView">
            <summary>
            Interaction logic for NotificationInfoView.xaml
            </summary>
            <summary>
            NotificationInfoView
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Notifications.View.NotificationInfoView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Notifications.View.NotificationsView">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            NotificationsView
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Notifications.View.NotificationsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.ObjectResolverComposer">
            <summary>
            It is responsible to compose multiple object resolvers 
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.ObjectResolverComposer.#ctor(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IObjectResolver})">
            <inheritdoc />
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.ObjectResolverComposer.CanResolve(System.Type)">
            <summary>
            Set by default to true
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.ObjectResolverComposer.CreateObject(System.Type,System.Xml.Linq.XElement)">
            <summary>
            Create the object using the object resolver instance that can resolve object
            </summary>
            <param name="objectType">Object type</param>
            <param name="attributeElement"> Attribute from the PluginManifest file</param>
            <returns></returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.CompoundJob.ReportsProgress">
            <summary>
            True if this job request reports progress information.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Services.ExceptionHandling.DisplayExceptionHandler">
            <summary>
            Handles exceptions by displaying them to the user
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Services.ExceptionHandling.LoggingExceptionHandler">
            <summary>
            Handles exceptions by logging them
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Services.ExceptionHandling.TelemetryExceptionHandler">
            <summary>
            Handles exceptions by logging them to telemetry
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Services.HelpService.ShowContextHelp(System.String)">
            <summary>
            Shows the specified help topic in the help viewer.
            </summary>
            <param name="topic">The id of the topic to display as defined in the help map file.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Services.ResourceService">
            <summary>
            Helper class for managing and querying resource files. Based on the type of the object that uses a certain resource,
            the assembly containing the resource is resolved. For string resources, the resource file should be called 'StringResources.resx',
            for image (and other binary) resources, the resources file should be called 'ImageResources.resx'. Once a given resource file
            has been accessed once, the corresponding <see cref="T:System.Resources.ResourceManager"/> object is cached to speed
            up future queries.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.ResourceService.Sdl#Platform#Interfaces#Services#IResourceService#SupportedLanguages">
            <summary>
            Returns the Studio supported UI languages
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Services.ServiceContext.#ctor(Sdl.Desktop.Platform.IStudioWindow,Sdl.Desktop.Platform.Services.IServiceContext)">
            <summary>
            ServiceContext
            </summary>
            <param name="parentServiceContext"></param>
            <param name="window">The window this service is related to. Can be null.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Services.Updater.NoAutoUpdateCommandLineProcessor">
            <summary>
            NoAutoUpdateCommandLineProcessor represents the /noautoupdate parameter that is used to start 
            the application and ensure that it does not automatically check for updates. 
            </summary>
            <remarks>
            "The /noautoupdate [parameter] is used when restart the application from the updater to prevent 
            the application starting the autoupdate again. This would be particularly if the autoupdater
            had an encountered an error preventing update and thus creating an infinite start -> update ->
            fail -> restart loop." Application requirements; Patches and the updater
            </remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.Updater.NoAutoUpdateCommandLineProcessor.NoAutoUpdateParameter">
            <summary>
            Determines whether the /noautoupdate parameter was specified in the command line.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.Updater.NoAutoUpdateCommandLineProcessor.TaskName">
            <summary>
            TaskName property represents the task name.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.Updater.NoAutoUpdateCommandLineProcessor.TaskDescription">
            <summary>
            TaskDescription property represents the task description.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.Updater.NoAutoUpdateCommandLineProcessor.SupportedArguments">
            <summary>
            SupportedArguments property represents the supported arguments.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Services.Updater.NoAutoUpdateCommandLineProcessor.ProcessCommandLine(Sdl.Desktop.Platform.CommandLineArguments)">
            <summary>
            Processes the given command line arguments.
            </summary>
            <param name="commandLineArguments">command line arguments</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateChecker">
            <summary>
            UpdateChecker class is responsible for updating the application using "True Update" as the update client.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateChecker.#ctor(Sdl.Desktop.Platform.Implementation.Services.IUpdateSettings,Sdl.Desktop.Platform.Services.IUpdateClientCaller,Sdl.Desktop.Platform.Interfaces.SystemIO.IFile,Microsoft.Extensions.Logging.ILogger{Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateChecker})">
            <summary>
            Constructor that takes the update settings and the update client caller.
            </summary>
            <param name="updateSettings">updateSettings</param>
            <param name="updateClientCaller">update client caller</param>
            <param name="fileService">wrapper for File</param>
            <param name="updateLog">update log</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateChecker.Start">
            <summary>
            Starts the updater; if it should automatically check for updates then it checks for updates here.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateChecker.AutomaticCheckForUpdateEnabled">
            <summary>
            Determines whether the updater automatically checks for updates when started.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateChecker.CheckForUpdateEnabled">
            <summary>
            Determines whether check for update is enabled.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateChecker.UpdateClientExists">
            <summary>
            Determines whether the update client exists.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateChecker.CheckForUpdate(Sdl.Desktop.Platform.Services.UpdateClientParameters)">
            <summary>
            Checks for updates to the application.
            </summary>
            <param name="updateClientParameters"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateChecker.GetUpdateClientParameters(Sdl.Desktop.Platform.Services.UpdateClientParameters)">
            <summary>
            Gets the update client parameters.
            </summary>
            <param name="updateClientParameters"></param>
            <returns>update client parameters</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateChecker.AutomaticCheckForUpdateUserSettingEnabled">
            <summary>
            Determines whether the user setting specify that the updater should automatically check for updates when started.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateChecker.AutomaticCheckForUpdateUserSettingOptionEnabled">
            <summary>
            Determines whether the user setting option that specifies that the updater should automatically check for updates when started should be enabled.
            </summary>
            <remarks>
            In other words, there is a "Automatically check for updates" user setting option (or checkbox). 
            This property determines whether this user setting option (or checkbox) should be enabled or not.
            </remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateChecker.AutomaticallyDownloadUpdateOptionChecked">
            <summary>
            Determines whether the update is downloaded automatically in the background.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateClientCaller">
            <summary>
            UpdateClientCaller represents an implementation for calling the update client.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateClientCaller.IsRunning(System.String)">
            <summary>
            Checks if there is at least a process with the given name running.
            </summary>
            <param name="processFilePath">the name of the process that will be checked if is running</param>
            <returns>True if there is at least one process running and False if there isn't any process with the given name running</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateClientCaller.Call(System.String,System.String)">
            <summary>
            Calls the update client.
            </summary>
            <param name="updateClientFilePath">update client file path</param>
            <param name="updateClientParameters">update client parameters</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateUserSettingsGroup">
            <summary>
            UpdateUserSettingsGroup represents an update user settings group.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.Updater.UpdateUserSettingsGroup.AutomaticCheckForUpdate">
            <summary>
            Determines whether the application automatically checks for updates when started.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Services.UpdateService">
            <summary>
            UpdateService represents an implementation of the update service that is responsible for updating the application
            using "True Update" as the update client.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.UpdateService.AutomaticCheckForUpdateEnabled">
            <summary>
            Determines whether the service automatically checks for updates when started.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.UpdateService.AutomaticCheckForUpdateUserSettingEnabled">
            <summary>
            Determines whether the user setting specify that the service should automatically check for updates when started.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.UpdateService.AutomaticCheckForUpdateUserSettingOptionEnabled">
            <summary>
            Determines whether the user setting option that specifies that the service should automatically check for updates when started should be enabled.
            </summary>
            <remarks>
            In other words, there is a "Automatically check for updates" user setting option (or checkbox). 
            This property determines whether this user setting option (or checkbox) should be enabled or not.
            </remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.UpdateService.CheckForUpdateEnabled">
            <summary>
            Determines whether check for update is enabled.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Services.UpdateService.OnStart">
            <summary>
            Automatically checks for updates when the service starts.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Services.UpdateService.AutomaticUpdateCheck">
            <summary>
            Call to perform the initial automatic check for updates, if the user has them enabled.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Services.UpdateService.CheckForUpdate(Sdl.Desktop.Platform.Services.UpdateClientParameters)">
            <summary>
            Checks for updates to the application.
            </summary>
            <param name="updateClientParameters"></param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Services.IUpdateSettings">
            <summary>
            IUpdateSettings represents an interface to the update settings.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.IUpdateSettings.CheckForUpdateGroupPolicy">
            <summary>
            Determines whether the group policy specify that the updater should allow and automatically check for updates when started.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.IUpdateSettings.CheckForUpdateUserSetting">
            <summary>
            Determines whether the user setting specify that the updater should automatically check for updates when started.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.IUpdateSettings.AutomaticallyDownloadUpdate">
            <summary>
            Determines whether the update is downloaded automatically in the background.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.IUpdateSettings.NoAutoUpdate">
            <summary>
            Determines whether the /noautoupdate parameter was specified in the command line.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.IUpdateSettings.UpdateClientFilePath">
            <summary>
            Gets the update client file path.
            </summary>
            <returns>update client file path</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.IUpdateSettings.FilteredUpdateFilePath">
            <summary>
            Gets the filtered update info file path.
            </summary>
            <returns>update client file path</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Services.UpdateSettings">
            <summary>
            UpdateSettings represents an implementation of update settings.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.UpdateSettings.CheckForUpdateGroupPolicy">
            <summary>
            Determines whether the group policy specify that the updater should allow and automatically check for updates when started.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.UpdateSettings.CheckForUpdateUserSetting">
            <summary>
            Determines whether the user setting specify that the updater should automatically check for updates when started.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.UpdateSettings.NoAutoUpdate">
            <summary>
            Determines whether the /noautoupdate parameter was specified in the command line.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.UpdateSettings.UpdateClientFilePath">
            <summary>
            Gets the update client file path.
            </summary>
            <returns>update client file path</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.UpdateSettings.FilteredUpdateFilePath">
            <summary>
            Gets the filtered update info file path.
            </summary>
            <returns>update client file path</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Services.UpdateSettings.UpdateUserSettings">
            <summary>
            UpdateUserSettings represents the update user settings.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.AbstractSettingsHost.AddBlankGeneralSettingsPage(Sdl.Desktop.Platform.Settings.ISettingsPageCategory)">
            <summary>
            Adds a blank general settings page that instructs the user to select a child node.
            </summary>
            <param name="category">category</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.AbstractSettingsHost.HasGeneralSettingsPage(Sdl.Desktop.Platform.Settings.ISettingsPageCategory)">
            <summary>
            Determines whether the given category has a general settings page.
            </summary>
            <param name="category">category</param>
            <returns>whether it has a general settings page</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.AbstractSettingsHost.IsGeneralText(System.String)">
            <summary>
            Determines whether the given text is "General" in the target language or in English.
            </summary>
            <param name="text">text</param>
            <returns>whether text is "General"</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Settings.ColorsSettingsPageCategory">
            <summary>
            The colors page category in the settings dialog.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.ColorsSettingsPageCategory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsGeneralSettingsPage">
            <summary>
            Settings page for defining custom keyboard shortcuts for actions
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsGeneralSettingsPage.#ctor(System.String,Sdl.Desktop.Platform.CommandBars.ActionInfoCollection)">
            <summary>
            Constructor which takes the shortcuts name and all the actions that are currently registered to the system
            (for validation purposes).
            </summary>
            <param name="shortcutsName">shortcuts name</param>
            <param name="allActions">all actions</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsGeneralSettingsPage.AddAction(Sdl.Desktop.Platform.CommandBars.IActionInfo)">
            <summary>
            Adds an action to the control to display on screen with its shortcut
            </summary>
            <param name="actionInfo"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsGeneralSettingsPage.GetControl">
            <summary>
            Gets the underlying control
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsGeneralSettingsPage.ResetToDefaults">
            <summary>
            Resets all shortcuts to their default settings
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsGeneralSettingsPage.ValidateInput">
            <summary>
            Validates the shortcuts that have been changed to make sure that they don't conflict with
            any other shortcuts registered in the same scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsGeneralSettingsPage.Save">
            <summary>
            Saves all changed shortcuts to the current user profile.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsGeneralSettingsPage.SortActions">
            <summary>
            Sorts the actions in ascending order.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutSettingsPageControl">
            <summary>
            Control that allows users to change the keyboard settings for all registered actions.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutSettingsPageControl.#ctor(System.String,Sdl.Desktop.Platform.CommandBars.ActionInfoCollection)">
            <summary>
            Constructor that takes the shortcuts name and all the actions that are registered to the system
            </summary>
            <param name="shortcutsName">shortcuts name</param>
            <param name="allActions">all actions</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutSettingsPageControl.SetAction(Sdl.Desktop.Platform.CommandBars.IActionInfo)">
            <summary>
            Sets an action to the control and adds it to the actions table with its current shortcuts
            </summary>
            <param name="actionInfo"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutSettingsPageControl.SaveChangedActions">
            <summary>
            Saves all the actions that were changed in the control to the user's settings file
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutSettingsPageControl.SortActions">
            <summary>
            Sorts the actions in ascending order.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutSettingsPageControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutSettingsPageControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutSettingsPageControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsSettingsPageCategory">
            <summary>
            The keyboard shortcut page category in the settings dialog.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsSettingsPageCategory.OnInit(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)">
            <summary>
            Called when the category is initialized, sets the actions and loads the settings pages.
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsSettingsPageCategory.AddGeneralSettingsPage(System.Collections.Generic.IDictionary{System.String,Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsGeneralSettingsPage},Sdl.Desktop.Platform.CommandBars.ActionInfoCollection)">
            <summary>
            Adds a general settings page to the category shortcuts with the given actions.
            </summary>
            <param name="categoryShortcuts">category shortcuts</param>
            <param name="actions">actions</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsSettingsPageCategory.GetAllShortcutsSettingsPage(Sdl.Desktop.Platform.CommandBars.ActionInfoCollection)">
            <summary>
            Gets a all shortcuts settings page from thee given actions.
            </summary>
            <param name="actions">actions</param>
            <returns>all shortcuts settings page</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsSettingsPageCategory.GeneralStringComparer">
            <summary>
            GeneralStringComparer class is a string comparer that always sorts "General" as the first item.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.KeyboardShortcutsSettingsPageCategory.GeneralStringComparer.Compare(System.String,System.String)">
            <summary>
            Compares the two given strings.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <returns>comparison</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPage">
            <summary>
            UpdateSettingsPage class represents the update settings page.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPage.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPage.HasDefaultSettings">
            <summary>
            Determines whether it has default settings.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPage.GetControl">
            <summary>
            Gets the control.
            </summary>
            <returns>control</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPage.ResetToDefaults">
            <summary>
            Resets the settings.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPage.Save">
            <summary>
            Saves the settings.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPageCategory">
            <summary>
            UpdateSettingsPageCategory class represents the update settings page category.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPageCategory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPageCategory.OnInit(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)">
            <summary>
            Handles the init event; adds the settings page.
            </summary>
            <param name="site">site</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPageView">
            <summary>
            Interaction logic for UpdateSettingsPageView.xaml
            </summary>
            <summary>
            UpdateSettingsPageView
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPageView.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPageView.AutomaticallyCheckForUpdatesChecked">
            <summary>
            AutomaticallyCheckForUpdatesChecked property represents whether the user wants to automatically check for updates.
            </summary>
            <summary>
            AutomaticallyCheckForUpdatesChecked property represents whether the user wants to automatically check for updates.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPageView.ManuallyCheckForUpdatesOptionChecked">
            <summary>
            ManuallyCheckForUpdatesOptionChecked property represents whether the automatically check for updates option is enabled.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.UpdateSettingsPageView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Implementation.Settings.UserProfilesView">
            <summary>
            Interaction logic for UserProfilesView.xaml
            </summary>
            <summary>
            UserProfilesView
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.UserProfilesView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.Settings.UserProfilesViewModel.UpdateCurrentUserProfile">
            <summary>
            Updates the current user profile in the User Settings Service.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.StudioWindow.ActiveView">
            <summary>
            Gets or sets the currently active view (reference). Can return null is there is not view enabled or available.
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentException">Thrown when trying to set a view that is disabled or not available.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Implementation.SystemIO.DirectoryWrapper.DirectoryContainsFiles(System.String)">
            <summary>
            Checks whether the specified directory contains any files, in a reasonably efficient way.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Implementation.ViewReference.IsInitialized">
            <summary>
            Returns whether the view part associated with this view part reference has been initialized (see also <see cref="P:Sdl.Desktop.Platform.Implementation.ViewReference.View"/>).
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.WindowsApi.Constants.WH_KEYBOARD_LL">
            <summary>
            Windows NT/2000/XP: Installs a hook procedure that monitors low-level keyboard  input events.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.WindowsApi.Constants.WH_KEYBOARD">
            <summary>
            Installs a hook procedure that monitors keystroke messages. For more information, see the KeyboardProc hook procedure. 
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.WindowsApi.Constants.WM_KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem 
            key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.WindowsApi.Constants.WM_KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem 
            key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, 
            or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.WindowsApi.Constants.WM_SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user 
            presses the F10 key (which activates the menu bar) or holds down the ALT key and then 
            presses another key. It also occurs when no window currently has the keyboard focus; 
            in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that 
            receives the message can distinguish between these two contexts by checking the context 
            code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Implementation.WindowsApi.Constants.WM_SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user 
            releases a key that was pressed while the ALT key was held down. It also occurs when no 
            window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent 
            to the active window. The window that receives the message can distinguish between 
            these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.AbstractDataSourceCondition">
            <summary>
            Abstract base class for settings bundle conditions.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractDataSourceCondition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.AbstractDataSourceCondition"/> class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.AbstractDataSourceCondition.DataSource">
            <summary>
            Gets or sets the service context this condition should use to determine its value.
            </summary>
            <value></value>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractDataSourceCondition.OnSettingsBundleChanged">
            <summary>
            Called when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.AbstractDataSourceCondition.DataSource"/> property changes.
            </summary>
            <remarks>Override this method to perform initialization dependent on the data source.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory">
            <summary>
            Abstract base class for settings page categories.
            </summary>
            <remarks>In order to add a new settings page category to the studio, create a new class extending <see cref="T:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory"/>
            and mark it with the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageCategoryAttribute"/> extension attribute. You can programmatically added settings pages using the <see cref="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.AddSettingsPage(Sdl.Desktop.Platform.Settings.ISettingsPageReference)"/>
            method by overriding <see cref="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.OnInit(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)"/>, which will be called when the settings page category is initialized. Any setting page extensions
            will be automatically added.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.SettingsPageAdded">
            <summary>
            Raised when a settings page is added to this category.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.SettingsPageRemoved">
            <summary>
            Raised when a settings page is removed from this category.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.Site">
            <summary>
            Gets the site of the settings page category.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.Init(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)">
            <summary>
            Called by the framework right after this settings page category has been created.
            </summary>
            <param name="site">The site of this settings page category.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.IsInitialized">
            <summary>
            Returns true after <see cref="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.Init(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)"/> has been called.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.OnInit(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)">
            <summary>
            Called by the framework right after this settings page category has been created and the registered pages have been added.
            </summary>
            <param name="site">The site of this settings page category.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.ShouldDisplayExtensionPage(System.String)">
            <summary>
            Called when adding in a settings page defined by an extension (i.e. the SettingsPageAttribute extension attribute).
            Always returns true here. Can be overridden by a specific settings page category class if the 
            settings page should only be shown in certain circumstances.
            </summary>
            <param name="settingsPageId">The settings page id.</param>
            <returns>true if the settings page should be displayed.</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.SettingsPages">
            <summary>
            Gets the collection of settings pages that are part of this category.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.AddSettingsPage(Sdl.Desktop.Platform.Settings.ISettingsPageReference)">
            <summary>
            Adds a new settings page to this category.
            </summary>
            <remarks>Call this method within the <see cref="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.OnInit(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)"/> method to add default settings pages.</remarks>
            <param name="settingsPageReference">A reference to the settings page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="settingsPageReference"/> is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.InsertSettingsPage(System.Int32,Sdl.Desktop.Platform.Settings.ISettingsPageReference)">
            <summary>
            Inserts a new settings page into this category.
            </summary>
            <param name="index">The index within the <see cref="P:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.SettingsPages"/> collection.</param>
            <param name="settingsPageReference">A reference to the settings page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="settingsPageReference"/> is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.RemoveSettingsPage(Sdl.Desktop.Platform.Settings.ISettingsPageReference)">
            <summary>
            Removes the specified settings page from this category.
            </summary>
            <param name="settingsPageReference">A reference to the settings page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="settingsPageReference"/> is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.OnClose">
            <summary>
            Called when the settings host is closed.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.SettingsPageCategoryAdded">
            <summary>
            Raised when a settings page category is added.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.SettingsPageCategoryRemoved">
            <summary>
            Raised when a settings page category is removed.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.SettingsPageCategoryMoved">
            <summary>
            Raised when a settings page category is moved.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.SettingsPageCategories">
            <summary>
            Gets the read-only collection of setting page categories.
            </summary>
            <value></value>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.AddSettingsPageCategory(Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference)">
            <summary>
            Adds a new settings page category to this container.
            </summary>
            <param name="settingsPageCategoryReference">A reference to the settings page category.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="settingsPageCategoryReference"/> is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.InsertSettingsPageCategory(System.Int32,Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference)">
            <summary>
            Inserts a new settings page category into this container.
            </summary>
            <param name="index">The index within the <see cref="P:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.SettingsPageCategories"/> collection.</param>
            <param name="settingsPageCategoryReference">A reference to the settings page category.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="settingsPageCategoryReference"/> is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.RemoveSettingsPageCategory(Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference)">
            <summary>
            Removes the specified settings page category from this container.
            </summary>
            <param name="settingsPageCategoryReference">A reference to the settings page category.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="settingsPageCategoryReference"/> is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.MoveSettingsPageCategory(System.Int32,System.Int32)">
            <summary>
            Moves a settings page category.
            </summary>
            <param name="fromIndex">The index of the settings page category to move</param>
            <param name="toIndex">The new location for the settings page category.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.DefaultSettingInheritanceFormatter">
            <summary>
            Setting inheritance formatter which visualizes whether a setting's value is inherited by setting
            the font of the control to bold.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.DefaultSettingInheritanceFormatter.#ctor(System.Windows.Forms.IBindableComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.DefaultSettingInheritanceFormatter"/> class.
            </summary>
            <param name="control">The control the which the setting will be bound.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.DefaultSettingInheritanceFormatter.Format(System.Windows.Forms.IBindableComponent,System.String,Sdl.Core.Settings.ISettingsGroup,System.String,System.Boolean)">
            <summary>
            Called by the settings binding mechanism when binding to the setting initially
            and whenever the settings value changes afterwards.
            </summary>
            <param name="control">The control to which the setting is bound.</param>
            <param name="propertyName">The property of the control to which the setting is bound.</param>
            <param name="settingsGroup">The settings group to which the bound setting belongs.</param>
            <param name="settingId">The id of the bound setting.</param>
            <param name="inherited">True if the settings value is inherited from a parent settings group or from a default value.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.DefaultSettingInheritanceFormatter.Mode">
            <summary>
            Specifies when the formatter should be called.
            </summary>
            <value></value>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference">
            <summary>
            Generic implementation of the settings page reference interface (<see cref="T:Sdl.Desktop.Platform.Settings.ISettingsPageReference"/>).
            </summary>
            <remarks>This class can be used to dynamically add a setting page to a setting page category.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.#ctor(Sdl.Desktop.Platform.Settings.ISettingsPageCategory,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageReference`1"/> class.
            </summary>
            <param name="category">The settings page category represented by this reference.</param>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.#ctor(Sdl.Desktop.Platform.Settings.ISettingsPageCategory,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageReference`1"/> class.
            </summary>
            <param name="category">The settings page category represented by this reference.</param>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="helpTopic">The associated HelpTopic.</param>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.NameChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.Name"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.DescriptionChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.Description"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.IconChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.Icon"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.Id">
            <summary>
            Gets or sets the unique id of the setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.UniqueId">
            <summary>
            Gets an id, which uniquely identifies this settings page category within the parent category.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.Name">
            <summary>
            Gets or sets the friendly name of this setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.Description">
            <summary>
            Gets or sets the description of this setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.Icon">
            <summary>
            Gets or sets an icon representing this setting page. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.HelpTopic">
            <summary>
            Gets the HelpTopic of this setting page category. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.Parent">
            <summary>
            Gets the parent settings category. Returns null if there is no parent settings category.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.SettingsPageCategory">
            <summary>
            Returns the actual setting page category object.
            </summary>
            <value></value>
            <remarks>When getting this property for the first time, an instance of the setting page category object is created and
            the <see cref="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.Init(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)"/> method is called to initialize the setting page category. Any subsequent
            queries return the same instance.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.IsInitialized">
            <summary>
            Returns whether the setting page associated with this setting page reference has been initialized (see also <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.SettingsPageCategory"/>).
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.OnNameChanged">
            <summary>
            Called when the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.Name"/> property changes. Raises the <see cref="E:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.NameChanged"/> event.
            </summary>
            <remarks>Override this method to perform additional processing. Make sure to call the base class method so the event gets raised.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.OnDescriptionChanged">
            <summary>
            Called when the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.Description"/> property changes. Raises the <see cref="E:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.DescriptionChanged"/> event.
            </summary>
            <remarks>Override this method to perform additional processing. Make sure to call the base class method so the event gets raised.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.OnIconChanged">
            <summary>
            Called when the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.Icon"/> property changes. Raises the <see cref="E:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference.IconChanged"/> event.
            </summary>
            <remarks>Override this method to perform additional processing. Make sure to call the base class method so the event gets raised.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SettingsPageReference">
            <summary>
            Generic implementation of the settings page reference interface (<see cref="T:Sdl.Desktop.Platform.Settings.ISettingsPageReference"/>).
            </summary>
            <remarks>This class can be used to dynamically add a setting page to a setting page category.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference.#ctor(Sdl.Core.Settings.ISettingsPage,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageReference`1"/> class.
            </summary>
            <param name="settingsPage">The settings page represented by this reference.</param>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="helpTopic">A helptopic id.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference.#ctor(Sdl.Core.Settings.ISettingsPage,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageReference`1"/> class.
            </summary>
            <param name="settingsPage">The settings page represented by this reference.</param>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageReference`1"/> class.
            </summary>
            <param name="settingsPageTypeName">The type name of the settings page represented by this reference.</param>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="helpTopic">A help topic id.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageReference`1"/> class.
            </summary>
            <param name="settingsPageTypeName">The fullu qualfied type name of the settings page. This must be an <see cref="T:Sdl.Core.Settings.ISettingsPage"/>.</param>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SettingsPageReference.NameChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.Name"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SettingsPageReference.DescriptionChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.Description"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SettingsPageReference.IconChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.Icon"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.Id">
            <summary>
            Gets or sets the unique id of the setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.UniqueId">
            <summary>
            Gets an id, which uniquely identifies this settings page within the parent category.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.Name">
            <summary>
            Gets or sets the friendly name of this setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.Description">
            <summary>
            Gets or sets the description of this setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.Icon">
            <summary>
            Gets or sets an icon representing this setting page. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.HelpTopic">
            <summary>
            Gets or sets the help topic associated with this setting page
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.Category">
            <summary>
            Gets or sets the category to which this settings page belongs.
            </summary>
            <remarks>This property is set automtically when this page is added to a category and should never be set in user code.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.IsInitialized">
            <summary>
            Returns whether the setting page associated with this setting page reference has been initialized (see also <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.SettingsPage"/>).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.SettingsPage">
            <summary>
            Returns the setting page associated with this setting page reference. When this property is called for the first time
            a new instance of the setting page type specified by the generic parameter T is created. Subsequent calls to this property
            return that same instance.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference.OnNameChanged">
            <summary>
            Called when the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.Name"/> property changes. Raises the <see cref="E:Sdl.Desktop.Platform.Settings.SettingsPageReference.NameChanged"/> event.
            </summary>
            <remarks>Override this method to perform additional processing. Make sure to call the base class method so the event gets raised.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference.OnDescriptionChanged">
            <summary>
            Called when the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.Description"/> property changes. Raises the <see cref="E:Sdl.Desktop.Platform.Settings.SettingsPageReference.DescriptionChanged"/> event.
            </summary>
            <remarks>Override this method to perform additional processing. Make sure to call the base class method so the event gets raised.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference.OnIconChanged">
            <summary>
            Called when the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference.Icon"/> property changes. Raises the <see cref="E:Sdl.Desktop.Platform.Settings.SettingsPageReference.IconChanged"/> event.
            </summary>
            <remarks>Override this method to perform additional processing. Make sure to call the base class method so the event gets raised.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost">
            <summary>
            Represents the settings dialog hosting a number of settings pages.
            </summary>
            <remarks>This dialog can be shown programmatically using <see cref="M:Sdl.Desktop.Platform.IStudioWindow.ShowUserSettingsDialog"/>.</remarks>
            <seealso cref="T:Sdl.Desktop.Platform.Settings.ISettingsPageReference"/>
            <seealso cref="T:Sdl.Core.Settings.ISettingsPage"/>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.Saved">
            <summary>
            Raised when the dialog is confirmed, after all settings pages have been validated and saved.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.Canceled">
            <summary>
            Raised when the dialog has been cancelled, after <see cref="M:Sdl.Core.Settings.ISettingsPage.Cancel"/> has been called for all initialized pages.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.InitializingSettingsPage">
            <summary>
            Raised before a settings page is initialized
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.InitializingSettingsPageCategory">
            <summary>
            Raised before a settings page category is initialized (<see cref="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.Init(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)"/>).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.ServiceContext">
            <summary>
            Gets the service context to which this settings host is linked.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.NativeDialog">
            <summary>
            Gets a reference to the underlying native dialog.
            </summary>
            <remarks>Returns null before the dialog is visible.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.DataSource">
            <summary>
            Gets the data source.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.Filter">
            <summary>
            Gets the settings UI filter, which is used to determine which pages and categories are displayed. Can be null; in that case, 
            all available settings pages an categories are displayed.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.ActiveSettingsPageCategory">
            <summary>
            Gets or sets the active settings page category.
            </summary>
            <remarks>This will change the active settings page to the first setting page of the category.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.ActiveSettingsPage">
            <summary>
            Gets or sets the active settings page.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.ActivateSettingsPage(System.String[])">
            <summary>
            Activates the settings page identified by the given path.
            </summary>
            <param name="path">An array consisting of all ancestor settings page category IDs, 
            with the last element being the ID of the settings page itself</param>
            <returns>The settings page that was activated.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.ActivateSettingsPageCategory(System.String[])">
            <summary>
            Activates the settings page category identified by the given path.
            </summary>
            <param name="path">An array consisting of all ancestor settings page category IDs, 
            with the last element being the ID of the settings page category itself</param>
            <returns>The settings page category that was activated.</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.ActiveSettingsPageCategoryId">
            <summary>
            Sets the active settings page category ID.
            </summary>
            <remarks>This will change the active settings page to the first setting page of the category.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.ActiveSettingsPageId">
            <summary>
            Sets the active settings page ID.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.DisplaySingleRootCategoryNode">
            <summary>
            Gets or sets whether a single root category node is displayed. When false, in case there is only a single root category to display,
            this will be hidden, and its child page and category nodes will be displayed on the root level instead. This is set to <code>true</code> by default.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.AlwaysShowSettingsHierarchy">
            <summary>
            Gets or sets whether the settings hierarchy is shown, event if it only contains a single settings page. True by default.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.GetInitializedCategory(Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference)">
            <summary>
            Gets the category implementation for the specified reference, making sure that <see cref="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.Init(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)"/> has been called.
            </summary>
            <param name="r">A settings page category reference.</param>
            <returns>The initialized category. Always returns the same instance.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.GetInitializedPage(Sdl.Desktop.Platform.Settings.ISettingsPageReference)">
            <summary>
            Gets the page implementation for the specified reference, making sure that the settings page has been initialised.
            </summary>
            <param name="r">A settings page reference.</param>
            <returns>The initialized settings page. Always returns the same instance.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.IBlankSettingsPage">
            <summary>
            IBlankSettingsPage interface is a marker interface for blank settings pages.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.IDataSourceCondition">
            <summary>
            Condition which value is based on a settings bundle.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.IDataSourceCondition.DataSource">
            <summary>
            Gets or sets the service context this condition should use to determine its value.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.ISettingInheritanceFormatter">
            <summary>
            Implement this interface if you want to control how to visualize 
            whether a certain databound setting is inherited or not.
            Use one of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsBinder"/> methods to bind a settings to a control property, passing in the formatter
            to visually modify or format the control  to reflect whether the bound settings value is inherited or defined locally.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingInheritanceFormatter.Format(System.Windows.Forms.IBindableComponent,System.String,Sdl.Core.Settings.ISettingsGroup,System.String,System.Boolean)">
            <summary>
            Called by the settings binding mechanism when binding to the setting initially
            and whenever the settings value changes afterwards.
            </summary>
            <param name="control">The control to which the setting is bound.</param>
            <param name="propertyName">The property of the control to which the setting is bound.</param>
            <param name="settingId">The id of the bound setting.</param>
            <param name="settingsGroup">The settings group to which the bound setting belongs.</param>
            <param name="inherited">True if the settings value is inherited from a parent settings group or from a default value.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingInheritanceFormatter.Mode">
            <summary>
            Specifies when the formatter should be called.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SettingInheritanceFormatMode">
            <summary>
            Specifies when the formatter should be called.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Settings.SettingInheritanceFormatMode.OnSettingChanged">
            <summary>
            The formatter should be called whenever the value of a setting changes.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Settings.SettingInheritanceFormatMode.OnInheritanceChanged">
            <summary>
            The formatter should only be called when the setting value changes from the default value to another value or vice versa, but
            not necessarily for every setting value change. 
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.ISettingsControl">
            <summary>
            A standalone settings control, which can be used to host the standard settings user interface
            in a separate control, rather than in the standard settings dialog.
            </summary>
            <remarks>You can create a settings control using <see cref="M:Sdl.Desktop.Platform.ISettingsDialogFactory.CreateSettingsControl(System.Object)"/>.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsControl.Control">
            <summary>
            Gets the actual Windows Forms control, which can be added to a Windows Forms container control.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsControl.Save">
            <summary>
            Saves the changes  made to the settings.
            </summary>
            <returns>True if changes were saved successfully; false if validation errors have occurred.
            An error message should have been shown when this happens.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsControl.Cancel">
            <summary>
            Cancels the changes made to the settings. This will not actually revert the settings displayed in the control; 
            the control should be disposed after calling this method.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsControl.Help">
            <summary>
            Shows help for the current settings page.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.ISettingsDialog">
            <summary>
            Represents the settings dialog hosting a number of settings pages.
            </summary>
            <remarks>This dialog can be shown programmatically using <see cref="M:Sdl.Desktop.Platform.IStudioWindow.ShowUserSettingsDialog"/>.</remarks>
            <seealso cref="T:Sdl.Desktop.Platform.Settings.ISettingsPageReference"/>
            <seealso cref="T:Sdl.Core.Settings.ISettingsPage"/>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsDialog.HasDefaultSettings">
            <summary>
            Sets the flag that determines whether the 'Reset To Default' button is displayed.
            </summary>
            <remarks>This should be set before the call to 'ShowDialog'.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsDialog.Title">
            <summary>
            Gets or sets the itle of the dialog.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Show the settings dialog. Returns true if the user confirmed the dialog, false otherwise.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.ISettingsPageCategory">
            <summary>
            Represents a settings page category, which combines a number of settings pages.
            </summary>
            <remarks>In order to add a new settings page category to the studio, create a new class extending <see cref="T:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory"/>
            and mark it with the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageCategoryAttribute"/> extension attribute. You can programmatically added settings pages using the <see cref="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.AddSettingsPage(Sdl.Desktop.Platform.Settings.ISettingsPageReference)"/>
            method by overriding <see cref="M:Sdl.Desktop.Platform.Settings.AbstractSettingsPageCategory.OnInit(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)"/>, which will be called when the settings page category is initialized. Any setting page extensions
            will be automatically added.</remarks>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.SettingsPageAdded">
            <summary>
            Raised when a settings page is added to this category.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.SettingsPageRemoved">
            <summary>
            Raised when a settings page is removed from this category.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.Site">
            <summary>
            Returns the site of this settings page category.
            </summary>
            <remarks>The site is the interface between this settings page category and the settings dialog.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.Init(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)">
            <summary>
            Called right after this settings page has been created.
            </summary>
            <param name="site">The interface between this settings page and the settings dialog on which the page will be displayed.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when calling the method multiple times.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.IsInitialized">
            <summary>
            Returns true after <see cref="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.Init(Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite)"/> has been called.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.SettingsPages">
            <summary>
            Gets the read-only collection of setting page references.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.AddSettingsPage(Sdl.Desktop.Platform.Settings.ISettingsPageReference)">
            <summary>
            Adds a new settings page to this category.
            </summary>
            <param name="settingsPageReference">A reference to the settings page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="settingsPageReference"/> is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.InsertSettingsPage(System.Int32,Sdl.Desktop.Platform.Settings.ISettingsPageReference)">
            <summary>
            Inserts a new settings page into this category.
            </summary>
            <param name="index">The index within the <see cref="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.SettingsPages"/> collection.</param>
            <param name="settingsPageReference">A reference to the settings page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="settingsPageReference"/> is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.RemoveSettingsPage(Sdl.Desktop.Platform.Settings.ISettingsPageReference)">
            <summary>
            Removes the specified settings page from this category.
            </summary>
            <param name="settingsPageReference">A reference to the settings page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="settingsPageReference"/> is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategory.OnClose">
            <summary>
            Called when the settings host is closed.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryContainer">
            <summary>
            Base interfaces for object that can contain a number of settings page categories.
            There are two extending interfaces:
            <list>
            <item><see cref="T:Sdl.Desktop.Platform.Settings.ISettingsDialog"/></item>
            <item><see cref="T:Sdl.Desktop.Platform.Settings.ISettingsPageCategory"/></item>
            </list>
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryContainer.SettingsPageCategoryAdded">
            <summary>
            Raised when a settings page category is added.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryContainer.SettingsPageCategoryRemoved">
            <summary>
            Raised when a settings page category is removed.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryContainer.SettingsPageCategoryMoved">
            <summary>
            Raised when a settings page category is moved.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryContainer.SettingsPageCategories">
            <summary>
            Gets the read-only collection of setting page categories.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryContainer.AddSettingsPageCategory(Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference)">
            <summary>
            Adds a new settings page category to this container.
            </summary>
            <param name="settingsPageCategoryReference">A reference to the settings page category.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="settingsPageCategoryReference"/> is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryContainer.InsertSettingsPageCategory(System.Int32,Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference)">
            <summary>
            Inserts a new settings page category into this container.
            </summary>
            <param name="index">The index within the <see cref="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryContainer.SettingsPageCategories"/> collection.</param>
            <param name="settingsPageCategoryReference">A reference to the settings page category.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="settingsPageCategoryReference"/> is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryContainer.RemoveSettingsPageCategory(Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference)">
            <summary>
            Removes the specified settings page category from this container.
            </summary>
            <param name="settingsPageCategoryReference">A reference to the settings page category.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="settingsPageCategoryReference"/> is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryContainer.MoveSettingsPageCategory(System.Int32,System.Int32)">
            <summary>
            Moves a settings page category.
            </summary>
            <param name="fromIndex">The index of the settings page category to move</param>
            <param name="toIndex">The new location for the settings page category.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference">
            <summary>
            A reference to a setting page category object.
            </summary>
            <remarks>This allows maintaining a collection of setting page categories without actually instantiating 
            the setting page category objects themselves.</remarks>
            <seealso cref="T:Sdl.Desktop.Platform.Settings.ISettingsPageCategory"/>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.NameChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.Name"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.DescriptionChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.Description"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.IconChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.Icon"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.Id">
            <summary>
            Gets the id of this setting page category. This identifies this settings page category, but is not necessarily unique within
            the parent category, since multiple instances of the same category could exist.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.UniqueId">
            <summary>
            Gets an id, which uniquely identifies this settings page category within the parent category.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.Name">
            <summary>
            Gets the display name of this setting page category.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.Description">
            <summary>
            Gets the description of this setting page category.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.Icon">
            <summary>
            Gets the icon of this setting page category. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.HelpTopic">
            <summary>
            Gets the HelpTopic of this setting page category. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.Parent">
            <summary>
            Gets or sets the parent settings category. Returns null if there is no parent settings category.
            </summary>
            <remarks>This property is set automatically when this category is added to its parent category and should never be set in user code.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.SettingsPageCategory">
            <summary>
            Returns the actual setting page category object.
            </summary>
            <remarks>The framework will initialize this settings page the first time it is shown.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference.IsInitialized">
            <summary>
            True of the underlying setting page category object has been created.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite">
            <summary>
            Represents the interface between a settings page category and the settings page dialog it is part of.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite.ServiceContext">
            <summary>
            Gets the service context to which this settings page category's host is linked.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite.Host">
            <summary>
            Gets the host on which the category is displayed.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite.DataSource">
            <summary>
            Gets the data source.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageCategorySite.Reference">
            <summary>
            Gets the settings page category reference for this category.
            </summary>
            <remarks>Can be used to access the setting page category name and other meta data.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.ISettingsPageReference">
            <summary>
            A reference to a setting page object.
            </summary>
            <remarks>This allows maintaining a collection of setting pages without actually instantiating 
            the setting page objects themselves.</remarks>
            <seealso cref="T:Sdl.Core.Settings.ISettingsPage"/>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.ISettingsPageReference.NameChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.ISettingsPageReference.Name"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.ISettingsPageReference.DescriptionChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.ISettingsPageReference.Description"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.ISettingsPageReference.IconChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.ISettingsPageReference.Icon"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageReference.Id">
            <summary>
            Gets the id of this setting page. This identifies this settings page, but is not necessarily unique within
            the parent category, since multiple instances of the same page could exist.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageReference.UniqueId">
            <summary>
            Gets an id, which uniquely identifies this settings page within the parent category.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageReference.Name">
            <summary>
            Gets the display name of this setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageReference.Description">
            <summary>
            Gets the description of this setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageReference.Icon">
            <summary>
            Gets the icon of this setting page. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageReference.HelpTopic">
            <summary>
            Gets the help topic associated with this setting page
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageReference.Category">
            <summary>
            Gets or sets the category to which this settings page belongs.
            </summary>
            <remarks>This property is set automtically when this page is added to a category and should never be set in user code.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageReference.SettingsPage">
            <summary>
            Returns the actual setting page object.
            </summary>
            <remarks>The framework will initialize this settings page the first time it is shown.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageReference.IsInitialized">
            <summary>
            True of the underlying setting page object has been created and initialized.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.ISettingsPageSite">
            <summary>
            Represents the interface between a settings page and the settings dialog on which the page is displayed.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageSite.ServiceContext">
            <summary>
            Gets the service context to which this settings page's host is linked.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageSite.Host">
            <summary>
            Gets the host on which the page is displayed.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageSite.DataSource">
            <summary>
            Gets the data source.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageSite.Category">
            <summary>
            Gets the settings page category to which this page belongs.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.ISettingsPageSite.Reference">
            <summary>
            Gets the setting page reference for this page.
            </summary>
            <remarks>Can be used to access the setting page name and other meta data.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.ISettingsUIFilter">
            <summary>
            Repreents a filter which determines which settings pages and categories are displayed in a settings host (dialog or control).
            </summary>
            <remarks>Use one of the <code>CreateSettingsDialog</code> or <code>CreateSettingsDialog</code> methods of <see cref="T:Sdl.Desktop.Platform.IStudioWindow"/> to pass
            a settings UI filter when creating a settings control or dialog.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsUIFilter.ShouldDisplay(Sdl.Desktop.Platform.Settings.ISettingsPageReference)">
            <summary>
            Gets whether to display the specified settings page.
            </summary>
            <param name="settingsPageReference">The settings page.</param>
            <returns>True to display the settings page; false to keep it hidden.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.ISettingsUIFilter.ShouldDisplay(Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference)">
            <summary>
            Gets whether to display the specified settings page category.
            </summary>
            <param name="settingsPageCategoryReference">The settings page category.</param>
            <returns>True to display the settings page category; false to keep it hidden.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SettingsBinder">
            <summary>
            Static helper class for databinding settings to control properties.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsBinder.DataBindSetting``1(System.Windows.Forms.IBindableComponent,System.String,Sdl.Core.Settings.ISettingsGroup,System.String)">
            <summary>
            Databinds a setting to a control property, setting the control font to bold when the settings is not inherited.
            </summary>
            <typeparam name="TSettingValue">The value type of the setting.</typeparam>
            <param name="control">The control to which to bind the setting.</param>
            <param name="propertyName">The property of the control to which to bind the setting.</param>
            <param name="settingsGroup">The settings group that owns the setting.</param>
            <param name="settingId">The id of the setting.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsBinder.DataBindSetting``1(System.Windows.Forms.IBindableComponent,System.String,Sdl.Core.Settings.ISettingsGroup,System.String,Sdl.Desktop.Platform.Settings.ISettingInheritanceFormatter)">
            <summary>
            Databinds a setting to a control property, using the specified formatter to 
            visualize whether the setting is inherited.
            </summary>
            <typeparam name="TSettingValue">The value type of the setting.</typeparam>
            <param name="control">The control to which to bind the setting.</param>
            <param name="propertyName">The property of the control to which to bind the setting.</param>
            <param name="settingsGroup">The settings group that owns the setting.</param>
            <param name="settingId">The id of the setting.</param>
            <param name="formatter">A setting inheritance formatter, which is used to visualize whether the setting is inherited.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsBinder.DataBindSetting``1(System.Windows.Forms.IBindableComponent,System.String,Sdl.Core.Settings.ISettingsGroup,System.String,System.Windows.Forms.DataSourceUpdateMode)">
            <summary>
            Databinds a setting to a control property with a specific datasource update mode, setting the control font to bold when the settings is not inherited.
            </summary>
            <typeparam name="TSettingValue">The value type of the setting.</typeparam>
            <param name="control">The control to which to bind the setting.</param>
            <param name="propertyName">The property of the control to which to bind the setting.</param>
            <param name="settingsGroup">The settings group that owns the setting.</param>
            <param name="settingId">The id of the setting.</param>
            <param name="mode">The datasource update mode for the binding.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsBinder.DataBindSetting``1(System.Windows.Forms.IBindableComponent,System.String,Sdl.Core.Settings.ISettingsGroup,System.String,System.Windows.Forms.DataSourceUpdateMode,System.Object)">
            <summary>
            Databinds a setting to a control property with a specific datasource update mode, setting the control font to bold when the settings is not inherited.
            </summary>
            <typeparam name="TSettingValue">The value type of the setting.</typeparam>
            <param name="control">The control to which to bind the setting.</param>
            <param name="propertyName">The property of the control to which to bind the setting.</param>
            <param name="settingsGroup">The settings group that owns the setting.</param>
            <param name="settingId">The id of the setting.</param>
            <param name="mode">The datasource update mode for the binding.</param>
            <param name="nullValue">Value to subsitute for a null property value.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsBinder.DataBindSetting``1(System.Windows.Forms.RadioButton[],``0[],Sdl.Core.Settings.ISettingsGroup,System.String)">
            <summary>
            Databinds a setting to a radiobutton with a specific datasource update mode, setting the control font to bold when the settings is not inherited.
            </summary>
            <typeparam name="TSettingValue">The value type of the setting.</typeparam>
            <param name="radioButtons">The radiobutton to which to bind the setting.</param>
            <param name="values">The values to which radio button should be bind.</param>
            <param name="settingsGroup">The settings group that owns the setting.</param>
            <param name="settingId">The id of the setting.</param>
            <returns>The binding between the property value of an object and property value of a control.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsBinder.DataBindSetting``1(System.Windows.Forms.IBindableComponent,System.String,Sdl.Core.Settings.ISettingsGroup,System.String,System.Windows.Forms.DataSourceUpdateMode,Sdl.Desktop.Platform.Settings.ISettingInheritanceFormatter)">
            <summary>
            Databinds a setting to a control property, with a specific datasource update mode and using the specified formatter to 
            visualize whether the setting is inherited.
            </summary>
            <typeparam name="TSettingValue">The value type of the setting.</typeparam>
            <param name="control">The control to which to bind the setting.</param>
            <param name="propertyName">The property of the control to which to bind the setting.</param>
            <param name="settingsGroup">The settings group that owns the setting.</param>
            <param name="settingId">The id of the setting.</param>
            <param name="mode">The datasource update mode for the binding.</param>
            <param name="formatter">A setting inheritance formatter, which is used to visualize whether the setting is inherited.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsBinder.DataBindSetting``1(System.Windows.Forms.IBindableComponent,System.String,Sdl.Core.Settings.ISettingsGroup,System.String,System.Windows.Forms.DataSourceUpdateMode,Sdl.Desktop.Platform.Settings.ISettingInheritanceFormatter,System.Object)">
            <summary>
            Databinds a setting to a control property, with a specific datasource update mode and using the specified formatter to 
            visualize whether the setting is inherited.
            </summary>
            <typeparam name="TSettingValue">The value type of the setting.</typeparam>
            <param name="control">The control to which to bind the setting.</param>
            <param name="propertyName">The property of the control to which to bind the setting.</param>
            <param name="settingsGroup">The settings group that owns the setting.</param>
            <param name="settingId">The id of the setting.</param>
            <param name="mode">The datasource update mode for the binding.</param>
            <param name="formatter">A setting inheritance formatter, which is used to visualize whether the setting is inherited.</param>
            <param name="nullValue">Value to subsitute for a null property value.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsBinder.CreateSettingBinding``1(System.Windows.Forms.IBindableComponent,System.String,Sdl.Core.Settings.ISettingsGroup,System.String,System.Windows.Forms.DataSourceUpdateMode,Sdl.Desktop.Platform.Settings.ISettingInheritanceFormatter,System.Object)">
            <summary>
            Creates a setting binding to a control property, with a specific datasource update mode and using the specified formatter to 
            visualize whether the setting is inherited.
            </summary>
            <typeparam name="TSettingValue">The value type of the setting.</typeparam>
            <param name="control">The control to which to bind the setting.</param>
            <param name="propertyName">The property of the control to which to bind the setting.</param>
            <param name="settingsGroup">The settings group that owns the setting.</param>
            <param name="settingId">The id of the setting.</param>
            <param name="mode">The datasource update mode for the binding.</param>
            <param name="formatter">A setting inheritance formatter, which is used to visualize whether the setting is inherited.</param>
            <param name="nullValue">Value to subsitute for a null property value.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SettingsPageAttribute">
            <summary>
            Extension attribute for plugging in settings pages into the studio.
            </summary>
            <remarks>To create a new settings page, extend the <see cref="T:Sdl.Core.Settings.AbstractSettingsPage"/> class and annotate
            it with the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageAttribute"/>.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor with id, name and description.
            </summary>
            <param name="id">The unique id for the settings page.</param>
            <param name="name">The name for the settings page. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">The description for the settings page. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="categoryId">The id of the settings page category to which this setting page should be added.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="id"/>, <paramref name="name"/> or <paramref name="categoryId"/> is null or an empty string.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageAttribute.CategoryId">
            <summary>
            Gets or sets the id of the settings page category in which this page should appear.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageAttribute.HelpTopic">
            <summary>
            Gets or sets the help topic associated with this page
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SettingsPageCategoryAttribute">
            <summary>
            Extension attribute for plugging in settings pages into the studio.
            </summary>
            <remarks>To create a new settings page, extend the <see cref="T:Sdl.Core.Settings.AbstractSettingsPage"/> class and annotate
            it with the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageAttribute"/>.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor with id, name and description.
            </summary>
            <param name="id">The unique id for the settings page category.</param>
            <param name="name">The name for the settings page category. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">The description for the settings page category. Should typically be a key of a resource string in PluginResources.resx.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryAttribute.ParentSettingsPageCategoryId">
            <summary>
            The id of the parent of this settings page category (optional).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryAttribute.LazyInit">
            <summary>
            Whether this category will be initialized lazily. When true; only the condition applied to the category
            will be used in order to identify whether the category should be shown. When false; the condition will be evaluated and the
            category will be initialized to check whether it actually contains any pages or subcategories. Only if it contains anything, it
            will be shown.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SettingsPageCategoryEventArgs">
            <summary>
            EventArgs for events related to a settings page category.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryEventArgs.#ctor(Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageCategoryEventArgs"/> class.
            </summary>
            <param name="settingsPageCategoryReference">The settings page category reference.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryEventArgs.SettingsPageCategoryReference">
            <summary>
            Gets the settings page category reference.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1">
            <summary>
            Generic implementation of the settings page category reference interface (<see cref="T:Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference"/>).
            </summary>
            <remarks>This class can be used to dynamically add a sub-setting page category to a setting page category.</remarks>
            <typeparam name="T">The type of setting page category that this reference represents. Should implement <see cref="T:Sdl.Desktop.Platform.Settings.ISettingsPageCategory"/> and have a default constructor.</typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageReference`1"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageReference`1"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="helpTopic">The associated HelpTopic.</param>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.NameChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.Name"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.DescriptionChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.Description"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.IconChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.Icon"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.Id">
            <summary>
            Gets or sets the unique id of the setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.UniqueId">
            <summary>
            Gets an id, which uniquely identifies this settings page category within the parent category.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.Name">
            <summary>
            Gets or sets the friendly name of this setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.Description">
            <summary>
            Gets or sets the description of this setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.Icon">
            <summary>
            Gets or sets an icon representing this setting page. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.HelpTopic">
            <summary>
            Gets the HelpTopic of this setting page category. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.IsInitialized">
            <summary>
            Returns whether the setting page associated with this setting page reference has been initialized (see also <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.SettingsPageCategory"/>).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.Parent">
            <summary>
            Gets or sets the parent settings category. Returns null if there is no parent settings category.
            </summary>
            <remarks>This property is set automatically when this category is added to its parent category and should never be set in user code.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.SettingsPageCategory">
            <summary>
            Returns the actual setting page category object.
            </summary>
            <remarks>The framework will initialize this settings page the first time it is shown.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.OnSettingsPageCategoryCreated(`0)">
            <summary>
            This method is called right after the instance of the setting page category has been created.
            </summary>
            <remarks>Override this method to perform additional initialization after the setting page category is created.</remarks>
            <param name="settingPageCategory">The newly created setting page category.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.OnNameChanged">
            <summary>
            Called when the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.Name"/> property changes. Raises the <see cref="E:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.NameChanged"/> event.
            </summary>
            <remarks>Override this method to perform additional processing. Make sure to call the base class method so the event gets raised.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.OnDescriptionChanged">
            <summary>
            Called when the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.Description"/> property changes. Raises the <see cref="E:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.DescriptionChanged"/> event.
            </summary>
            <remarks>Override this method to perform additional processing. Make sure to call the base class method so the event gets raised.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.OnIconChanged">
            <summary>
            Called when the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.Icon"/> property changes. Raises the <see cref="E:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReference`1.IconChanged"/> event.
            </summary>
            <remarks>Override this method to perform additional processing. Make sure to call the base class method so the event gets raised.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReferenceCollection">
            <summary>
            A read-only collection of settings page category references.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageCategoryReferenceCollection.Item(System.String)">
            <summary>
            Returns the settings page category reference with the specified id.
            </summary>
            <param name="uniqueId">The unique id for which to retrieve the settings page category reference.</param>
            <returns>The settings page category reference with the specified id; or null, if this collection does not contain a settings page category reference with the given id.</returns>
            <seealso cref="P:Sdl.Desktop.Platform.IViewPartReference.Id"/>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SettingsPageEventArgs">
            <summary>
            EventArgs for events related to a settings page.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageEventArgs.#ctor(Sdl.Desktop.Platform.Settings.ISettingsPageReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageEventArgs"/> class.
            </summary>
            <param name="settingsPageReference">The settings page reference.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageEventArgs.SettingsPageReference">
            <summary>
            Gets the settings page reference.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SettingsPageReference`1">
            <summary>
            Generic implementation of the settings page reference interface (<see cref="T:Sdl.Desktop.Platform.Settings.ISettingsPageReference"/>).
            </summary>
            <remarks>This class can be used to dynamically add a setting page to a setting page category.</remarks>
            <typeparam name="T">The type of setting page that this reference represents. Should implement <see cref="T:Sdl.Core.Settings.ISettingsPage"/> and have a default constructor.</typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageReference`1"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageReference`1"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="helpTopic">The help topic id.</param>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.NameChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.Name"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.DescriptionChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.Description"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.IconChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.Icon"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.Id">
            <summary>
            Gets or sets the unique id of the setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.UniqueId">
            <summary>
            Gets an id, which uniquely identifies this settings page within the parent category.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.Name">
            <summary>
            Gets or sets the friendly name of this setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.Description">
            <summary>
            Gets or sets the description of this setting page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.Icon">
            <summary>
            Gets or sets an icon representing this setting page. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.HelpTopic">
            <summary>
            Gets or sets the help topic associated with this setting page
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.Category">
            <summary>
            Gets or sets the category to which this settings page belongs.
            </summary>
            <remarks>This property is set automtically when this page is added to a category and should never be set in user code.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.IsInitialized">
            <summary>
            Returns whether the setting page associated with this setting page reference has been initialized (see also <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.SettingsPage"/>).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.SettingsPage">
            <summary>
            Returns the actual setting page object.
            </summary>
            <remarks>The framework will initialize this settings page the first time it is shown.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.OnSettingsPageCreated(`0)">
            <summary>
            This method is called right after the instance of the setting page has been created.
            </summary>
            <remarks>Override this method to perform additional initialization after the setting page is created.</remarks>
            <param name="settingPage">The newly created setting page.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.OnNameChanged">
            <summary>
            Called when the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.Name"/> property changes. Raises the <see cref="E:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.NameChanged"/> event.
            </summary>
            <remarks>Override this method to perform additional processing. Make sure to call the base class method so the event gets raised.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.OnDescriptionChanged">
            <summary>
            Called when the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.Description"/> property changes. Raises the <see cref="E:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.DescriptionChanged"/> event.
            </summary>
            <remarks>Override this method to perform additional processing. Make sure to call the base class method so the event gets raised.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.OnIconChanged">
            <summary>
            Called when the <see cref="P:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.Icon"/> property changes. Raises the <see cref="E:Sdl.Desktop.Platform.Settings.SettingsPageReference`1.IconChanged"/> event.
            </summary>
            <remarks>Override this method to perform additional processing. Make sure to call the base class method so the event gets raised.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SettingsPageReferenceCollection">
            <summary>
            A read-only collection of settings page references.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SettingsPageReferenceCollection.Item(System.String)">
            <summary>
            Returns the settings page reference with the specified id.
            </summary>
            <param name="uniqueId">The unique id for which to retrieve the settings page reference.</param>
            <returns>The settings page reference with the specified id; or null, if this collection does not contain a settings page reference with the given id.</returns>
            <seealso cref="P:Sdl.Desktop.Platform.IViewPartReference.Id"/>
        </member>
        <member name="T:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl">
            <summary>
            Control which allows showing a single settings page.
            </summary>
            <remarks>This assumes that the settings page implementation is standalone and does nor rely on being part of a certain settings page category
            hierarchy. If this is the case, use an <see cref="T:Sdl.Desktop.Platform.Settings.ISettingsControl"/> in combination with a <see cref="T:Sdl.Desktop.Platform.Settings.ISettingsUIFilter"/> instead.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl"/> class.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.InitializingSettingsPage">
            <summary>
            Raised when a settings page is being initialized.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.InitializingSettingsPageCategory">
            <summary>
            Raised when a settings page category is being initialized.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.SettingsPage">
            <summary>
            Gets or sets the settings page to display on the control.
            </summary>
            <value>The settings page.</value>
            <exception cref="T:System.ArgumentNullException">Thrown when setting this property to null.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.DataSource">
            <summary>
            Gets or sets the settings bundle, which provides the settings data to be displayed in the settings control. This property must be set
            before the control is shown, or an <see cref="T:System.InvalidOperationException"/> will be thrown when trying to display the page.
            </summary>
            <remarks>This property can only be set before the control is displayed.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to set this property after the wizard page is shown.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when setting this property to null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.Save">
            <summary>
            Saves the settings on the settings page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.Cancel">
            <summary>
            Cancels the changes on the settings page.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.Help">
            <summary>
            Shows help for the settings page.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.UserControl.Load"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.ReloadSettingsControl">
            <summary>
            Forces recreation of the settings control, for instance after assigning a new settings page or bundle.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Settings.SingleSettingsPageHostControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.INetworkConnectivity.Status">
            <summary>
            Get current Status
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.INetworkConnectivity.Update(Sdl.Desktop.Platform.ConnectivityStatus,System.Boolean@)">
            <summary>
            Update current Status with the new Status
            </summary>
            <param name="statusCode">New status</param>
            <param name="statusChanged">Returns True if the new Status is different from the current Status</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Interfaces.FileSelection.IMultiplePathSelector">
            <summary>
            Select multiple paths/files.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Interfaces.FileSelection.IMultiplePathSelector.GetPaths(System.String,System.String,System.String)">
            <summary>
            Select multiple paths or files. The order is not defined.
            </summary>
            <param name="title">Title of the dialog which allows selection.</param>
            <param name="location">Initial location.</param>
            <param name="filter">File extension filter. Defaults to all (*.*)</param>
            <returns></returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Interfaces.FileSelection.ISingleFolderPathSelector">
            <summary>
            Choose a single folder, and return a list of filtered files from it.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Interfaces.FileSelection.ISingleFolderPathSelector.CreateDefaultDialog(System.String,System.String)">
            <summary>
            Create the dialog to choose a file.
            </summary>
            <param name="title">Dialog title.</param>
            <param name="location">Dialog's initial location.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Interfaces.FileSelection.ISingleFolderPathSelector.GetFolderPath(Sdl.Desktop.Platform.Interfaces.FileSelection.IModalFolderSelectDialog)">
            <summary>
            Choose the folder's location
            </summary>
            <param name="folderSelectDialog"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Interfaces.FileSelection.ISingleFolderPathSelector.GetPathsInFolder(System.String,System.Boolean,System.String,System.String[])">
            <summary>
            Returns a list of files in the folder path.
            </summary>
            <param name="folderPath">Location to search in</param>
            <param name="isRecursive">Are sub-folders explored</param>
            <param name="searchPattern">A pattern applied to file names; distinct from extension. Uased as part of <cref>Directory.GetFiles()</cref> call. Defaults to all (*.*)</param>
            <param name="fileExtensions">A list of desired extensions. Defaults to all (*.*)</param>
            <returns>The list of file paths</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Interfaces.FileSelection.ISinglePathSelector.ShowFolderSelectionDialog(System.String,System.String)">
            <summary>
            Choose a single file.
            </summary>
            <param name="title">Title of the dialog that will select the file.</param>
            <param name="initialLocation">Initial dialog path.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Interfaces.SystemIO.IPath.GetInvalidFileNameChars">
            <summary>
            Get all characters that can't be part of a file name, including unprintable and whitespace ones.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Interfaces.SystemIO.IPath.GetPrintableInvalidFileNameChars">
            <summary>
            Get all printable characters that cannot be part of a file name. For Windows systems, these are: <![CDATA[< > \ | / ? * : "]]>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.InternalUI.ISelectViewPartDialog">
            <summary>
            ISelectDocumentDialog interface represents a select view part dialog.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.InternalUI.ISelectViewPartDialog.SelectedViewPart">
            <summary>
            SelectedViewPart property represents the selected view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.InternalUI.ISelectViewPartDialog.NextKeys">
            <summary>
            NextKeys property represents the keys used to select the next view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.InternalUI.ISelectViewPartDialog.PreviousKeys">
            <summary>
            PreviousKeys property represents the keys used to select the previous view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.InternalUI.ISelectViewPartDialog.Title">
            <summary>
            Title property represents the title.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.InternalUI.ISelectViewPartDialog.ShowDialog">
            <summary>
            Shows the dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.InternalUI.IUserInterfaceLanguageDialog.SetAvailableUILanguages(System.Collections.Generic.IList{Sdl.Core.Globalization.Language})">
            <summary>
            Set the available UI languages
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.InternalUI.IViewWithPartsContentControl.NotifyViewPartAdded(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Called when a view part is added to the view.
            </summary>
            <remarks>This method is only called after the <see cref="M:Sdl.Desktop.Platform.InternalUI.IViewWithPartsContentControl.Init(Sdl.Desktop.Platform.IViewWithParts)"/> method has been called.</remarks>
            <param name="viewPartReference">The view part that has been added to the view.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.InternalUI.IViewWithPartsContentControl.NotifyViewPartRemoved(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Called when a view part is programmatically closed.
            </summary>
            <param name="viewPartReference">The view part that has been closed.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.InternalUI.IViewWithPartsContentControl.IsInView(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Only returns true if the actual contents 
            of a view part is visible
            </summary>
            <param name="viewPartReference"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.InternalUI.IViewWithPartsContentControl.IsVisible(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Checks if view part is visible; also returns true
            if view part is hidden behind other view part
            in a tab control
            </summary>
            <param name="viewPartReference"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.InternalUI.IViewWithPartsContentControl.CanShowViewPartWithoutHidingAnotherViewPart(Sdl.Desktop.Platform.IViewPartReference,Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Certain views should not be shown if showing that view hides another view that should not be hidden
            </summary>
            <param name="viewPartToShow">View you wish to show</param>
            <param name="viewPartThatCannotBeHidden">View that cannot be hidden</param>
            <returns>True if the view you wish to show can be shown without hiding the view you wish to remain active</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.IProduct">
            <summary>
            Represents a product that is built using the desktop platform.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IProduct.RequiredPlugins">
            <summary>
            A product has a set of "required" or "system" plugins.
            This set of plugins are typically used by an <see cref="T:Sdl.Core.PluginFramework.IPluginStateHandler"/> implementation to determine
            whether a plugin can be enabled or disabled.
            </summary>
            <value>The required plugins.</value>
        </member>
        <member name="P:Sdl.Desktop.Platform.IProduct.AllowThirdPartyPlugins">
            <summary>
            Specifies if third-party plug-ins should be loaded for this product.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISettingsDialogFactory.CreateSettingsDialog(System.Object)">
            <summary>
            Returns a settings dialog for the specfied settings bundle.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISettingsDialogFactory.CreateSettingsDialog(System.Object,Sdl.Desktop.Platform.Settings.ISettingsUIFilter)">
            <summary>
            Returns a settings dialog for the specfied settings bundle, using the specified filter 
            to determine which categories and pages will be displayed.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISettingsDialogFactory.CreateUserSettingsDialog">
            <summary>
            Returns a user settings dialog.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISettingsDialogFactory.CreateSettingsControl(System.Object)">
            <summary>
            Returns a settings control for the specfied settings bundle.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISettingsDialogFactory.CreateSettingsControl(System.Object,Sdl.Desktop.Platform.Settings.ISettingsUIFilter)">
            <summary>
            Returns a settings control for the specified settings bundle, using the specified filter 
            to determine which categories and pages will be displayed.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISettingsDialogFactory.CreateSettingsControl(System.Object,System.String,Sdl.Desktop.Platform.Settings.ISettingsUIFilter)">
            <summary>
            Returns a settings control for the specfied settings bundle, only showing the specified plug-in root settings category. 
            A settings UI filter can be passed in order the filter out sub-pages and categories of the sepcifie droot category.
            </summary>
            <param name="dataSource">The data source for the settings control.</param>
            <param name="settingsPageCategoryId">The id of the root settings category. None of the other settings categories which might be available for the
            specified settings bundle are shown. Note that this category needs to be a plug-in settings page category, marked with the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageAttribute"/> attribute.</param>
            <param name="filter">An optional settings UI filter to filter out certain sub-pages and -categories from display.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISettingsDialogFactory.CreateSettingsControl(System.Object,Sdl.Desktop.Platform.Settings.ISettingsUIFilter,System.EventHandler{Sdl.Desktop.Platform.Settings.SettingsPageEventArgs},System.EventHandler{Sdl.Desktop.Platform.Settings.SettingsPageCategoryEventArgs})">
            <summary>
            Returns a settings control for the specified settings bundle, using the specified filter 
            to determine which categories and pages will be displayed.
            </summary>
            <param name="dataSource">The data source for the settings control.</param>
            <param name="filter">An optional settings UI filter to filter out certain sub-pages and -categories from display.</param>
            <param name="initializingSettingsPageEventHandler">An optional event handler for the <see cref="E:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.InitializingSettingsPage"/> event.</param>
            <param name="initializingSettingsPageCategoryEventHandler">An optional event handler for the <see cref="E:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.InitializingSettingsPageCategory"/> event.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISettingsDialogFactory.CreateSettingsControl(System.Object,Sdl.Desktop.Platform.Settings.ISettingsPageCategoryReference,Sdl.Desktop.Platform.Settings.ISettingsUIFilter,System.EventHandler{Sdl.Desktop.Platform.Settings.SettingsPageEventArgs},System.EventHandler{Sdl.Desktop.Platform.Settings.SettingsPageCategoryEventArgs})">
            <summary>
            Returns a settings control for the specfied settings bundle, only showing the specified root settings category. 
            A settings UI filter can be passed in order the filter out sub-pages and categories of the sepcifie droot category.
            </summary>
            <param name="dataSource">The data source for the settings control.</param>
            <param name="settingsPageCategoryReference">The roor settings category. None of the other settings categories which might be available for the
            specified settings bundle are shown.</param>
            <param name="filter">An optional settings UI filter to filter out certain sub-pages and -categories from display.</param>
            <param name="initializingSettingsPageEventHandler">An optional event handler for the <see cref="E:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.InitializingSettingsPage"/> event.</param>
            <param name="initializingSettingsPageCategoryEventHandler">An optional event handler for the <see cref="E:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.InitializingSettingsPageCategory"/> event.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISettingsDialogFactory.CreateSettingsControl(System.Object,System.String,Sdl.Desktop.Platform.Settings.ISettingsUIFilter,System.EventHandler{Sdl.Desktop.Platform.Settings.SettingsPageEventArgs},System.EventHandler{Sdl.Desktop.Platform.Settings.SettingsPageCategoryEventArgs})">
            <summary>
            Returns a settings control for the specfied settings bundle, only showing the specified plug-in root settings category. 
            A settings UI filter can be passed in order the filter out sub-pages and categories of the sepcifie droot category.
            </summary>
            <param name="dataSource">The data source for the settings control.</param>
            <param name="settingsPageCategoryId">The id of the root settings category. None of the other settings categories which might be available for the
            specified settings bundle are shown. Note that this category needs to be a plug-in settings page category, marked with the <see cref="T:Sdl.Desktop.Platform.Settings.SettingsPageAttribute"/> attribute.</param>
            <param name="filter">An optional settings UI filter to filter out certain sub-pages and -categories from display.</param>
            <param name="initializingSettingsPageEventHandler">An optional event handler for the <see cref="E:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.InitializingSettingsPage"/> event.</param>
            <param name="initializingSettingsPageCategoryEventHandler">An optional event handler for the <see cref="E:Sdl.Desktop.Platform.Settings.IAbstractSettingsHost.InitializingSettingsPageCategory"/> event.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.ISplashScreen">
            <summary>
            The application splash screen, typically shown during start up to inform the user of progress.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISplashScreen.StartSplashScreen">
            <summary>
            Displays the splash screen (on a separate thread).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ISplashScreen.Image">
            <summary>
            Gets or sets the image to display on the splash screen, for example the product logo.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ISplashScreen.Icon">
            <summary>
            Gets or sets the icon for the splash screen form.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ISplashScreen.Form">
            <summary>
            Gets the <see cref="P:Sdl.Desktop.Platform.ISplashScreen.Form"/> for the splash screen.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISplashScreen.Close">
            <summary>
            Closes and disposes the SplashScreen
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ISplashScreen.CloseTriggered">
            <summary>
            Flag for signaling if user or operating system closed the splash screen
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISplashScreen.WriteMessage(System.String)">
            <summary>
            Displays message on splash screen 
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.UserInterfaceLanguageChangedEventArgs">
            <summary>
            Arguments for the event fired when the user interface language is changed.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.UserInterfaceLanguageChangedEventArgs.NewUserInterfaceLanguage">
            <summary>
            The newly selected UI language
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.IStudio">
            <summary>
            The main interface in the studio platform. 
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudio.WindowCreated">
            <summary>
            Raised when a studio window has been created.
            </summary>
            <remarks>This interface is not intended to be implemented by clients.</remarks>
            <seealso cref="M:Sdl.Desktop.Platform.IStudio.CreateWindow"/>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudio.UserInterfaceLanguageChanged">
            <summary>
            Raised when the UI Language has been changed.
            The user is given the option to restart Studio after this event is fired.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudio.Run(Sdl.Desktop.Platform.ISplashScreen,Sdl.Desktop.Platform.PluginManagement.IPluginLoaderService,Sdl.Desktop.Platform.Implementation.ICommandLineParsingService,Sdl.Desktop.Platform.Services.IUserSettingsService,System.Collections.Generic.IEnumerable{Sdl.Platform.Interfaces.IStudioStartupAction})">
            <summary>
            Runs the studio, creates and shows a studio window and starts a message loop. The studio Product should already be set.
            </summary>
            <remarks>This method can only be called once. Use this method if the Studio instance has already been initialised.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when this method is called if the studio is already running.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.IsSubscriptionExpired">
            <summary>
            Returns <code>true</code> when the studio subscription has expired and Studio is closing.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.IsRunning">
            <summary>
            Returns <code>true</code> when the studio is running, i.e. after Run() has been called.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.IsSecureMode">
            <summary>
            Returns <code>true</code> when the studio is running in secure mode/> has been called.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.SecureModeAvailable">
            <summary>
            Returns <code>true</code> when the SecureStudioEnabled AppSetting in the config file is set on true/> has been called.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.Product">
            <summary>
            Gets the currently running product.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.ApplicationLookAndFeel">
            <summary>
            Gets the application look and feel object.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.NetworkConnectivity">
            <summary>
            Offers information regarding the current status of Studio's connectivity to the internet and cloud
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudio.CreateWindow">
            <summary>
            Creates a new studio window.
            </summary>
            <remarks>This does not actually show the window. Call <see cref="M:Sdl.Desktop.Platform.IStudioWindow.Show"/> to show the window.</remarks>
            <returns>The newly created studio window.</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.ActiveWindow">
            <summary>
            Gets the active window.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.FunctionalityFilter">
            <summary>
            Gets the functionality filter that controls which plug-ins and extensions should be loaded and which actions should be available.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudio.Close">
            <summary>
            Closes all studio windows and exits the application.
            </summary>
            <returns>True if all windows have been closed successfully. False if the user cancelled the operation.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudio.Restart">
            <summary>
            Closes all studio windows and restarts the application.
            </summary>
            <returns>True if all windows have been closed successfully. False if the user cancelled the operation.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudio.Restart(System.String[])">
            <summary>
            Closes all studio windows and restarts the application with command line paramaters
            </summary>
            <param name="restartArguments">SDL command line parameters (/help)</param>
            <returns></returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.DefaultOwnerWindow">
            <summary>
            Gets the default owner window for displaying dialogs.
            </summary>
            <remarks>This return the currently active dialog; or the currently active studio window if no dialog is currently being displayed.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.AllowMultipleInstances">
            <summary>
            Gets or sets whether studio allows running multiple instances (processes), or whether it always tries
            to reuse existing application instances.
            </summary>
            <remarks>You should set this property before calling Run.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.DefaultInitialView">
            <summary>
            Gets or sets whether studio should display the last-viewed view, or just default to the first available view everytime
            </summary>
            <remarks>You should set this property before calling Run.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudio.Invoke(System.Delegate)">
            <summary>
            Convenient overload for the ISynchronizeInvoke.Invoke method
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudio.BeginInvoke(System.Delegate)">
            <summary>
            Convenient overload for the ISynchronizeInvoke.BeginInvoke method
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudio.ShowUserInterfaceLanguageDialog(Sdl.Platform.Interfaces.Services.IResourceService)">
            <summary>
            Shows the dialog where the user can set the language for the user interface
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudio.VersionManager">
            <summary>
            Gets the version manager, which can be used to keep track of component versions.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.IStudioStartupActiveView">
            <summary>
            Contract used to customize the selection of the initial active view.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudioStartupActiveView.Resolve(Sdl.Desktop.Platform.IStudioWindow,Sdl.Desktop.Platform.IViewReference)">
            <summary>
            Implemented to resolve the selection of the startup active view.
            </summary>
            <param name="window">The window for which is resolved the initial active view.</param>
            <param name="suggestedView">Suggested Studio view to be activated.</param>
            <returns>The startup active view</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.StudioWindowEventHandler">
            <summary>
            Delegate for events related to a studio window.
            </summary>
            <param name="window">The window to which the event applies.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.StudioWindowCancelEventHandler">
            <summary>
            Delegate for events related to a studio window, which can be cancelled.
            </summary>
            <param name="window">The window to which the event applies.</param>
            <param name="cancel">Boolean allowing the event handling code to cancel the event.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.IStudioWindow">
            <summary>
            Represents a studio window.
            </summary>
            <remarks>A studio window hosts one or more views, of which one is active (see <see cref="P:Sdl.Desktop.Platform.IStudioWindow.ActiveView"/>) and visible.</remarks>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudioWindow.LicenseActivated">
            <summary>
            Raised when a Perpetual License/Subscription is activated.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudioWindow.SizeChanged">
            <summary>
            Raised when the windows size is changed
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudioWindow.Activated">
            <summary>
            Raised when the window is activated.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudioWindow.Closing">
            <summary>
            Raised while the window is closing. This event can be cancelled, resulting in the window not being closed.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudioWindow.Closed">
            <summary>
            Raised when the window has been closed.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudioWindow.ActiveViewChanged">
            <summary>
            Raised when the active view has changed.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudioWindow.FullScreenModeChanging">
            <summary>
            Raised when the full screen mode is about to change.
            </summary>
            <seealso cref="P:Sdl.Desktop.Platform.IStudioWindow.FullScreenMode"/>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudioWindow.FullScreenModeChanged">
            <summary>
            Raised when the full screen mode has changed.
            </summary>
            <seealso cref="P:Sdl.Desktop.Platform.IStudioWindow.FullScreenMode"/>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudioWindow.ExplicitRefresh">
            <summary>
            Raised when an explicit refresh has happened.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudioWindow.WindowsSettingChanged">
            <summary>
            Raised when a windows setting has changed; e.g. when a group policy changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IStudioWindow.Initialized">
            <summary>
            Raised when the window, all its command bars and views have been initialized.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.Studio">
            <summary>
            Returns the studio instance to which this window belongs.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.ServiceContext">
            <summary>
            Returns the service context for accessing and registering services specific to this window.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.CommandBars">
            <summary>
            Returns the command bars of this window.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.Views">
            <summary>
            Returns the collection of views that are available in this window.
            </summary>
            <remarks>This includes all views, event those that are not enabled (see <see cref="P:Sdl.Desktop.Platform.IViewReference.Enabled"/>) or available (see <see cref="P:Sdl.Desktop.Platform.IViewReference.Available"/>).</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.ActiveView">
            <summary>
            Gets or sets the currently active view (reference). Can return null is there is not view enabled or available.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when trying to set a view that is disabled or not available.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.ActiveViewSite">
            <summary>
            Gets the site of the active view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.Title">
            <summary>
            Gets or sets the title or the window.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.StatusMessage">
            <summary>
            Gets or sets the status message appearing in the window status bar. 
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.SettingsDialogFactory">
            <summary>
            Gets the factory class that allows creating a settings dialog
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.NativeWindow">
            <summary>
            Gets a reference to the underlying native window.
            </summary>
            <remarks>Returns null before the window is visible.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.DefaultOwnerWindow">
            <summary>
            Returns the native window that acts as a default owner for child windows.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.ActionService">
            <summary>
            Returns the action service.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudioWindow.Invoke(System.Delegate)">
            <summary>
            Convenient overload for the ISynchronizeInvoke.Invoke method
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudioWindow.BeginInvoke(System.Delegate)">
            <summary>
            Convenient overload for the ISynchronizeInvoke.BeginInvoke method
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudioWindow.Show">
            <summary>
            Shows this window.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudioWindow.Activate">
            <summary>
            Activates this window.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.FullScreenMode">
            <summary>
            Gets or sets whether this window is in full screen mode.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.ViewHeaderVisible">
            <summary>
            Gets or sets whether the header above the view content area should be visible. 
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.ExplorerBarExpanded">
            <summary>
            Gets or sets whether the explorer bar is expanded.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.ConditionInitializer">
            <summary>
            Gets the Condition Initializer
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.Bounds">
            <summary>
            Gets or sets the bounds of the window.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.WindowState">
            <summary>
            Gets or sets the state of the window.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudioWindow.Close">
            <summary>
            Closes this window.
            </summary>
            <returns>True if the window was successfully close. False if the user cancelled the closing operation.</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.IStudioWindow.IsClosing">
            <summary>
            Returns true if this window is being closed.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudioWindow.CheckActiveView(System.String)">
            <summary>
            Checks if the view ID gicen as parameter is the ID of the active view.
            </summary>
            <param name="viewId"></param>
            <returns>True if viewId is equal to the Id of the active view, false otherwise</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudioWindow.ShowUserSettingsDialog">
            <summary>
            Shows the user settings dialog.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudioWindow.RaiseExplicitRefresh">
            <summary>
            Raises the explicit refresh event.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudioWindow.RaiseLicenseActivated">
            <summary>
            Raises the LicenseActivated event.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudioWindow.IsActiveView(System.String)">
            <summary>
            Returns TRUE if the given view name is the current active view
            </summary>
            <param name="viewName">The view name</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IStudioWindow.RefreshViewsAndRibbon">
            <summary>
            Force an update of the tabs and ribbon after global changes
            E.g. changing the subscription
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.ISuspendUpdate">
            <summary>
            Interface for implementing a protocol for suspending updates, typically related to suspending drawing operations.
            </summary>
            <seealso cref="T:Sdl.Desktop.Platform.CommandBars.ICommandBars"/>
        </member>
        <member name="E:Sdl.Desktop.Platform.ISuspendUpdate.ResumingUpdates">
            <summary>
            Called when updates re being resumed.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISuspendUpdate.SuspendUpdates">
            <summary>
            Suspends updates.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ISuspendUpdate.UpdatesSuspended">
            <summary>
            Returns true if updates are currently suspended.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ISuspendUpdate.ResumeUpdates">
            <summary>
            Resumes updates. ResumeUpdate must be called for every time <see cref="M:Sdl.Desktop.Platform.ISuspendUpdate.SuspendUpdates"/> is called.
            Updates are only actually resumed when all <see cref="M:Sdl.Desktop.Platform.ISuspendUpdate.SuspendUpdates"/> have been matched up. This is also when
            the <see cref="E:Sdl.Desktop.Platform.ISuspendUpdate.ResumingUpdates"/> event is raised.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.IUserProfile">
            <summary>
            Represents a user profile.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IUserProfile.Name">
            <summary>
            Gets the name of this user profile.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IUserProfile.FilePath">
            <summary>
            Gets the file path of this user profile.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IUserProfile.WellKnownId">
            <summary>
            Gets the wellknown id of this user profile.
            </summary>
            <remarks>The wellknownid relates this userprofile to the built-in user profile it orginates from.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.IUserProfile.Description">
            <summary>
            Gets the description of this user profile.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IUserProfile.IsCustom">
            <summary>
            Gets whether this is a custom user profile, or a built-in user profile.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IUserProfile.Settings">
            <summary>
            Gets the settings specific to this user profile.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.IVersionManager">
            <summary>
            The versions manager keeps track of component versions.
            A component is a user-specific entity, i.e. a component does not necessarily have the same version for all users working on a given computer.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IVersionManager.GetVersion(System.String)">
            <summary>
            Gets the version of the specified component.
            </summary>
            <param name="componentId">The component id.</param>
            <returns>The current version of the component; or null, if no version info exists for this component.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IVersionManager.SetVersion(System.String,System.String)">
            <summary>
            Set the current version of a component.
            </summary>
            <param name="componentId">The component id.</param>
            <param name="version">The version number of the component.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.IView">
            <summary>
            Represents a view. Clients should implement this interface to add a new view to the studio.
            Typically you do not implement this interface directly, but derive from <see cref="T:Sdl.Desktop.Platform.AbstractView"/> instead. This class
            already provides a base implementation with standard functionality.
            
            For views that consist of several view parts and that require the ability for plug-ins to add new view parts, implement 
            <see cref="T:Sdl.Desktop.Platform.IViewWithParts"/> (or <see cref="T:Sdl.Desktop.Platform.AbstractViewWithParts"/>. Typically, users should extend <see cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>, for
            a view consisting of a central MDI interface, accompanied by view parts that can be docked on on all sides.
            </summary>    
            <seealso cref="T:Sdl.Desktop.Platform.AbstractView"/>
            <seealso cref="T:Sdl.Desktop.Platform.IViewWithParts"/>
            <seealso cref="T:Sdl.Desktop.Platform.AbstractViewWithParts"/>
            <seealso cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>
            <seealso cref="T:Sdl.Desktop.Platform.AbstractDockingViewEx"/>
        </member>
        <member name="P:Sdl.Desktop.Platform.IView.ViewSite">
            <summary>
            Returns the site of the view. The site is the interface between the view and its owner window.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to access this property before the <see cref="M:Sdl.Desktop.Platform.IView.Init(Sdl.Desktop.Platform.IViewSite,Sdl.Core.Settings.ISettingsGroup)"/> method has been called.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.IView.Init(Sdl.Desktop.Platform.IViewSite,Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called right before this view is about to become visible for the first time.
            </summary>
            <remarks>Use this method to restore this views state and the views command bars, which are accessible through the site.</remarks>
            <param name="site">The site of the view.</param>
            <param name="settings">A settings object which can be used to restore this views previously persisted state.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.IView.GetContentControl">
            <summary>
            Returns the content control for this view. This control will occupy the entire content area of the studio window while this view is active.
            </summary>
            <returns>A Windows Forms control.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IView.GetExplorerBarControl">
            <summary>
            Returns the explorer bar control for this view. This control will be placed in the content area of the explorer bar
            while this view is active.
            </summary>
            <returns>A Windows Forms control.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IView.OnActivate">
            <summary>
            Called by the window when this view has been set as the active view.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IView.OnDeactivate">
            <summary>
            Called by the window when this view is being deactivated.
            </summary>
            <returns>True if it is ok to deactivate this view. False to keep this view as the active view.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IView.Refresh">
            <summary>
            Called by whenever the user refreshes this view. 
            </summary>
            <remarks>By default, this method is also called when the view is being activated.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.IView.SaveState(Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called by the window so this view can save its state in the specified settings object.
            </summary>
            <param name="settings">The settings object to store this views state in.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.IView.Dispose">
            <summary>
            Called by the window when it is being disposed. Dispose any resources here.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.IViewPart">
            <summary>
            Represents a view part. A view part is a visual part belonging to a view (see <see cref="T:Sdl.Desktop.Platform.IViewWithParts"/>).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPart.ViewPartSite">
            <summary>
            Returns the site of the view part. The site is the interface between the view part and its owning view.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to access this property before the <see cref="M:Sdl.Desktop.Platform.IViewPart.Init(Sdl.Desktop.Platform.IViewPartSite,Sdl.Core.Settings.ISettingsGroup)"/> method has been called.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPart.Init(Sdl.Desktop.Platform.IViewPartSite,Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called by the view right before this view part is about to become visible for the first time.
            </summary>
            <remarks>Use this method to restore this view part's state and fill the view part's command bars, which are accessible through the site.</remarks>
            <param name="site">The site of the view part.</param>
            <param name="settings">A settings object which can be used to restore this view part's previously persisted state.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPart.GetControl">
            <summary>
            Returns the control which visually represents the view part.
            </summary>
            <returns>A Windows Forms control.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPart.OnShow">
            <summary>
            Called by the view when this view part is shown.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPart.OnHide">
            <summary>
            Called by the view when this view part is about to be hidden.
            </summary>
            <returns>True to allow hiding the view part. False to cancel to operation.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPart.OnRemove">
            <summary>
            Called by the view when this view part is about to be removed from the view.
            </summary>
            <returns>True to allow removing the view part. False to cancel to operation.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPart.OnActivate">
            <summary>
            Called by the view when this view part is activated.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPart.OnDeactivate">
            <summary>
            Called by the view when this view part is being deactivated.
            </summary>
            <returns>True if it is ok to deactivate this view part. False to prevent this from happening.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPart.Refresh">
            <summary>
            Refreshes this view part's contents. Called by the view when the view itself is being refreshed.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPart.LazyRefresh">
            <summary>
            Returns whether this view part should only be refreshed if is currently in view (<see cref="P:Sdl.Desktop.Platform.IViewPartSite.IsInView"/>).
            If it isn't in view the refresh will be performed when the viewpart comes in view next.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPart.RefreshRequired">
            <summary>
            Gets or sets whether refresh is required when the view part is next brought into view (<see cref="P:Sdl.Desktop.Platform.IViewPartSite.IsInView"/>).
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPart.SaveState(Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called by the view so this view part can save its state in the specified settings object.
            </summary>
            <param name="settings">The settings object to store this views state in.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPart.Dispose">
            <summary>
            Called by the view when it is being disposed. Dispose any resources here.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.IViewPartCommandBarProvider">
            <summary>
            Represents a view part command bar provider. This allows adding items to command bars that are only 
            available to certain view parts.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartCommandBarProvider.Id">
            <summary>
            Gets the id of the view part command bar provider.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPartCommandBarProvider.FillCommandBars(Sdl.Desktop.Platform.CommandBars.ICommandBars)">
            <summary>
            Called by the framework to populate the view part specific command bar items.
            </summary>
            <param name="commandBars">The command bars to which to add command bar items.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPartCommandBarProvider.SupportsViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Returns whether the command bar items provided by this view part command bar provider should be 
            available for the specified view part.
            </summary>
            <param name="viewPartReference">The view part reference to check.</param>
            <returns>True if the command bar items provided by this view part command bar provider should be 
            available for the specified view part.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.ViewPartReferenceEventHandler">
            <summary>
            Delegate for view part related events.
            </summary>
            <param name="viewPartReference">The view part this event relates to.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.IViewPartReference">
            <summary>
            Represents a reference to a view part. A view always interacts with view parts through a view part reference. This allows
            the view to only actually create the view part (see <see cref="P:Sdl.Desktop.Platform.IViewPartReference.ViewPart"/>) whenever it is shown for the first time.
            </summary>
            <remarks>Clients can implement this interface in order to dynamically add new view parts to a view that supports this.</remarks>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewPartReference.AvailableChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.IViewPartReference.Available"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewPartReference.NameChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.IViewPartReference.Name"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewPartReference.DescriptionChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.IViewPartReference.Description"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewPartReference.ShortcutChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.IViewPartReference.Shortcut"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewPartReference.IconChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.IViewPartReference.Icon"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartReference.Id">
            <summary>
            Returns the unique id of the view part. This id should be unique within the view this view part is added to.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartReference.Name">
            <summary>
            Gets or sets the friendly name of this view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartReference.Description">
            <summary>
            Gets or sets the description of this view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartReference.Shortcut">
            <summary>
            Gets or sets the keyboard shortcut for this view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartReference.Icon">
            <summary>
            Gets or sets an icon representing this view part. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartReference.Available">
            <summary>
            Returns whether this view part is currently available.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartReference.IsInitialized">
            <summary>
            Returns whether the view part associated with this view part reference has been initialized (see also <see cref="P:Sdl.Desktop.Platform.IViewPartReference.ViewPart"/>).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartReference.ViewPart">
            <summary>
            Returns the view part associated with this view part reference. Implementers of this interface should
            make sure that lazy initialization is used, so that the view part is only actually created when this property is queried for the first time.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.ViewPartSiteEventHandler">
            <summary>
            Delegate for events related to a <see cref="T:Sdl.Desktop.Platform.IViewPartSite">view part site</see>.
            </summary>
            <param name="site">The view part site.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.IViewPartSite">
            <summary>
            Represents a view part site, which is the primary interface between a view part and its owning
            view. For every view part, there is exactly one view part site. The site is created when necessary, right before the
            view part is about to be shown for the first time. The view part site also has its own service context, which can be used to acess and register
            services specific to its view part.
            </summary>
            <remarks>This interface is not intended to be implemented by clients.</remarks>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewPartSite.TitleChanged">
            <summary>
            Raised when the <see cref="P:Sdl.Desktop.Platform.IViewPartSite.Title"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartSite.Window">
            <summary>
            Returns the owning window.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartSite.View">
            <summary>
            Returns the owning view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartSite.ViewPartReference">
            <summary>
            Returns the reference to the view part that belongs to this site.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartSite.IsActive">
            <summary>
            Returns true if the associated view part is currently the active view part in the view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartSite.IsVisible">
            <summary>
            Returns true if the associated view part is currently visible in the view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartSite.IsInView">
            <summary>
            Returns true if the contents of the viewpart are currently in the viewable area.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartSite.Title">
            <summary>
            Gets or sets a title of the view part. The owning view can choose to display this.
            </summary>
            <remarks>Defaults to the name of the view part.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartSite.CommandBars">
            <summary>
            Returns the command bars for the view part. The view part should add any view part-specific command bar items here.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewPartSite.ServiceContext">
            <summary>
            Returns this view part site's service context, which can be used to acess and register services specific to its view part.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPartSite.OnShow">
            <summary>
            Called by the view when the associated view part is shown.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPartSite.OnHide">
            <summary>
            Called by the view when the associated view part is hidden.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPartSite.OnActivate">
            <summary>
            Called by the view when the associated view part is activated.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPartSite.OnDeactivate">
            <summary>
            Called by the view when the associated view part is deactivated.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewPartSite.SetViewPartCommandBarVisibility(System.Boolean)">
            <summary>
            Called by the view to control the visibility of this view part's command bars.
            </summary>
            <param name="visible">Boolean indicating whether to show or hide this view part's coimmand bars.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.ViewReferenceEventHandler">
            <summary>
            Delegate for events related to a view reference.
            </summary>
            <param name="viewReference">The view reference to which the event applies.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.IViewReference">
            <summary>
            A window always interacts with views through a view reference. This allows
            the window to only actually create the view (see <see cref="P:Sdl.Desktop.Platform.IViewReference.View"/>) whenever it is activated for the first time.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewReference.EnabledChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.IViewReference.Enabled"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewReference.AvailableChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.IViewReference.Available"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewReference.Window">
            <summary>
            Returns the owning window.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewReference.Id">
            <summary>
            Return sthe unique id of the view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewReference.Name">
            <summary>
            Returns the friendly name of this view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewReference.Description">
            <summary>
            Returns the description of this view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewReference.Icon">
            <summary>
            Returns  an icon representing this view. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewReference.HelpTopic">
            <summary>
            Returns the help topic ID associated with this view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewReference.Shortcut">
            <summary>
            Returns a shortcut which can be used to activate this view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewReference.Enabled">
            <summary>
            Returns whether this view is currently enabled.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewReference.Available">
            <summary>
            Returns whether this view is currently available.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewReference.IsInitialized">
            <summary>
            Returns whether the view associated with this view reference has been initialized (see also <see cref="P:Sdl.Desktop.Platform.IViewReference.View"/>).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewReference.View">
            <summary>
            Returns the view associated with this view reference. Implementers of this interface should
            make sure that lazy initialization is used, so that the view is only actually created when this property is queried for the first time.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.IViewSite">
            <summary>
            Represents a view site, which is the primary interface between a view and its owning
            window. For every view, there is exactly one view site. The site is created when necessary, right before the
            view is about to be shown for the first time. The view site also has its own service context, which can be used to acess and register
            services specific to its view.
            </summary>
            <remarks>This interface is not intended to be implemented by clients.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewSite.Window">
            <summary>
            Returns the owning window.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewSite.ViewReference">
            <summary>
            Returns the reference to the view that belongs to this site.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewSite.CommandBars">
            <summary>
            Returns the command bars for the view. The view should add any view-specific command bar items here.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewSite.ServiceContext">
            <summary>
            Returns this view site's service context, which can be used to acess and register services specific to its view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewSite.ViewTitle">
            <summary>
            Gets or sets the view title.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.ViewPartStateEventHandler">
            <summary>
            Delegate for events related to a particular part within a view with parts (see <see cref="T:Sdl.Desktop.Platform.IViewWithParts"/>).
            </summary>
            <param name="view">The view to which the part belongs.</param>
            <param name="viewPartReference">A reference to the view part to which the event applies.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.ViewPartStateCancelEventHandler">
            <summary>
            Delegate for cancellable events related to a particular part within a view with parts (see <see cref="T:Sdl.Desktop.Platform.IViewWithParts"/>).
            </summary>
            <param name="view">The view to which the part belongs.</param>
            <param name="viewPartReference">A reference to the view part to which the event applies.</param>
            <param name="cancel">Boolean which can be set to false in event handlers to cancel the event.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.IViewWithParts">
            <summary>
            Represents a view consisting of several view parts. Clients should implement this interface to add a new view to the studio.
            Typically you do not implement this interface directly, but derive from <see cref="T:Sdl.Desktop.Platform.AbstractViewWithParts"/> instead. This class
            already provides a base implementation with standard functionality.
            
            Typically, users should extend <see cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>, for
            a view consisting of a central MDI interface, accompanied by view parts that can be docked on on all sides.
            </summary>    
            <seealso cref="T:Sdl.Desktop.Platform.AbstractViewWithParts"/>
            <seealso cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>
            <seealso cref="T:Sdl.Desktop.Platform.AbstractDockingViewEx"/>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewWithParts.ViewPartAdded">
            <summary>
            Raised when a new view part is added to the view.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewWithParts.ViewPartRemoved">
            <summary>
            Raised when a view part is removed from the view. 
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewWithParts.ViewPartInitialized">
            <summary>
            Raised right after a view part has been created and initialized with its view part site (see <see cref="M:Sdl.Desktop.Platform.IViewPart.Init(Sdl.Desktop.Platform.IViewPartSite,Sdl.Core.Settings.ISettingsGroup)"/> and <see cref="T:Sdl.Desktop.Platform.IViewPartSite"/>).
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewWithParts.ViewPartShown">
            <summary>
            Raised after a view part is shown in the view.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewWithParts.ViewPartHidden">
            <summary>
            Raised after a view part is hidden in the view.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewWithParts.ViewPartActivated">
            <summary>
            Raised after a view part has been activated in the view.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewWithParts.ViewPartDeactivated">
            <summary>
            Raised after a view part has been deactivated in the view.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.IViewWithParts.ActiveViewPartChanged">
            <summary>
            Raised after the active view part has changed. This event is raised after <see cref="E:Sdl.Desktop.Platform.IViewWithParts.ViewPartActivated"/>.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewWithParts.ActiveViewPart">
            <summary>
            Gets or sets the active view part in this view. The view part has to belong to this view and has to be available (see <see cref="P:Sdl.Desktop.Platform.IViewPartReference.Available"/>).
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when trying to set a view part reference that does not belong to this view.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to set a view part reference that is not available (see <see cref="P:Sdl.Desktop.Platform.IViewPartReference.Available"/>).</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewWithParts.ViewParts">
            <summary>
            Returns the list of view parts that belong to this view. This includes non available and disabled parts.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewWithParts.CreateViewPartToolBarManager(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Returns a new toolbar manager that should be used by the specified view part. Whe  this method returns null, the view creates a default
            toolbar manager.
            </summary>
            <param name="viewPartReference">The view part reference for which to create a toolbar manager.</param>
            <returns>The newly created toolbar manager, or null to use the default view toolbar manager.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewWithParts.RegisterViewPartCommandBarProvider(Sdl.Desktop.Platform.IViewPartCommandBarProvider)">
            <summary>
            Registers a view part command bar provider. This allows adding items to command bars that are only 
            available to certain view parts.
            </summary>
            <param name="viewPartCommandBarProvider">The view part command bar provider to register.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if viewPartCommandBarProvider is null.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.IViewWithParts.ViewPartCommandBarProviders">
            <summary>
            Gets the list of command bar providers that are registered in this view.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewWithParts.UpdateViewPartCommandBarProviderVisibility">
            <summary>
            Updates the visibility is of command bar contributions from view part command bar providers.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewWithParts.IsInView(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Returns true if the contents of the viewpart are currently in the viewable area.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewWithParts.InitializeViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Initializes the specified view part without showing it.
            </summary>
            <remarks>The view part has to be part of this view. Note that <see cref="M:Sdl.Desktop.Platform.AbstractViewWithParts.ShowViewPart(Sdl.Desktop.Platform.IViewPartReference,System.Boolean)"/>
            implicitly initializes the view part if it has not been initialized yet.</remarks>
            <param name="viewPartReference">The reference to the view part to initialize.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewWithParts.ShowViewPart(Sdl.Desktop.Platform.IViewPartReference,System.Boolean)">
            <summary>
            Shows the specified view part in this view.
            </summary>
            <remarks>The view part has to be part of this view.</remarks>
            <param name="viewPartReference">The reference to the view part to initialize.</param>
            <param name="selectTab">Specifies whether the tab should be selected.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.IViewWithParts.HideViewPart(Sdl.Desktop.Platform.IViewPartReference)">
            <summary>
            Hides the specified view part in this view.
            </summary>
            <remarks>The view part has to be part of this view.</remarks>
            <param name="viewPartReference">The reference to the view part to hide.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.IWindowAwareCommandLineProcessor">
            <summary>
            Represents a command line processor whihc is should be executed after the application window has been shown.
            For more information <see cref="T:Sdl.Desktop.Platform.ICommandLineProcessor"/>.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.IWindowAwareCommandLineProcessor.Window">
            <summary>
            Gets or sets the application winodw. This property is set by the framework before <see cref="M:Sdl.Desktop.Platform.ICommandLineProcessor.ProcessCommandLine(Sdl.Desktop.Platform.CommandLineArguments)"/> is called.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.LicensedFeatureAttribute">
            <summary>
             Attribute to define license checks on a particular class
             Intended for use on views, viewparts and actions
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.LicensedFeatureAttribute.#ctor(System.String)">
            <summary>
             Constructor with basic properties
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.LicensedFeatureAttribute.Feature">
            <summary>
             The license module to check out when licensing this class
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.LicensedFeatureOverridableAttribute">
            <summary>
             Attribute to define license checks on a particular class. Intended for use on views, viewparts and actions.
             Enables license override - if a particular feature is not licensed but should be enabled nevertheless.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.LicensedFeatureOverridableAttribute.OverrideLicense">
            <summary>
            Returns true if the feature should be enabled even that the license says otherwise.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.LicensedFeatureOverridableAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
             Constructor with basic properties
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.MVVM.ValidationViewModelBase">
            <summary>
            Base class for view models with attribute-based validation
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.MVVM.ValidationViewModelBase.Set``1(System.String,``0)">
            <summary>
            <see cref="M:Sdl.Desktop.Platform.MVVM.ViewModelBase.Set``1(System.String,``0)"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.MVVM.ValidationViewModelBase.ClearErrors">
            <summary>
            Clears all view model errors
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.MVVM.ValidationViewModelBase.Validate">
            <summary>
            Validates all properties at once
            </summary>
            <returns>True - if the viewmodel has no errors</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.MVVM.ValidationViewModelBase.HasErrors">
            <summary>
            <see cref="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors"/>
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.MVVM.ValidationViewModelBase.ErrorsChanged">
            <summary>
            <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged"/>
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.MVVM.ValidationViewModelBase.GetErrors(System.String)">
            <summary>
            <see cref="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)"/>
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.NetworkConnectionUtil">
            <summary>
            Utility class to retrieve information about network connections.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.NetworkConnectionUtil.NetworkConnected">
            <summary>
            Gets a value indicating whether the computer is connected to one or more networks.
            </summary>
            <value><c>true</c> if a network connection is found; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.NetworkConnectionUtil.HasInternetConnection">
            <summary>
            Check if Internet Connection can be established
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.OS.SystemResourcesStatistics">
            <summary>
            SystemResourceStatistics class represents statistics for the system resources used by a process.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.OS.SystemResourcesStatistics.#ctor">
            <summary>
            Default constructor that uses the current process.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.OS.SystemResourcesStatistics.#ctor(Sdl.Desktop.Platform.OS.IProcessAdapter)">
            <summary>
            Constructor that uses the given process.
            </summary>
            <param name="processAdapter">process</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.OS.SystemResourcesStatistics.GetSystemResourcesStatisticsDictionary">
            <summary>
            Gets the system resources statistics dictionary.
            </summary>
            <returns>system resource statistics dictionary</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.OS.SystemResourcesStatistics.GetProcessName">
            <summary>
            Gets the process name of the process; "SDLTradosStudio.exe"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.OS.SystemResourcesStatistics.GetPhysicalMemorySize">
            <summary>
            Gets the physical memory size of the process; "Mem Usage"
            </summary>
            <returns>physical memory size</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.OS.SystemResourcesStatistics.GetVirtualMemorySize">
            <summary>
            Gets the virtual memory size of the process; "VM Size"
            </summary>
            <returns>virtual memory size</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.OS.SystemResourcesStatistics.GetThreadCount">
            <summary>
            Gets the thread count of the process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.OS.SystemResourcesStatistics.GetHandleCount">
            <summary>
            Gets the handle count of the process.
            </summary>
            <returns>handle count</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.OS.SystemResourcesStatistics.GetGdiHandleCount">
            <summary>
            Gets the gdi handle count used by the process.
            </summary>
            <returns>gdi handle count</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.OS.SystemResourcesStatistics.GetUserHandleCount">
            <summary>
            Gets the user handle count used by the process.
            </summary>
            <returns>user handle count</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.OS.SystemResourcesStatistics.GetTotalProcessorTime">
            <summary>
            Gets the total processor time of the process.
            </summary>
            <returns>total processor time</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.PluginManagement.PluginLoaderOutput.SplashScreenShowError(System.String,System.String)">
            <summary>
            Display a Error to user but make sure it is on top of the splash screen if visible.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.PluginManagement.PluginLoaderOutput.SplashScreenAskYesNoQuestion(System.String,System.String)">
            <summary>
            Display a yes/no question to user but make sure it is on top of the splash screen if visible.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.PluginManagement.StudioPluginManager.SetPluginRegistryAtAPI(Sdl.Platform.Interfaces.DI.IContainer)">
            <summary>
            Composition root for ProjectAPI used when Studio is not started
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Properties.Resources.Office2013DarkGray">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Properties.Resources.Office2013LightGray">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Properties.Resources.Office2013White">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.AbstractJobRequest">
            <summary>
            Abstract base class for job requests.
            </summary>
            <remarks>
            Schedule a job request with the job service (see <see cref="T:Sdl.Desktop.Platform.Services.IJobService"/>) to execute an long-running operation asynchronously.
            </remarks>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJobService"/>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.AbstractJobRequest.#ctor(System.String)">
            <summary>
            Constructor for a job request that does not report progress.
            </summary>
            <param name="name">A friendly name for the job request.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when name is null or an empty string.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.AbstractJobRequest.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor fior a job request, specifying whether progress will be reported.
            </summary>
            <param name="name">A friendly name for the job request.</param>
            <param name="reportsProgress">True if the job request reports progress.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when name is null or an empty string.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.AbstractJobRequest.Name">
            <summary>
            Gets or sets the name of this job request.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when name is null or an empty string.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.AbstractJobRequest.Icon">
            <summary>
            Gets or sets the icon representing the job. Can be null.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.AbstractJobRequest.ReportsProgress">
            <summary>
            Gets or sets whether this job request reports progress information.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.AbstractJobRequest.IsBackground">
            <summary>
            Gets or sets whether the wait cursor should be shown while this job is being executed. True by default.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.AbstractJobRequest.Execute(Sdl.Desktop.Platform.Services.IJobExecutionContext)">
            <summary>
            Executes this job request.
            </summary>
            <remarks>
            <para>Override this method to implement the long-running operation.</para>
            <para>This method is called on a different thread than the UI thread. In case you need to do UI updates, it is recommended to do this
            in <see cref="M:Sdl.Desktop.Platform.Services.AbstractJobRequest.AfterExecute(Sdl.Desktop.Platform.Services.IJob)"/>. Otherwise, make sure to use <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)"/> or <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)"/> to access UI
            controls.</para></remarks>
            <param name="context">The job execution context, which can be used to report progress, to check whether the job was cancelled by the user,
            or to cancel the job. When context.CancelRequested <see cref="P:Sdl.Desktop.Platform.Services.IJobExecutionContext.CancelRequested"/> returns true, just return from the
            <see cref="M:Sdl.Desktop.Platform.Services.AbstractJobRequest.Execute(Sdl.Desktop.Platform.Services.IJobExecutionContext)"/> method to complete the cancellation process.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.AbstractJobRequest.AfterExecute(Sdl.Desktop.Platform.Services.IJob)">
            <summary>
            Called after the job has been executed.
            </summary>
            <remarks>
            <para>Override this method to do something after the job has been executed.</para>
            <para>This method is called regardless of whether the job request was executed sucessfully. Check <see cref="P:Sdl.Desktop.Platform.Services.IJob.Status"/>
            to determine whether the job was executed successfully.</para>
            <para>This method is called on the UI thread.</para>
            </remarks>
            <param name="job">The job object, which can be used to determine whether the job was executed successfully.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.AbstractJobRequest.RaiseJobFinishedEvent(Sdl.Desktop.Platform.Services.JobResultEventArgs)">
            <summary>
            Raise before job exiting execution
            </summary>
            <param name="e">Job event</param>
            <remarks>This execution will run on the thread that is executint he job. 
            Any UI related work will throw an error since the UI context is unavailable. 
            Use Dispatcher to avoid this problem.
            </remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.AbstractService">
            <summary>
            Abstract base class for implementing services.
            </summary>
            <remarks>
            <para>Users should typically extend <see cref="T:Sdl.Desktop.Platform.Services.AbstractService"/> instead of directly implementing <see cref="T:Sdl.Desktop.Platform.Services.IService"/>.</para>
            <para>For more inforation on how to implement services, see <see cref="T:Sdl.Desktop.Platform.Services.IService"/>.</para>
            </remarks>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IService"/>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IServiceContext"/>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.AbstractService.IsStarted">
            <summary>
            True if the service is started.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.AbstractService.Context">
            <summary>
            Gets the service context with which this service is registered.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.AbstractService.Start(Sdl.Desktop.Platform.Services.IServiceContext)">
            <summary>
            Starts the service.
            </summary>
            <remarks>This method is called by the framework when the service is first accessed.</remarks>
            <param name="context">The service context with which the service is registered. Can be used to access functionality provided by other services available in this service context.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.AbstractService.Stop">
            <summary>
            Stops the service.
            </summary>
            <remarks>This method is called by the framework when appropriate and should not be called from user code.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.AbstractService.OnStart">
            <summary>
            Called when the service is started. Override this method to perform additional initialization after the service is started.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.AbstractService.OnStop">
            <summary>
            Called when the service is stopped. Override this method to perform additional cleanup after the service is stopped.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.GlobalServices">
            <summary>
            Static class providing access to the global service context (see <see cref="T:Sdl.Desktop.Platform.Services.IServiceContext"/>) and to 
            some well-known global service that are always available in the studio.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.GlobalServices.Context">
            <summary>
            Returns the global service context.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.GlobalServices.UserSettingsService">
            <summary>
            Returns the settings service.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.GlobalServices.MessageService">
            <summary>
            Returns the message service.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.GlobalServices.HelpService">
            <summary>
            Returns the help service.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.GlobalServices.LicensingService">
            <summary>
            Returns the licensing service.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.GlobalServices.JobService">
            <summary>
            Gets the job service.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.GlobalServices.UpdateService">
            <summary>
            Gets the update service.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IEventAggregator.GetEvent``1">
            <summary>
            Returns the event for which to subscribe
            </summary>
            <typeparam name="TEvent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IEventAggregator.Publish``1(``0)">
            <summary>
            Publishes the given event to all subscribers
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="sampleEvent"></param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IFileDescriptorExceptionService">
            <summary>
            Service used for registering exceptions to the file descriptor processing system - mainly for suppressing notifications regarding missing file descriptors
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IFileDescriptorExceptionService.AddDescriptorException(System.String)">
            <summary>
            Adds an exception to the list of file descriptors that are suppressed
            </summary>
            <param name="translatableDocumentDescriptorId"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IFileDescriptorExceptionService.IsDescriptorExempted(System.String)">
            <summary>
            Checks whether the specified file descriptor id is exempted from processing
            </summary>
            <param name="translatableDocumentDescriptorId"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IHelpService">
            <summary>
            Global service providing help functionality to the application
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IHelpService.ShowContextHelp(System.String)">
            <summary>
            Shows the specified help topic in the help viewer.
            </summary>
            <param name="topic">The id of the topic to display as defined in the help map file.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IHelpService.SearchOnHelp(System.String)">
            <summary>
            Searches for a specific string in the online help
            </summary>
            <param name="queryString">The string to search for in the online help</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.JobEventHandler">
            <summary>
            Delegate for events related to jobs.
            </summary>
            <param name="job">The job to which the event applies.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.CompoundJobEventHandler">
            <summary>
            Delegate for events related to jobs within a compound job
            </summary>
            <param name="job">The compound job to which the event applies.</param>
            <param name="childJob">The child job to which the event applies.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IJobService">
            <summary>
            Window specific service for performing asynchronously long-running operations.
            </summary>
            <remarks>
            <para>To access this service, use <see cref="M:Sdl.Desktop.Platform.Services.IServiceContext.GetService``1"/> in a the window service context (<see cref="P:Sdl.Desktop.Platform.IStudioWindow.ServiceContext"/>) or a child context.</para>
            <para>Progress information (if this is provided by the job request) will be displyed within the associated studio window.</para>
            </remarks>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJob"/>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJobExecutionContext"/>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJobRequest"/>
        </member>
        <member name="E:Sdl.Desktop.Platform.Services.IJobService.JobScheduled">
            <summary>
            Raised when a new job has been scheduled using the <see cref="M:Sdl.Desktop.Platform.Services.IJobService.ScheduleJob(Sdl.Desktop.Platform.Services.IJobRequest)"/> method.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IJobService.ScheduleJob(Sdl.Desktop.Platform.Services.IJobRequest)">
            <summary>
            Schedules the specified job for execution.
            </summary>
            <param name="jobRequest">The job request to execute.</param>
            <returns>The job which can be used to monitor the job execution status.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IJobService.ScheduleCompoundJob(System.String,Sdl.Desktop.Platform.Services.IJobRequest[])">
            <summary>
            Schedules a compound job, consisting of a series of jobs executed in sequence.
            </summary>
            <param name="name">A name for the compound job.</param>
            <param name="jobRequests">The job requests.</param>
            <returns>A compound job whioch can be used to monitor the job execution status.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IJobService.ScheduleCompoundJob(System.String,Sdl.Desktop.Platform.Services.IJobRequest[],System.Boolean)">
            <summary>
            Schedules a compound job, consisting of a series of jobs executed in sequence.
            </summary>
            <param name="name">A name for the compound job.</param>
            <param name="jobRequests">The job requests.</param>
            <param name="continueOnError">if set to <c>true</c> and a job fails, the following job(s) will still be executed.</param>
            <returns>A compound job whioch can be used to monitor the job execution status.</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJobService.Jobs">
            <summary>
            Returns the read-only collection of uncompleted jobs.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IAbstractJobRequest">
            <summary>
            Base interface for <see cref="T:Sdl.Desktop.Platform.Services.IJobRequest"/> and <see cref="T:Sdl.Desktop.Platform.Services.ICompoundJobRequest"/>.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IAbstractJobRequest.Name">
            <summary>
            Gets the name of this job request.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IAbstractJobRequest.Icon">
            <summary>
            Gets the icon representing the job. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IAbstractJobRequest.ReportsProgress">
            <summary>
            True if this job request reports progress information.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IAbstractJobRequest.IsBackground">
            <summary>
            True is this job is a background job.
            </summary>
            <remarks>Background jobs allow the user to continue working. No intrusive progress UI or wait cursor is shown. Default is false.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IJobRequest">
            <summary>
            Interface for job requests. 
            </summary>
            <remarks>
            <para>To create a new job request, either extend <see cref="T:Sdl.Desktop.Platform.Services.AbstractJobRequest"/> or create an instance of the <see cref="T:Sdl.Desktop.Platform.Services.JobRequest"/> class.</para>
            <para>Schedule a job request with the job service (see <see cref="T:Sdl.Desktop.Platform.Services.IJobService"/>) to execute an long-running operation asynchronously.</para>
            </remarks>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJob"/>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJobService"/>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJobExecutionContext"/>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IJobRequest.Execute(Sdl.Desktop.Platform.Services.IJobExecutionContext)">
            <summary>
            Executes this job request.
            </summary>
            <remarks>This method is called on a different thread than the UI thread. In case you need to do UI updates, it is recommended to do this
            in <see cref="M:Sdl.Desktop.Platform.Services.IJobRequest.AfterExecute(Sdl.Desktop.Platform.Services.IJob)"/>. Otherwise, make sure to use <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)"/> or <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)"/> to access UI
            controls.</remarks>
            <param name="context">The job execution context, which can be used to report progress, to check whether the job was cancelled by the user,
            or to cancel the job.  When context.CancelRequested <see cref="P:Sdl.Desktop.Platform.Services.IJobExecutionContext.CancelRequested"/> returns true, just return from
            the <see cref="M:Sdl.Desktop.Platform.Services.IJobRequest.Execute(Sdl.Desktop.Platform.Services.IJobExecutionContext)"/> method to complete the cancellation process.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IJobRequest.AfterExecute(Sdl.Desktop.Platform.Services.IJob)">
            <summary>
            Called after the job has been executed.
            </summary>
            <remarks>
            <para>This method is called regardless of whether the job request was executed sucessfully. Check <see cref="P:Sdl.Desktop.Platform.Services.IJob.Status"/>
            to determine whether the job was executed successfully.</para>
            <para>This method is called on the UI thread.</para>
            </remarks>
            <param name="job">The job object, which can be used to determine whether the job was executed successfully.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IJobExecutionContext">
            <summary>
            Represents an execution context of a job request. Can be used by job request implementors to report progress, to check whether the job was cancelled by the user,
            or to cancel the job.
            </summary>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJob"/>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJobService"/>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJobRequest"/>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJobExecutionContext.CancelRequested">
            <summary>
            True if the job request was cancelled by the user. When this property returns true, just return from the <see cref="M:Sdl.Desktop.Platform.Services.IJobRequest.Execute(Sdl.Desktop.Platform.Services.IJobExecutionContext)"/> method to complete the
            cancellation process.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Services.IJobExecutionContext.Canceled">
            <summary>
            Event that can be used to handle job canceling through the API
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IJobExecutionContext.JobCanceled">
            <summary>
            Function that is called by studio to trigger the job canceled event
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IJobExecutionContext.Cancel">
            <summary>
            Call this method to cancel to job request.
            </summary>
            <remarks>After calling this method, you must return from the <see cref="M:Sdl.Desktop.Platform.Services.IJobRequest.Execute(Sdl.Desktop.Platform.Services.IJobExecutionContext)"/> method to complete the
            cancellation process.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IJobExecutionContext.ReportProgress(System.Int32)">
            <summary>
            Reports progress on this job.
            </summary>
            <param name="percentComplete">The percentage (0-100) of this job that is currently completed.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IJobExecutionContext.ReportProgress(System.Int32,System.String)">
            <summary>
            Reports progress on this job.
            </summary>
            <param name="percentComplete">The percentage (0-100) of this job that is currently completed.</param>
            <param name="statusMessage">A message indicating which operation the job is currently performing.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IJobExecutionContext.ReportProgress(System.String)">
            <summary>
            Reports progress on this job.
            </summary>
            <param name="statusMessage">A message indicating which operation the job is currently performing.</param>
            <remarks>The value of percent complete stays the same.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.JobStatus">
            <summary>
            Possible statuses of a job.
            </summary>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJob"/>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJobService"/>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJobExecutionContext"/>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IJobRequest"/>
        </member>
        <member name="F:Sdl.Desktop.Platform.Services.JobStatus.Scheduled">
            <summary>
            The initial job status: the job is scheduled for execution, but has not started executing yet.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Services.JobStatus.Running">
            <summary>
            The job is being executed: the job is in this status while the <see cref="M:Sdl.Desktop.Platform.Services.IJobRequest.Execute(Sdl.Desktop.Platform.Services.IJobExecutionContext)"/> method is running.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Services.JobStatus.Cancelling">
            <summary>
            The user has requested to cancel the job, but the job itself has not responded to this yet by returning from the <see cref="M:Sdl.Desktop.Platform.Services.IJobRequest.Execute(Sdl.Desktop.Platform.Services.IJobExecutionContext)"/>  method.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Services.JobStatus.Cancelled">
            <summary>
            The job has been successfully cancelled.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Services.JobStatus.Failed">
            <summary>
            The job has failed. Consult <see cref="P:Sdl.Desktop.Platform.Services.IJob.Exception"/> for exception information.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Services.JobStatus.Completed">
            <summary>
            The job has been executed successfully.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IJob">
            <summary>
            Represents a job scheduled through the job service (see <see cref="T:Sdl.Desktop.Platform.Services.IJobService"/>).
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Services.IJob.StatusChanged">
            <summary>
            Raised when the status of the job changes (see <see cref="P:Sdl.Desktop.Platform.Services.IJob.Status"/>).
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Services.IJob.Finished">
            <summary>
            Raised when the job is finished (Completed, Cancelled or Failed).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJob.Name">
            <summary>
            Gets the name of the underlying job request.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJob.Icon">
            <summary>
            Gets the icon representing the job. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJob.Request">
            <summary>
            Returns the job request.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJob.JobService">
            <summary>
            Gets the job service on which this job is executing.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJob.Status">
            <summary>
            Gets the status of the job.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJob.IsFinished">
            <summary>
            Returns true if the job has been completed, failed or cancelled.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJob.PercentComplete">
            <summary>
            Gets the percentage (0-100) of the job completed so far.
            </summary>
            <remarks>The availability of this information depends on the job request (see <see cref="P:Sdl.Desktop.Platform.Services.IAbstractJobRequest.ReportsProgress"/>).</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJob.StatusMessage">
            <summary>
            Gets the status message, describing the current operation the job is performing. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJob.IsBackground">
            <summary>
            True if this job is a background job.
            </summary>
            <remarks>For more information see <see cref="P:Sdl.Desktop.Platform.Services.IAbstractJobRequest.IsBackground"/>.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJob.ReportsProgress">
            <summary>
            True if this job request reports progress information.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IJob.Exception">
            <summary>
            Gets the exception that has occurred while executing the job. Null while the job is running and when the job is sucessfully completed or cancelled.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IJob.Cancel">
            <summary>
            Requests cancellation of the job. 
            </summary>
            <remarks>This sets the job status to <see cref="F:Sdl.Desktop.Platform.Services.JobStatus.Cancelling"/>. Handle the <see cref="E:Sdl.Desktop.Platform.Services.IJob.StatusChanged"/> event
            to get notified when the job request has responded to the cancellation request and the job status has changed to <see cref="F:Sdl.Desktop.Platform.Services.JobStatus.Cancelled"/>.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.ICompoundJobRequest">
            <summary>
            Interface for a compound job request.
            A compound job consists of a series of jobs executed in sequence.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.ICompoundJobRequest.Requests">
            <summary>
            The job requests from which jobs will be created and executed in sequence.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.ICompoundJob">
            <summary>
            Represents a a series of sequentially executed jobs, scheduled through the job service (see <see cref="T:Sdl.Desktop.Platform.Services.IJobService"/>).
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Services.ICompoundJob.StatusChanged">
            <summary>
            Raised when the compound job's status changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.ICompoundJob.Jobs">
            <summary>
            Gets the jobs representing the individual job requests.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.ICompoundJob.ContinueOnError">
            <summary>
            If <c>true</c> and a job fails, the following job(s) will still be executed.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.JobCollection">
            <summary>
            Read-only collection of jobs.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.ILicensingService">
            <summary>
            Global service providing licensing services to the application.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ILicensingService.StartupLicenseCheck">
            <summary>
            Call on start-up, to check the current license and show the license manager if necessary.
            </summary>
            <returns>true if the license check succeeded. If false, then the program should be exited without running the product.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ILicensingService.IsFeatureActive(System.String)">
            <summary>
            Checks the current license for the specified feature, woth optional parameter to consume a seat
            </summary>
            <returns>True if there is a valid product license and the product license has this feature</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ILicensingService.ShowLicenseDialog">
            <summary>
            Shows the license manager dialog. This can be called while the product is running, e.g. from the Help->About menu
            </summary>
            <returns>true if the product is licensed (authorized).
            If false, then the program should be exited.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ILicensingService.ResetLicenseValidationForCurrentMachine">
            <summary>
            Reset the license validation for current machine (eg: DomainExecutionLicenceCheck, TerminalServicesLicenceCheck etc)
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ILicensingService.ValidateActiveLicense">
            <summary>
            Close Studio is it doesn't have a valid license
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.ILicensingService.HasDomainExecutionLicenceCheckFailed">
            <summary>
            If set, indicates Studio is running on a domain network without an appropriate license
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.ILicensingService.HasTerminalServicesLicenceCheckFailed">
            <summary>
            If set, indicates Studio is running in Terminal Services without an appropriate license
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.ILicensingService.LicenseName">
            <summary>
            Get the current license name
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IMessageService">
            <summary>
            Global service for displaying error, warning or information messages and questions.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.AskQuestion(System.Windows.Forms.IWin32Window,System.String,Sdl.Desktop.Platform.Buttons)">
            <summary>
            Asks a question with the specified possible buttons.
            </summary>
            <param name="owner">The owner for the message dialog.</param>
            <param name="question">The question.</param>
            <param name="buttons">The buttons to display on the message dialog</param>
            <returns>The button clicked by the user.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.AskQuestion(System.Windows.Forms.IWin32Window,System.String,Sdl.Desktop.Platform.Buttons,System.String)">
            <summary>
            Asks a question with the specified possible buttons.
            </summary>
            <param name="owner">The owner for the message dialog.</param>
            <param name="question">The question.</param>
            <param name="buttons">The buttons to display on the message dialog</param>
            <param name="dialogTitle">The title of dialog</param>
            <returns>The button clicked by the user.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.AskOptionalQuestion(System.Windows.Forms.IWin32Window,System.String,System.String,Sdl.Desktop.Platform.Buttons)">
            <summary>
            Ask an optional question.
            </summary>
            <remarks>
            <para>The user has the ability to specify not to ask the question again. The answer is stored in the user settings.</para>
            <para>The singleton message service instance can be accessed through <see cref="P:Sdl.Desktop.Platform.Services.GlobalServices.MessageService"/>.</para></remarks>
            <param name="owner">The owner for the message dialog.</param>
            <param name="question">The question.</param>
            <param name="answerSettingKey">The settings key to use for storing or retrieving the answer.</param>
            <param name="buttons">The buttons to display on the message dialog.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.AskOptionalQuestion(System.Windows.Forms.IWin32Window,System.String,Sdl.Desktop.Platform.Buttons,System.Boolean@)">
            <summary>
            Ask an optional question.
            </summary>
            <remarks>This overload does NOT use the user settings to store and retrieve user choices.
            Instead, the caller of this method is responsible for storing the user's choice depending 
            on the <paramref name="dontAskAgain"/> parameter.</remarks>
            <param name="owner">The owner for the message dialog.</param>
            <param name="question">The question.</param>
            <param name="buttons">The buttons to display on the message dialog.</param>
            <param name="dontAskAgain"><c>true</c> if the user selected the "don't ask again" option on the dialog.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.AskYesNoCancelQuestion(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Asks a yes no cancel question.
            </summary>
            <param name="owner">The owner.</param>
            <param name="question">The question.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.AskYesNoCancelQuestion(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Asks a yes no cancel question.
            </summary>
            <param name="owner">The owner.</param>
            <param name="question">The question.</param>
            <param name="caption">The caption</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.AskYesNoQuestion(System.String)">
            <summary>
            Asks the yes no question.
            </summary>
            <param name="question"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.AskYesNoQuestion(System.String,System.String)">
            <summary>
            Asks the yes no question.
            </summary>
            <param name="question">The question.</param>
            <param name="caption">The caption.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.AskYesNoQuestion(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Asks the yes no question.
            </summary>
            <param name="owner">The owner.</param>
            <param name="question">The question.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.AskYesNoQuestion(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Asks the yes no question.
            </summary>
            <param name="owner">The owner.</param>
            <param name="question">The question.</param>
            <param name="caption">The caption.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShouldAskOptionalQuestion(System.String)">
            <summary>
            An optional question should be asked if an answer for it is not already stored in the user settings.
            </summary>
            <param name="answerSettingKey">The settings key used for storing the answer.</param>
            <returns><c>true</c> if an answer is already stored.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.GetOptionalQuestionAnswer(System.String)">
            <summary>
            Gets the optional question answer.
            </summary>
            <param name="answerSettingKey">The answer setting key.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.SetOptionalQuestionAnswer(System.String,System.Windows.Forms.DialogResult)">
            <summary>
            Sets the optional question answer.
            </summary>
            <param name="answerSettingKey">The answer setting key.</param>
            <param name="res">The result.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowError(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Shows the error.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowError(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Shows the error.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="caption">the caption</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowError(System.String)">
            <summary>
            Shows the error.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowError(System.String,System.String)">
            <summary>
            Shows the error.
            </summary>
            <param name="text">The text.</param>
            <param name="caption">the caption</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowInformation(System.String)">
            <summary>
            Shows the information.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowInformation(System.String,System.String)">
            <summary>
            Shows the information.
            </summary>
            <param name="text">The text.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowInformation(System.String,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Shows the information.
            </summary>
            <param name="text">The text.</param>
            <param name="caption">The caption.</param>
            <param name="icon"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowInformation(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Shows the information.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowInformation(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Shows the information.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowYesNoInformation(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Shows the yes no information.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowRetryCancelInformation(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Shows the retry/cancel information message.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowYesNoCancelInformation(System.String,System.String)">
            <summary>
            Shows the yes no information.
            </summary>
            <param name="text">the text</param>
            <param name="caption">the caption</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowOkCancelError(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Shows the ok cancel error.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowOkCancelWarning(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Shows the ok cancel warning.
            </summary>
            <param name="owner">The owner.</param>
            <param name="question">The question.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowOkCancelWarning(System.String,System.String)">
            <summary>
            Shows the ok cancel warning.
            </summary>
            <param name="question">the question</param>
            <param name="caption">the caption</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowOptionalWarning(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Shows the optional warning.
            </summary>
            <param name="owner">The owner.</param>
            <param name="warning">The warning.</param>
            <param name="answerSettingKey">The answer setting key.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowOptionalWarning(System.Windows.Forms.IWin32Window,System.String,System.Boolean@)">
            <summary>
            Shows the optional warning.
            </summary>
            <param name="owner">The owner.</param>
            <param name="warning">The warning.</param>
            <param name="dontAskAgain"><c>true</c> if the user selected the "don't ask again" option on the dialog.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowWarning(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Shows the warning.
            </summary>
            <param name="owner">The owner.</param>
            <param name="warning">The warning.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowWarning(System.String)">
            <summary>
            Shows the warning.
            </summary>
            <param name="warning">the warning</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowWarning(System.String,System.String)">
            <summary>
            Shows the warning.
            </summary>
            <param name="warning">The warning.</param>
            <param name="caption">The caption</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowWarning(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Shows the warning.
            </summary>
            <param name="owner">The owner.</param>
            <param name="warning">The warning.</param>
            <param name="caption">The caption</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowYesNoError(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Shows the yes no error.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowYesNoCancelError(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Shows the yes no cancel error.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowYesNoWarning(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Shows the yes no warning.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowYesNoWarning(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Shows the yes no warning.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="caption">the caption</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowYesNoCancelWarning(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Shows the yes no cancel warning.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IMessageService.ShowYesNoCancelWarning(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            Shows the yes no cancel warning.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="caption"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.InvalidServiceException">
            <summary>
            Exception thrown when specifiying an service interface or implementation type.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.InvalidServiceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.InvalidServiceException"/> class.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.InvalidServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.InvalidServiceException"/> class
            with a specified message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.InvalidServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.InvalidServiceException"/> class
            with a specified message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.InvalidServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.StudioException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IProcessStarter.StartInFileExplorer(System.String)">
            <summary>
            Open containing folder for this file.
            </summary>
            <param name="fullPath">Full path of the file.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IProcessStarter.OpenFile(System.String)">
            <summary>
            Attempt to open a file with the associated app if any exists. If no app is defined for this file type, it falls back on "Open File With..." functionality.
            </summary>
            <param name="fullPath"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IProcessStarter.Start(System.String)">
            <summary>
            Default implementation; calls Process.Start with fileName as parameter.
            In .NET API, Process.Start returns System.Diagnostics.Process; but our calling code never seems to use the return value, so it has been completely omitted from wrapper.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IService">
            <summary>
            Represents a service within the studio.
            </summary>
            <remarks>
            <para>A service is a unit that exposes certain functionality to other components in the Studio, through an interface.</para>
            <para>A service should always be registered with a specific service context, which defines to which components the service functionality is available.
            Components who want to consume a certain service, need to get a reference to the service, though the service context available to them.</para>
            <para>Service can be registered with a service context programmatically using <see cref="M:Sdl.Desktop.Platform.Services.IServiceContext.RegisterService(Sdl.Desktop.Platform.Services.IService)"/>, but they can also
            be registered declaratively as a plug-in, by annotating your service implementation class with the Service extension attribute (see <see cref="T:Sdl.Desktop.Platform.Services.ServiceAttribute"/>).
            It is recommended to register services as a plug-in. This allows the service to be instantiated on-demand and makes sure the service is available
            when other components within the studio request it.</para>
            <para>Users should typically extend <see cref="T:Sdl.Desktop.Platform.Services.AbstractService"/> instead of directly implementing <see cref="T:Sdl.Desktop.Platform.Services.IService"/>.</para>
            <para>For more information, see <see cref="T:Sdl.Desktop.Platform.Services.IServiceContext"/>.</para>
            </remarks>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IServiceContext"/>
            <seealso cref="T:Sdl.Desktop.Platform.Services.ServiceAttribute"/>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IService.IsStarted">
            <summary>
            True if the service is started.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IService.Context">
            <summary>
            Gets the service context with which this service is registered.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IService.Start(Sdl.Desktop.Platform.Services.IServiceContext)">
            <summary>
            Starts the service.
            </summary>
            <remarks>This method is called by the framework when the service is first accessed.</remarks>
            <param name="context">The service context with which the service is registered. Can be used to access functionality provided by other services available in this service context.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IService.Stop">
            <summary>
            Stops the service.
            </summary>
            <remarks>This method is called by the framework when appropriate and should not be called from user code.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IServiceContext">
            <summary>
            A service context defines a scope within which services are registered and made available.
            The available service contexts are:
            <list type="">
            <item><b>Global</b>: services available throughout the studio. Can be accessed through <see cref="P:Sdl.Desktop.Platform.Services.GlobalServices.Context" />.</item>
            <item><b>Window</b>: services available to components within a certain studio window. Can be accessed through <see cref="P:Sdl.Desktop.Platform.IStudioWindow.ServiceContext"/>.</item>
            <item><b>View</b>: services available to components within a certain view. Can be accessed through <see cref="P:Sdl.Desktop.Platform.IViewSite.ServiceContext"/>.</item>
            <item><b>View Part: services available to components within a certain view part. Can be accessed through <see cref="P:Sdl.Desktop.Platform.IViewPartSite.ServiceContext"/>.</b>: </item>
            </list>
            Service contexts are organized hierarchically: all services registered with the parent service contexts of a service are always available though the child service context.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IServiceContext.Window">
            <summary>
            Gets the studio window with which this service context is associated, or null if this service context is the global service context.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IServiceContext.Parent">
            <summary>
            Gets the parent service context; can be null.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IServiceContext.GetService``1">
            <summary>
            Gets the service of the given type.
            </summary>
            <remarks>
            <para>When there is no service available for the specified type within the current service context, the parent service context is consulted, until a service is found
            or the global service context is reached.</para>
            <para>A service is always started automatically when first requested.</para>
            </remarks>
            <typeparam name="T">The requested service type.</typeparam>
            <returns>The requested service.</returns>
            <exception cref="T:Sdl.Desktop.Platform.Services.ServiceNotAvailableException">Thrown when no service for the specified type is registered in this service context or any of the parent service contexts.</exception>
            <exception cref="T:Sdl.Desktop.Platform.Services.ServiceCreationException">Thrown if the service factory for the requested service fails to create the service.</exception>
            <exception cref="T:Sdl.Desktop.Platform.Services.ServiceStartException">Thrown if the service failes to start.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IServiceContext.TryGetService``1(``0@)">
            <summary>
            Tries to get the service of the given type.
            </summary>
            <remarks>
            <para>When there is no service available for the specified type within the current service context, the parent service context is consulted, until a service is found
            or the global service context is reached.</para>
            <para>A service is always started automatically when first requested.</para>
            </remarks>
            <param name="service">The service; or null if no such service is available.</param>
            <typeparam name="T">The requested service type.</typeparam>
            <returns>True if the servic was found; false otherwise.</returns>
            <exception cref="T:Sdl.Desktop.Platform.Services.ServiceCreationException">Thrown if the service factory for the requested service fails to create the service.</exception>
            <exception cref="T:Sdl.Desktop.Platform.Services.ServiceStartException">Thrown if the service failes to start.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IServiceContext.RegisterService(Sdl.Desktop.Platform.Services.IService)">
            <summary>
            Registers a service with this service context.
            </summary>
            <param name="service">The service to register.</param>
            <remarks>A service always needs to implement an interface that extends the <see cref="T:Sdl.Desktop.Platform.Services.IService"/> interface.</remarks>
            <exception cref="T:Sdl.Desktop.Platform.Services.InvalidServiceException">Thrown when the specified object does not implement an interface that extends IService.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when service is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IServiceContext.RegisterService(Sdl.Desktop.Platform.Services.IService,System.Type)">
            <summary>
            Registers a service with this service context, with a specific service interface type.
            This method can be used to register the same object multiple times, but against a different service interface.
            </summary>
            <param name="service">The service to register.</param>
            <param name="serviceInterfaceType">The service interface type, which extens <see cref="T:Sdl.Desktop.Platform.Services.IService"/> and is implemented by the specified service object.</param>
            <exception cref="T:System.ArgumentException">Thrown when the specified type does not extend <see cref="T:Sdl.Desktop.Platform.Services.IService"/>, or when
            the specified object does not implement the specified service interface.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when service or type is null.</exception>
            <exception cref="T:Sdl.Desktop.Platform.Services.InvalidServiceException">Thrown when serviceInterfaceType is not a valid service interface type.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IServiceContext.UnregisterService(System.Type)">
            <summary>
            Unregisters the service with the specified type.
            </summary>
            <remarks>Unregistering a service also stops it.</remarks>
            <param name="serviceInterfaceType">The service type for which to unregister the corresponding service.</param>
            <exception cref="T:Sdl.Desktop.Platform.Services.ServiceNotAvailableException">Thrown when no service for the specified type is registered in this service context.</exception>
            <exception cref="T:Sdl.Desktop.Platform.Services.ServiceStopException">Thrown when the service could not be stopped.</exception>
            <exception cref="T:Sdl.Desktop.Platform.Services.InvalidServiceException">Thrown when serviceInterfaceType is not a valid service interface type.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when serviceInterfaceType is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IServiceContext.RegisterServiceFactory(System.Type,Sdl.Desktop.Platform.Services.IServiceFactory)">
            <summary>
            Registers a service factory with this service context.
            </summary>
            <param name="serviceInterfaceType">The type of service the specified service factory produces.</param>
            <param name="serviceFactory">The service factory to register.</param>
            <remarks>A service factory is an additional indirection which enables implementing a on demand service creation strategy.</remarks>
            <exception cref="T:Sdl.Desktop.Platform.Services.InvalidServiceException">Thrown when serviceInterfaceType is not a valid service interface type.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when serviceInterfaceType or serviceFactory is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IServiceContext.UnregisterServiceFactory(System.Type)">
            <summary>
            Unregisters the service factory with the specified type.
            </summary>
            <remarks>When the corresponding service instance has been created and started, it is stopped.</remarks>
            <param name="serviceInterfaceType">The service type for which to unregister the corresponding service factory.</param>
            <exception cref="T:Sdl.Desktop.Platform.Services.ServiceFactoryNotAvailableException">Thrown when no service for the specified type is registered in this service context.</exception>
            <exception cref="T:Sdl.Desktop.Platform.Services.ServiceStopException">Thrown when the service could not be stopped.</exception>
            <exception cref="T:Sdl.Desktop.Platform.Services.InvalidServiceException">Thrown when serviceInterfaceType is not a valid service interface type.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when serviceInterfaceType is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IServiceContext.StopAll">
            <summary>
            Stops all services within this service context.    
            </summary>
            <remarks>This method is called by the framework when needed and shoudl not be called from user code.</remarks>
            <exception cref="T:Sdl.Desktop.Platform.Services.ServiceStopException">Thrown when some services could not be stopped.</exception>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IServiceFactory">
            <summary>
            Represents a service factory. A service factory is provides an additional indirection 
            which enables implementing a on demand service creation strategy.
            </summary>
            <remarks>A service factory can be registered with a service context using <see cref="M:Sdl.Desktop.Platform.Services.IServiceContext.RegisterServiceFactory(System.Type,Sdl.Desktop.Platform.Services.IServiceFactory)"/>.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IServiceFactory.CreateService">
            <summary>
            Creates an instance of a service.
            </summary>
            <returns>The newly created service.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ITelemetryService.FlushData">
            <summary>
            Sends the data to the Telemetrics server
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ITelemetryService.TrackView(System.String)">
            <summary>
            Tracks data on the given viewname
            </summary>
            <param name="viewName">Name of the view</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ITelemetryService.TrackException(System.Exception)">
            <summary>
            Logs the exception as part of the telemetrics data
            </summary>
            <param name="ex">Exception object</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ITelemetryService.TrackException(System.Exception,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Logs the exception as part of the telemetrics data
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ITelemetryService.TrackDisplayedException(System.Exception)">
            <summary>
            Logs exceptions marking them as "DisplayedToUser"
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ITelemetryService.TrackUnhandledException(System.UnhandledExceptionEventArgs)">
            <summary>
            Logs the unhandled exception details as part of the telemetrics data
            </summary>
            <param name="e">Unhandled exception arguments</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ITelemetryService.TrackEvent(Sdl.Platform.Interfaces.Telemetry.ITrackingEvent)">
            <summary>
            Adds the event details to the telemetrics data
            </summary>
            <param name="trackingEvent"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ITelemetryService.AddLicenseName(System.String)">
            <summary>
            Add the current license name 
            </summary>
            <param name="licenseName">Name of the current active license</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IUpdateClientCaller">
            <summary>
            IUpdateClientCaller represents an interface for calling the update client.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IUpdateClientCaller.IsRunning(System.String)">
            <summary>
            Checks if there is at least a process with the given name running.
            </summary>
            <param name="processFilePath">The startup location of the process that will be checked if is running</param>
            <returns>True if there is at least one process running and False if there isn't any process with the given name running</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IUpdateClientCaller.Call(System.String,System.String)">
            <summary>
            Calls the update client.
            </summary>
            <param name="updateClientFilePath">update client file path</param>
            <param name="updateClientParameters">update client parameters</param>
        </member>
        <member name="E:Sdl.Desktop.Platform.Services.IUpdateClientCaller.Finished">
            <summary>
            Raised when process has exited.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IUpdateService">
            <summary>
            IUpdateService represents an interface to an update service that is responsible for updating the application.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IUpdateService.AutomaticCheckForUpdateEnabled">
            <summary>
            Determines whether the service automatically checks for updates when started.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IUpdateService.AutomaticCheckForUpdateUserSettingEnabled">
            <summary>
            Determines whether the user setting specify that the service should automatically check for updates when started.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IUpdateService.AutomaticCheckForUpdateUserSettingOptionEnabled">
            <summary>
            Determines whether the user setting option that specifies that the service should automatically check for updates when started should be enabled.
            </summary>
            <remarks>
            In other words, there is a "Automatically check for updates" user setting option (or checkbox). 
            This property determines whether this user setting option (or checkbox) should be enabled or not.
            </remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IUpdateService.CheckForUpdateEnabled">
            <summary>
            Determines whether check for update is enabled.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IUpdateService.AutomaticallyDownloadUpdateOptionChecked">
            <summary>
            Determines whether the update is downloaded automatically in the background.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IUpdateService.CheckForUpdate(Sdl.Desktop.Platform.Services.UpdateClientParameters)">
            <summary>
            Checks for updates to the application. 
            </summary>
            <param name="updateClientParameters"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IUpdateService.AutomaticUpdateCheck">
            <summary>
            Call to perform the initial automatic check for updates, if the user has them enabled.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.IUserSettingsService">
            <summary>
            Global service that gives access to user settings and user profiles functionality.
            </summary>
            <remarks>You can access this service through <see cref="P:Sdl.Desktop.Platform.Services.GlobalServices.UserSettingsService"/>.</remarks>
        </member>
        <member name="E:Sdl.Desktop.Platform.Services.IUserSettingsService.CurrentUserProfileChanged">
            <summary>
            Raised when the current user profile changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Services.IUserSettingsService.FlushingUserSettings">
            <summary>
            Raised when the <see cref="M:Sdl.Desktop.Platform.Services.IUserSettingsService.FlushUserSettings"/> method is called. Listen to this event
            if you need to persist user settings. <see cref="M:Sdl.Desktop.Platform.Services.IUserSettingsService.FlushUserSettings"/> is called before 
            user settings are backed up or exported to make sure that all settings have been persisted
            before they are saved to the export or back up file.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IUserSettingsService.CurrentUserProfile">
            <summary>
            Gets or sets the current user profile.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IUserSettingsService.UserProfiles">
            <summary>
            Gets the collection of available user profiles.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IUserSettingsService.BuiltinUserProfiles">
            <summary>
            Gets the collection of built-in user profiles.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IUserSettingsService.CustomUserProfiles">
            <summary>
            Gets the collection of custom user profiles.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IUserSettingsService.UsingPermanentProfile">
            <summary>
            Returns true if the user's profile was created dynamically rather than loaded from disk
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IUserSettingsService.ExportUserSettings(System.String,System.String,System.String)">
            <summary>
            Exports the current user settings to the specified file path, creating a user profile with the
            specified name and description that can be re-imported on this machine or elsewhere.
            </summary>
            <remarks>The .sdlprofile extension should normally be used for the export file path.</remarks>
            <param name="name">The name for the new user profile. This should not be identical to the name of any built-in profile.</param>
            <param name="description">A description for the user profile. Can be empty.</param>
            <param name="filePath">The file path of the export file. Should normally have the .sdlprofile extension.</param>
            <exception cref="T:System.ArgumentException">Thrown if the specified name is identical to the name of one of the built-in profiles.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.IUserSettingsService.UserSettings">
            <summary>
            Gets the user settings.
            </summary>
            <remarks>These are settings defined globally for this user, with defaults deined by the current user profile.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IUserSettingsService.FlushUserSettings">
            <summary>
            Flushes all user settings. This raises the <see cref="E:Sdl.Desktop.Platform.Services.IUserSettingsService.FlushingUserSettings"/> event, which
            allows components to persist settings when required. This method is called before user settings are exported or backed up to make sure
            that all settings are up to date before they are backed up or exported.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IUserSettingsService.SaveBaseAndUserSettings">
            <summary>
            Save base and user settings.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.IUserSettingsService.UpdateUserProfiles(System.Collections.Generic.ICollection{Sdl.Desktop.Platform.IUserProfile},Sdl.Desktop.Platform.IUserProfile)">
            <summary>
            Update the user profile settings
            </summary>
            <param name="userProfiles"></param>
            <param name="currentUserProfile"></param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.ExecuteJobDelegate">
            <summary>
            Delegate for a job execution method of a job request, called on a worker thread (see <see cref="T:Sdl.Desktop.Platform.Services.JobRequest"/>).
            </summary>
            <param name="context">The job execution context, which can be used to report progress, to check whether the job was cancelled by the user,
            or to cancel the job.  When context.CancelRequested <see cref="P:Sdl.Desktop.Platform.Services.IJobExecutionContext.CancelRequested"/> returns true, just return from
            the method to complete the cancellation process.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.AfterExecuteJobDelegate">
            <summary>
            Delegate for an after job execution method of a job request, called on the UI thread (see <see cref="T:Sdl.Desktop.Platform.Services.JobRequest"/>) after
            the job has been executed.
            </summary>
            <param name="job">The job object, which can be used to determine whether the job was executed successfully.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.JobRequest">
            <summary>
            Implementation of a job request (<see cref="T:Sdl.Desktop.Platform.Services.IJobRequest"/>) that allows easy instantiation using delegate instead of
            having to create a specific job request class by extending <see cref="T:Sdl.Desktop.Platform.Services.AbstractJobRequest"/> or implementing <see cref="T:Sdl.Desktop.Platform.Services.IJobRequest"/> directly.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.JobRequest.#ctor(System.String,Sdl.Desktop.Platform.Services.ExecuteJobDelegate,Sdl.Desktop.Platform.Services.AfterExecuteJobDelegate,System.Boolean)">
            <summary>
            Constructs a job request using the specified delegates.
            </summary>
            <param name="name">A friendly name for the job request.</param>
            <param name="executeJobDelegate">Delegate called on a worker thread for executing the job.</param>
            <param name="afterExecuteJobDelegate">Delegate called on the UI thread after executing the job.</param>
            <param name="reportsProgress">True is this job request will report progress.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when name is null or an empty string, or when executeJobDelegate or afterExecuteJobDelegate is null.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.JobRequest.Execute(Sdl.Desktop.Platform.Services.IJobExecutionContext)">
            <summary>
            Calls the delegate specified in the executeJobDelegate parameter in the constructor.
            </summary>
            <param name="context">The job execution context, which can be used to report progress, to check whether the job was cancelled by the user,
            or to cancel the job. When context.CancelRequested <see cref="P:Sdl.Desktop.Platform.Services.IJobExecutionContext.CancelRequested"/> returns true, just return from the
            <see cref="M:Sdl.Desktop.Platform.Services.JobRequest.Execute(Sdl.Desktop.Platform.Services.IJobExecutionContext)"/> method to complete the cancellation process.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.JobRequest.AfterExecute(Sdl.Desktop.Platform.Services.IJob)">
            <summary>
            Calls the delegate specified in the afterExecuteJobDelegate parameter in the constructor.
            </summary>
            <param name="job">The job object, which can be used to determine whether the job was executed successfully.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.ISubscriptionLicense.HasSubscription">
            <summary>
            Check if there is a subscription license active
            </summary>
            <returns>true if a subscription license is available
            false, if there is no active subscription license</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ISubscriptionLicense.ActivateSubscription(System.String@)">
            <summary>
            Activates the available subscription and occupies a seat
            </summary>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ISubscriptionLicense.ActivateSubscriptionGracePeriod">
            <summary>
            Activates offline usage
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.ISubscriptionLicense.AvailableSubscriptionDisplayName">
            <summary>
            Available Subscription Display Name
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ISubscriptionLicense.RefreshAvailableSubscriptionInfo">
            <summary>
            Fetch Available Studio Subscription Information
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ISubscriptionLicense.DeactivateSubscription(System.Boolean)">
            <summary>
            Deactivate active subscription
            </summary>
            <param name="keepGracePeriod">If True, Grace Period Can still be used</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ISubscriptionLicense.IsSubscriptionExpired">
            <summary>
            Check if the LC Subscription is expired
            </summary>
            <returns>true if subscription is expired, false otherwise</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ISubscriptionLicense.IsGracePeriodExpired">
            <summary>
            Check if the LC Subscription stil has Grace Period Time left
            </summary>
            <returns>true if subscription Grace Period is 0, false otherwise</returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.ISubscriptionLicense.CanConnectToService">
            <summary>
            Checks if the machine is connected to Internet
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.ServiceScope">
            <summary>
            Possible scope at which a service can be plugged in into the studio using a service extension attribute (see <see cref="T:Sdl.Desktop.Platform.Services.ServiceAttribute"/>).
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Services.ServiceScope.Studio">
            <summary>
            Global services, available to all components within the studio.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Services.ServiceScope.Window">
            <summary>
            Window service, available to all components within a specific studio window. 
            </summary>
            <remarks>A separate instance will be created for every window in the studio.</remarks>
        </member>
        <member name="F:Sdl.Desktop.Platform.Services.ServiceScope.View">
            <summary>
            View service, available to all components within a specific view. 
            </summary>
            <remarks>A separate instance will be created for one or more views in the studio (see <see cref="P:Sdl.Desktop.Platform.Services.ServiceAttribute.ViewId"/>).</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.ServiceAttribute">
            <summary>
            Extension attribute for plugging in services into the studio.
            </summary>
            <remarks>To define a new service, create a class, extending <see cref="T:Sdl.Desktop.Platform.Services.AbstractService"/>, and annotate it with 
            the <see cref="T:Sdl.Desktop.Platform.Services.ServiceAttribute"/> attribute.</remarks>
            <seealso cref="T:Sdl.Desktop.Platform.Services.IService"/>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceAttribute.#ctor(Sdl.Desktop.Platform.Services.ServiceScope)">
            <summary>
            Constructor, specifying the scope of the service.
            </summary>
            <param name="scope">The scope in which the service should be made available.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceAttribute.#ctor(System.String)">
            <summary>
            Constructor for creating a service targeted at a specific view.
            </summary>
            <param name="viewId">The id of the view in which the service will be available.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.ServiceAttribute.Scope">
            <summary>
            Gets or sets the scope in which this service should be made available.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Services.ServiceAttribute.ViewId">
            <summary>
            Gets or sets the id of the view, within which this service should be made available. When setting this property to null,
            a separate instance will be created for all views in the studio.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.ServiceCreationException">
            <summary>
            Exception thrown when a service factory failes to create a service.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceCreationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.ServiceCreationException"/> class
            with a specified message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.ServiceCreationException"/> class
            with a specified message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.StudioException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.ServiceFactoryNotAvailableException">
            <summary>
            Exception thrown when trying to access a service factory that is not available in the service context.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceFactoryNotAvailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.ServiceFactoryNotAvailableException"/> class
            with a specified message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceFactoryNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.ServiceFactoryNotAvailableException"/> class
            with a specified message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceFactoryNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.StudioException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.ServiceNotAvailableException">
            <summary>
            Exception thrown when trying to access a service that is not available in the service context.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceNotAvailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.ServiceNotAvailableException"/> class
            with a specified message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.ServiceNotAvailableException"/> class
            with a specified message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.StudioException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.ServiceStartException">
            <summary>
            Exception thrown when a service fails to start.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceStartException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.ServiceStartException"/> class
            with a specified message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceStartException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.ServiceStartException"/> class
            with a specified message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceStartException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.StudioException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Sdl.Desktop.Platform.Services.ServiceStopException">
            <summary>
            Exception thrown when a service fails to start.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceStopException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.ServiceStopException"/> class
            with a specified message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceStopException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Services.ServiceStopException"/> class
            with a specified message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Services.ServiceStopException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.StudioException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Sdl.Desktop.Platform.StringResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.AbstractDockingView_DefaultSelectTitle">
            <summary>
              Looks up a localized string similar to Select a View.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ActionCantBeRegisteredBecauseIdIsRegistered">
            <summary>
              Looks up a localized string similar to The specified action cannot be registered because a different action with the same ID is already registered..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ActionNotActionWithPopUp">
            <summary>
              Looks up a localized string similar to Action &apos;{0}&apos; is not an action with pop-up..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ActionNotRegisteredDynamicAction">
            <summary>
              Looks up a localized string similar to Action &apos;{0}&apos; is not registered with the action service. If this is a dynamic action, make sure to call RegisterDynamicAction first..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ActionNotRetargetable">
            <summary>
              Looks up a localized string similar to Action &apos;{0}&apos; is not a retargetable action..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ActionsRibbonGroup">
            <summary>
              Looks up a localized string similar to Actions.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ActionWithIdNotEnabled">
            <summary>
              Looks up a localized string similar to The action with ID &apos;{0}&apos; is currently not enabled..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.AddinsRibbon_KeyTip">
            <summary>
              Looks up a localized string similar to D.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ApplicationColorScheme_Office2013DarkGray">
            <summary>
              Looks up a localized string similar to &amp;Dark Gray.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ApplicationColorScheme_Office2013DarkGray_Description">
            <summary>
              Looks up a localized string similar to The Windows Dark Gray flat color scheme..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ApplicationColorScheme_Office2013LightGray">
            <summary>
              Looks up a localized string similar to &amp;Light Gray.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ApplicationColorScheme_Office2013LightGray_Description">
            <summary>
              Looks up a localized string similar to The Windows Light Gray flat color scheme..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ApplicationColorScheme_Office2013White">
            <summary>
              Looks up a localized string similar to &amp;White.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ApplicationColorScheme_Office2013White_Description">
            <summary>
              Looks up a localized string similar to The Windows White flat color scheme..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.BackupFilename">
            <summary>
              Looks up a localized string similar to Backup of {0}.sdlprofile.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ButtonPanel_CancelButton">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ButtonPanel_HelpButton">
            <summary>
              Looks up a localized string similar to Help.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ButtonPanel_IgnoreAllButton">
            <summary>
              Looks up a localized string similar to &amp;Ignore All.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ButtonPanel_NoButton">
            <summary>
              Looks up a localized string similar to &amp;No.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ButtonPanel_NoToAllButton">
            <summary>
              Looks up a localized string similar to N&amp;o to All.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ButtonPanel_OkButton">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ButtonPanel_YesButton">
            <summary>
              Looks up a localized string similar to &amp;Yes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ButtonPanel_YesToAllButton">
            <summary>
              Looks up a localized string similar to Yes to &amp;All.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Category_Window">
            <summary>
              Looks up a localized string similar to All Views.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ClearNotificationGroup_Text">
            <summary>
              Looks up a localized string similar to Clear all notifications in this group.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.CommandLine_Aliases">
            <summary>
              Looks up a localized string similar to Aliases.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.CommandLine_Arguments">
            <summary>
              Looks up a localized string similar to Arguments: .
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.CommandLine_ArgumentUsage">
            <summary>
              Looks up a localized string similar to Usage: {0}.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.CommandLine_Description">
            <summary>
              Looks up a localized string similar to Description: .
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.CommandLine_ErrorProcessingArguments">
            <summary>
              Looks up a localized string similar to Error processing command line arguments: .
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.CommandLine_SecureModeDefinition">
            <summary>
              Looks up a localized string similar to Launches Trados Studio in Secure Mode..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.CommandLine_StartupModeDefinition">
            <summary>
              Looks up a localized string similar to Specifies whether to launch a new instance, an existing instance or a new window. Possible values: NewInstance, ExistingInstance or NewWindow. Default: ExistingInstance..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.CommandLine_StartupModeInvalid">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is an invalid value for parameter StartupMode..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.CommandLine_Task">
            <summary>
              Looks up a localized string similar to Task: .
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.CommandLine_UsageString">
            <summary>
              Looks up a localized string similar to USAGE: {0} [/help|/?] /arg1 val1 /arg2 val2.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ConfigurationRibbonGroup">
            <summary>
              Looks up a localized string similar to Configuration.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.DefaultUserProfile_Description">
            <summary>
              Looks up a localized string similar to Default user profile, most suitable if you are new to the application..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.DefaultUserProfile_Name">
            <summary>
              Looks up a localized string similar to Default.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.DockingViewResetViewPartLayoutAction_Confirmation">
            <summary>
              Looks up a localized string similar to Are you sure you want to reset the layout of the windows within this view?.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.DockingViewResetViewPartLayoutAction_Text">
            <summary>
              Looks up a localized string similar to Reset &amp;Window Layout.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.DockingViewResetViewPartLayoutAction_ToolTip">
            <summary>
              Looks up a localized string similar to Reset Window Layout.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.DocumentationRibbonGroup">
            <summary>
              Looks up a localized string similar to Documentation.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.DownloadAndInstallCommand_DownloadingCaption">
            <summary>
              Looks up a localized string similar to Downloading....
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.DownloadUpdateNotificationAction_ActionText">
            <summary>
              Looks up a localized string similar to Download.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ExistingUpdateInstanceWarning">
            <summary>
              Looks up a localized string similar to An update process is currently in progress. Before launching a new update process, either wait for the current update to finish or force shut down the current update process..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ExitRibbonGroup">
            <summary>
              Looks up a localized string similar to Exit.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.FeatureNotAvailable_PleaseUpgradeLicense">
            <summary>
              Looks up a localized string similar to Please upgrade your license to enable this feature..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.General_SettingsPage">
            <summary>
              Looks up a localized string similar to General.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.GeneralSettings_Name">
            <summary>
              Looks up a localized string similar to General.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.GlobalServiceContext_ServiceFactoryNotAvailable">
            <summary>
              Looks up a localized string similar to The requested service factory is not available: {0}..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.GlobalServiceContext_ServiceNotAvailable">
            <summary>
              Looks up a localized string similar to The requested service is not available: {0}..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.GlobalServiceContext_ServiceTypeInvalid">
            <summary>
              Looks up a localized string similar to The requested service is not of type &apos;{0}&apos;: {1}..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpActionsRibbonGroup">
            <summary>
              Looks up a localized string similar to Actions.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpMenu">
            <summary>
              Looks up a localized string similar to &amp;Help.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpMenu_TradosHomePage">
            <summary>
              Looks up a localized string similar to &amp;Home Page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpMenu_TradosHomePage_Shortcut">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpMenu_TradosHomePage_Url">
            <summary>
              Looks up a localized string similar to http://rws.com/support.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpMenu_TradosOnTheWeb">
            <summary>
              Looks up a localized string similar to RWS on the &amp;Web.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpMenu_TradosOnTheWeb_Shortcut">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpMenu_TradosSupportCentre">
            <summary>
              Looks up a localized string similar to &amp;Support Centre.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpMenu_TradosSupportCentre_Shortcut">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpMenu_TradosSupportCentre_Url">
            <summary>
              Looks up a localized string similar to http://rws.com/support/.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpMenu_TranslationZone">
            <summary>
              Looks up a localized string similar to &amp;TranslationZone.com.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpMenu_TranslationZone_Shortcut">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpMenu_TranslationZone_Url">
            <summary>
              Looks up a localized string similar to http://www.translationzone.com.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpRibbon">
            <summary>
              Looks up a localized string similar to Help.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpRibbon_KeyTip">
            <summary>
              Looks up a localized string similar to E.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.HelpTopicsGroup">
            <summary>
              Looks up a localized string similar to Online Help.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.InformationRibbonGroup">
            <summary>
              Looks up a localized string similar to Information.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.InstallUpdateNotificationAction_ActionText">
            <summary>
              Looks up a localized string similar to Install.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Job_JobCannotBeCancelled">
            <summary>
              Looks up a localized string similar to Job cannot be cancelled..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.KeyboardShortCutGeneralSettings_Description">
            <summary>
              Looks up a localized string similar to All Shortcuts.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.KeyboardShortCutGeneralSettings_Name">
            <summary>
              Looks up a localized string similar to All Shortcuts.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.KeyboardShortcutSettingsPageControl_ActionHeaderCaption">
            <summary>
              Looks up a localized string similar to Action.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.KeyboardShortcutSettingsPageControl_RowValidationError">
             <summary>
               Looks up a localized string similar to The shortcut for {0} conflicts with the shortcut for {1} &gt; {2}.
            Please change one of these shortcuts..
             </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.KeyboardShortcutSettingsPageControl_ShortcutHeaderCaption">
            <summary>
              Looks up a localized string similar to Shortcut.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.KeyboardShortcutSettingsPageControl_ShortcutInUseError">
            <summary>
              Looks up a localized string similar to Shortcut already in use by {0} &gt; {1}.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.LicenseInfo_TrialFlag">
            <summary>
              Looks up a localized string similar to Trial.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ManagePluginsAction_RestartQuestion">
            <summary>
              Looks up a localized string similar to The changes in the plug-ins only take effect once the application has been restarted. Do you want to restart the application now?.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.MessageHelper_DontShowWarningAgain">
            <summary>
              Looks up a localized string similar to Don&apos;t show this warning again.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.MessageService_ErrorTitle">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.MessageService_InformationTitle">
            <summary>
              Looks up a localized string similar to Information.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.MessageService_QuestionTitle">
            <summary>
              Looks up a localized string similar to Question.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.MessageService_WarningTitle">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.NavigationRibbonGroup">
            <summary>
              Looks up a localized string similar to Navigation.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.NoAutoUpdateCommandLineArgument_Description">
            <summary>
              Looks up a localized string similar to Starts the application without automatically checking for updates..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.NoAutoUpdateCommandLineArgument_Name">
            <summary>
              Looks up a localized string similar to NoAutoUpdate.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.NotificationsToolTip_NoNotifications">
            <summary>
              Looks up a localized string similar to No notifications available.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.NotificationsToolTip_NotificationsAvailable">
            <summary>
              Looks up a localized string similar to Total notifications: {0}.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.NotificationsView_Title">
            <summary>
              Looks up a localized string similar to Notifications.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Options_ActionToolTip">
            <summary>
              Looks up a localized string similar to Automatic Update Options.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.PluginDeserializer_ObjectResolverNotFound">
            <summary>
              Looks up a localized string similar to Object resolver was not found for class {0}.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ProgressHeader_CompletedProgressStepsMessage">
            <summary>
              Looks up a localized string similar to {0} of {1} completed.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ProjectManagement">
            <summary>
              Looks up a localized string similar to Project Management.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ProjectWizard_ConfirmCancel">
            <summary>
              Looks up a localized string similar to Are you sure you want to cancel the wizard?.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.QuickStart">
            <summary>
              Looks up a localized string similar to Quick Start.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlCommunity">
            <summary>
              Looks up a localized string similar to RWS Community.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlCommunity_Url">
            <summary>
              Looks up a localized string similar to https://community.rws.com/product-groups/trados-portfolio/trados-studio/.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlHomePage">
            <summary>
              Looks up a localized string similar to RWS Home Page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlHomePage_Url">
            <summary>
              Looks up a localized string similar to https://www.rws.com.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlKnowledgeBase">
            <summary>
              Looks up a localized string similar to Knowledge Base.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlKnowledgeBase_Url">
            <summary>
              Looks up a localized string similar to https://gateway.sdl.com/.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlMyAccount">
            <summary>
              Looks up a localized string similar to My Account.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlMyAccount_Url">
            <summary>
              Looks up a localized string similar to http://oos.sdl.com.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlOpenExchange">
            <summary>
              Looks up a localized string similar to RWS AppStore.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlOpenExchange_Url">
            <summary>
              Looks up a localized string similar to http://appstore.sdl.com/language/.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlTrados">
            <summary>
              Looks up a localized string similar to Trados Home Page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlTrados_Url">
            <summary>
              Looks up a localized string similar to https://www.trados.com/.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlTradosCompatibilityMigrationPowerPack">
            <summary>
              Looks up a localized string similar to Trados Compatibility and Migration Power Pack.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlTradosCompatibilityMigrationPowerPack_Url">
            <summary>
              Looks up a localized string similar to https://appstore.sdl.com/language/app/Trados-Compatibility-and-Migration-Power-Pack/1101/.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlWorldServerCompatibilityPack">
            <summary>
              Looks up a localized string similar to WorldServer Compatibility Pack.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SdlWorldServerCompatibilityPack_Url">
            <summary>
              Looks up a localized string similar to https://appstore.sdl.com/language/app/WorldServer-Compatibility-Pack-for-Trados-Studio/1102/.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SelectionService_NoProviderWithId">
            <summary>
              Looks up a localized string similar to This selection service does not have a registered provider with id &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SelectionService_NoSuchProvider">
            <summary>
              Looks up a localized string similar to The specified selection provider has not been registered with this selection service..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SelectNextViewPartAction_Text">
            <summary>
              Looks up a localized string similar to Next view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SelectPreviousViewPartAction_Text">
            <summary>
              Looks up a localized string similar to Previous view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServerConnectionException_ConnectionCommunications">
             <summary>
               Looks up a localized string similar to There was a communications or connection error.
            Please check your server connection settings, network and internet connections, and that the server is available..
             </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServerConnectionException_ConnectionProtocol">
             <summary>
               Looks up a localized string similar to There was a connection protocol error.
            Please check that you are using the correct HTTP or TCP server connection settings..
             </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServerConnectionException_ConnectionProtocolPortOther">
             <summary>
               Looks up a localized string similar to There was a connection protocol error.
            Please check that you have entered the correct port number and other settings..
             </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServerConnectionException_ConnectionProtocolViolation">
             <summary>
               Looks up a localized string similar to There was a server protocol violation.
            Please check that you have entered the correct server name, port number and other settings..
             </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServerConnectionException_PortNumberOtherSetting">
            <summary>
              Looks up a localized string similar to Please check that you have entered the correct port number and other settings..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServerConnectionException_SecurityAccessDenied">
            <summary>
              Looks up a localized string similar to Authentication Failed. Please check that the username and password entered are correct for this server..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServerConnectionException_ServerNameOtherSetting">
             <summary>
               Looks up a localized string similar to Please check that you have entered the correct server name and connection settings, and
            check your network and internet connections, and that the server is available..
             </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServerConnectionException_SocketError_ConnectionRefused">
            <summary>
              Looks up a localized string similar to Please check that you have entered the correct port number and other settings..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServerConnectionException_SocketError_HostNotFound">
             <summary>
               Looks up a localized string similar to Please check that you have entered the correct server name and connection settings, and
            check your network and internet connections, and that the server is available..
             </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServerConnectionException_SocketError_TimedOut">
             <summary>
               Looks up a localized string similar to There was a connection timeout error.
            Please check your network and internet connections..
             </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServiceContext_InvalidServiceImplementationType">
            <summary>
              Looks up a localized string similar to The specified service is not a valid service implementation (&apos;{0}&apos;). A service needs to implement an interface that extends Sdl.Desktop.Platform.Services.IService..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServiceContext_InvalidServiceInterfaceType">
            <summary>
              Looks up a localized string similar to The specified type ({0}) is not a valid service interface type. A service interface needs to extend the interface Sdl.Desktop.Platform.Service.IService..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServiceContext_ServiceStartException">
            <summary>
              Looks up a localized string similar to Service &apos;{0}&apos; could not be started..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServiceContext_ServiceStopException">
            <summary>
              Looks up a localized string similar to Service &apos;{0}&apos; could not be stopped..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServiceDescriptor_InterfaceNotSupported">
            <summary>
              Looks up a localized string similar to The specified implementation type ({0}) does not implement the specified service type ({1})..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ServiceDescriptor_InvalidInterface">
            <summary>
              Looks up a localized string similar to The specified interface ({0}) is not a valid service interface..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SettingsFile_FailedToLoad">
            <summary>
              Looks up a localized string similar to Failed to load settings file &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ShowError_FailedToLogException">
            <summary>
              Looks up a localized string similar to Failed to log exception..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ShowError_UnknownException">
            <summary>
              Looks up a localized string similar to Unknown exception..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SplashScreen_CreatingApplicationWindow">
            <summary>
              Looks up a localized string similar to Creating application window....
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SplashScreen_ExecutingStartupExtensionX">
            <summary>
              Looks up a localized string similar to Executing start up extensions....
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SplashScreen_InitializingServices">
            <summary>
              Looks up a localized string similar to Initializing services....
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SplashScreen_LoadingApplicationWindow">
            <summary>
              Looks up a localized string similar to Loading application window....
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SplashScreen_LoadingInitialView">
            <summary>
              Looks up a localized string similar to Loading {0} view....
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SplashScreen_LoadingPlugins">
            <summary>
              Looks up a localized string similar to Loading plug-ins....
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SplashScreen_LoadingUserSettings">
            <summary>
              Looks up a localized string similar to Loading user settings....
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SplashScreen_LoadingVersionManager">
            <summary>
              Looks up a localized string similar to Loading version manager....
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SplashScreen_LoadingViews">
            <summary>
              Looks up a localized string similar to Initializing views....
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.SplashScreen_ShowingApplicationWindow">
            <summary>
              Looks up a localized string similar to Showing application window....
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Studio_ErrorLoadingGlobalPluginServices">
            <summary>
              Looks up a localized string similar to An unexpected error has occurred while loading the global plug-in services..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Studio_ErrorLoadingPlugin">
            <summary>
              Looks up a localized string similar to Failed to load plug-in &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Studio_ErrorLoadingPlugins">
            <summary>
              Looks up a localized string similar to An unexpected error has occurred while loading the application plug-ins..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Studio_Next">
            <summary>
              Looks up a localized string similar to Next.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Studio_Previous">
            <summary>
              Looks up a localized string similar to Previous.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Studio_ToolbarOptions">
            <summary>
              Looks up a localized string similar to Toolbar Options.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ThirdParty_CertificationWarning">
             <summary>
               Looks up a localized string similar to Trados Studio has detected an unsigned plug-in that wants to load.
            &apos;{0}&apos; has been created by a third-party and has not been validated.
            Plug-ins may contain viruses or other harmful code. Do not load this plug-in unless you trust the source of the plug-in.
            
            Do you want to load this plug-in?.
             </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ThirdParty_CertificationWarningCaption">
            <summary>
              Looks up a localized string similar to Unsigned Trados Studio Plug-in Found.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.TMManagement">
            <summary>
              Looks up a localized string similar to TM Management.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.TMManagement_Path">
            <summary>
              Looks up a localized string similar to &quot;c:\ProgramData\Microsoft\Windows\Start Menu\Programs\SDL\SDL Trados Studio 2019\Documentation\Quick Start Guides\English\TM Management.lnk&quot;.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ToolsMenu">
            <summary>
              Looks up a localized string similar to &amp;Tools.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.TranslationAndReviewing">
            <summary>
              Looks up a localized string similar to Translation and Reviewing.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.TranslationAndReviewing_Path">
            <summary>
              Looks up a localized string similar to &quot;c:\ProgramData\Microsoft\Windows\Start Menu\Programs\SDL\SDL Trados Studio 2019\Documentation\Quick Start Guides\English\Translating and Reviewing.lnk&quot;.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UnexpectedPluginError">
            <summary>
              Looks up a localized string similar to Unexpected PluginTargetCommandBarSiteType value:.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UnsuccesfullPluginUninstal">
            <summary>
              Looks up a localized string similar to Trados Studio has not finished removing the last uninstalled plug-in. Restart Trados Studio after closing all active instances..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UnsuccesfullPluginUninstalCaption">
            <summary>
              Looks up a localized string similar to Incomplete plugin uninstall.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UpdateAvailableNotificationAction_CurrentVersion">
            <summary>
              Looks up a localized string similar to Your current version is.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UpdateAvailableNotificationAction_FileSize">
            <summary>
              Looks up a localized string similar to File Size: .
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UpdateAvailableNotificationAction_GroupKey">
            <summary>
              Looks up a localized string similar to ProductUpdate.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UpdateAvailableNotificationAction_GroupTitle">
            <summary>
              Looks up a localized string similar to Product updates are available for download and install..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UpdateAvailableNotificationAction_KBArticle">
            <summary>
              Looks up a localized string similar to Release notes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UpdateAvailableNotificationAction_KBArticleDescription">
            <summary>
              Looks up a localized string similar to Find detailed information about this update on.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UpdateAvailableNotificationAction_OtherComponents">
            <summary>
              Looks up a localized string similar to This release also includes:.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UpdateAvailableNotificationAction_UpdateVersion">
            <summary>
              Looks up a localized string similar to version.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UpdateSettings_General">
            <summary>
              Looks up a localized string similar to General.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UpdateSettings_General_Description">
            <summary>
              Looks up a localized string similar to General.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UsefulTipsCollectionRibbonGroup">
            <summary>
              Looks up a localized string similar to Tips.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserInterfaceLanguageAction_RestartQuestion">
            <summary>
              Looks up a localized string similar to The user interface language changes only take effect once the application has been restarted. Do you want to restart the application now?.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserInterfaceRibbonGroup">
            <summary>
              Looks up a localized string similar to User Interface.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfile_Default_Description">
            <summary>
              Looks up a localized string similar to Default user profile.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfile_Default_Name">
            <summary>
              Looks up a localized string similar to Default.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfile_Default_Well">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfilesWizard_BackupPage_BackupFileAlreadyExists">
             <summary>
               Looks up a localized string similar to {0} already exist. 
            Do you want to replace it?.
             </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfilesWizard_BackupPage_InvalidBackupFilePath">
            <summary>
              Looks up a localized string similar to The specified back up file path is invalid..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfilesWizard_BackupPage_NoBackupFilePath">
            <summary>
              Looks up a localized string similar to Please specify an back up file path..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfilesWizard_ExportPage_BuiltinName">
            <summary>
              Looks up a localized string similar to The specified user profile name cannot be used, since it is a built-in user profile name..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfilesWizard_ExportPage_ExportFileAlreadyExists">
             <summary>
               Looks up a localized string similar to {0} already exist. 
            Do you want to replace it?.
             </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfilesWizard_ExportPage_InvalidExportFilePath">
            <summary>
              Looks up a localized string similar to The specified export file path is invalid..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfilesWizard_ExportPage_NoExportFilePath">
            <summary>
              Looks up a localized string similar to Please specify an export file path..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfilesWizard_ExportPage_NoName">
            <summary>
              Looks up a localized string similar to Please specify a name for this user profile..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfileWizard">
            <summary>
              Looks up a localized string similar to Manage User Profiles.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfileWizard_BackupWizardPage">
            <summary>
              Looks up a localized string similar to Backup User Settings.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfileWizard_BackupWizardPage_Description">
            <summary>
              Looks up a localized string similar to Specify a location to create a backup of your current user settings..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfileWizard_ChooseActionWizardPage">
            <summary>
              Looks up a localized string similar to User Profiles.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfileWizard_ChooseActionWizardPage_Description">
            <summary>
              Looks up a localized string similar to Choose an option from the list below..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfileWizard_ExportWizardPage">
            <summary>
              Looks up a localized string similar to Export User Settings.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfileWizard_ExportWizardPage_Description">
            <summary>
              Looks up a localized string similar to Specify the location where your current user settings should be exported to..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfileWizard_SelectUserProfileWizardPage">
            <summary>
              Looks up a localized string similar to Select User Profile.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserProfileWizard_SelectUserProfileWizardPage_Description">
            <summary>
              Looks up a localized string similar to Select a user profile from the list or browse to a user settings file to import previously exported user profile..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserSettingsFileFilter">
            <summary>
              Looks up a localized string similar to User Profiles (*.sdlprofile)|*.sdlprofile.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserSettingsService_ImportUserProfile_Overwrite">
            <summary>
              Looks up a localized string similar to You already have a custom user profile called &apos;{0}&apos;. Do you want to overwrite it?.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.UserSettingsService_SettingsContext_Name">
            <summary>
              Looks up a localized string similar to Options.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Validation_InvalidDirectoryName_InvalidCharacters">
            <summary>
              Looks up a localized string similar to The folder name should not include any of the following characters: {0}.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Validation_InvalidFileName_InvalidCharacters">
            <summary>
              Looks up a localized string similar to The name should not contain any invalid characters such as: {0}.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Validation_InvalidFileName_TooLong">
            <summary>
              Looks up a localized string similar to The name is too long..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Validation_InvalidPath_InvalidCharacters">
            <summary>
              Looks up a localized string similar to The path should not contain any invalid characters such as: {0}.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Validation_InvalidPath_TooLong">
            <summary>
              Looks up a localized string similar to The path is too long..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Validation_InvalidSQLitePath_TooLong">
            <summary>
              Looks up a localized string similar to The specified path, file name, or both are too long. The fully qualified filename must be less than {0} characters. ({1}).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.VideosRibbonGroup">
            <summary>
              Looks up a localized string similar to Videos.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.VideoTutorials">
            <summary>
              Looks up a localized string similar to Tutorials.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.VideoTutorials_Url">
            <summary>
              Looks up a localized string similar to http://www.youtube.com/user/sdltrados.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ViewMenu">
            <summary>
              Looks up a localized string similar to &amp;View.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ViewMenu_ColorSchemeMenu">
            <summary>
              Looks up a localized string similar to &amp;Color Scheme.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ViewMenu_DockingViewConfigurationsMenu">
            <summary>
              Looks up a localized string similar to Configurations.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ViewMenu_ToolbarsMenu">
            <summary>
              Looks up a localized string similar to &amp;Toolbars.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ViewRibbon">
            <summary>
              Looks up a localized string similar to View.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.ViewRibbon_KeyTip">
            <summary>
              Looks up a localized string similar to V.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.WcfExceptionDisplayFilter_EndpointNotFoundException">
            <summary>
              Looks up a localized string similar to Please check that you have entered the correct server connection settings and that the server is available..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.WebExceptionDisplayFilter_ServerNotResponding">
            <summary>
              Looks up a localized string similar to The server is not responding. Please check that the server is available..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.WebResourcesRibbonGroup">
            <summary>
              Looks up a localized string similar to Web resources.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Wizard_CannotClose">
            <summary>
              Looks up a localized string similar to The wizard cannot be closed. Use the Cancel button to cancel processing first..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Wizard_CloseButton">
            <summary>
              Looks up a localized string similar to &amp;Close.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Wizard_FinishButton">
            <summary>
              Looks up a localized string similar to &amp;Finish.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.Wizard_UnableToNavigateToSelectedPage">
            <summary>
              Looks up a localized string similar to Unable to navigate to the selected page. The &apos;{0}&apos; step is required before navigating to the &apos;{1}&apos; step..
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.WpfWizard_CloseButton">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StringResources.WpfWizard_FinishButton">
            <summary>
              Looks up a localized string similar to Finish.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.StudioConstants">
            <summary>
            This class defines constants for default items in the studio UI.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.StudioConstants.#ctor">
            <summary>
            Prevent instantiation. This class is not declared static, because the pattern is to override it in studio application-specific constants classes.
            This is to allow easy access to all constants in a single class.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ExitSeparator">
            <summary>
            Separator appearing just before the exit action in the first menu.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ExitAction">
            <summary>
            The exit action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ViewRibbon">
            <summary>
            View ribbon
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ViewMenu_Views_Separator">
            <summary>
            Separator after list of views on the View menu.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ViewMenu_ToolBars_Separator">
            <summary>
            Separator after the ToolBars menu on the View menu.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ViewMenu_ColorSchemeMenu">
            <summary>
            Color scheme sub-menu of the View menu.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ViewMenu_ToolbarsMenu">
            <summary>
            Toolbars sub-menu of the View menu.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ViewMenu_ColorSchemeMenu_Separator">
            <summary>
            Separator after color scheme sub-menu of the View menu.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ViewMenu_RefreshView_Separator">
            <summary>
            Separator after refresh view action on the View menu.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ViewMenu_DockingViewPartsSeparator">
            <summary>
            Separator after list of docking view parts on View menu (when a docking view is active).
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ViewMenu_DockingViewConfigurationsMenu">
            <summary>
            Docking view configurations sub-menu of the View menu (when a docking view is active).
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.DockingViewResetViewPartLayoutAction">
            <summary>
            Reset docking view layout action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.SwitchToSecureModeAction">
            <summary>
            Switch to Secure Mode action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.SwitchToNormalModeAction">
            <summary>
            Switch to Normal Mode action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.RefreshAction">
            <summary>
            Refresh view action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.SwitchFullScreenModeAction">
            <summary>
            Full Screen Mode  action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.UserInterfaceLanguageAction">
            <summary>
            User Interface Language  action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.OptionsAction">
            <summary>
            Tools options action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ManageUserProfilesAction">
            <summary>
            Manage user profiles action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ManagePluginsAction">
            <summary>
            Manage plug-ins action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.AddinsRibbonManagePluginsAction">
            <summary>
            Manage plug-ins action from the addins ribbon tab.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ViewLogFileAction">
            <summary>
            View log file action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.HelpMenu">
            <summary>
            Help menu.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.HelpTopicsAction">
            <summary>
            Help topics action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.AboutAction">
            <summary>
            About X... action
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.CheckForUpdatesAction">
            <summary>
            Check for Updates action
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.UsefulCollectionTipsAction">
            <summary>
            Open Useful Collection Tips action
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.NotificationCountAction">
            <summary>
            Notifications count
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.StatusBar_MessageLabel">
            <summary>
            Message label on ststus bar.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.StatusBar_ProgressBar">
            <summary>
            Progress bar on status bar.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.KeyboardShortcut_Settings_Page_Category">
            <summary>
            The Keyboard Shortcuts settings page category.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.Colors_Settings_Page_Category">
            <summary>
            The Fonts And Colors settings page category.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.SelectNextViewPartAction">
            <summary>
            The next view part action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.SelectPreviousViewPartAction">
            <summary>
            The previous view part action.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.UpdateSettings_Page_Category">
            <summary>
            Update settings page category.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.UpdateSettings_General">
            <summary>
            Update settings page.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.StartSettings_Page_Category">
            <summary>
            Start settings page category.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.StartSettings_General">
            <summary>
            Start settings page.
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.ViewMenu">
            <summary>
            View menu
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.StudioConstants.NotificationsViewPart">
            <summary>
            View parts
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.StudioException">
            <summary>
            Base class for all studio exceptions.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.StudioException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.StudioException"/> class.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.StudioException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.StudioException"/> class
            with a specified message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.StudioException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.StudioException"/> class
            with a specified message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.StudioException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.StudioException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Sdl.Desktop.Platform.StudioPlatform">
            <summary>
            Entry point for the desktop platform. Allows running an instance of 
            the studio.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StudioPlatform.IsRunning">
            <summary>
            Returns true if the Studio is currently running.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.StudioPlatform.Studio">
            <summary>
            Returns the current studio instance, or creates a default instance and returns it
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.StudioStartupActiveViewAttribute">
            <summary>
            Extension attribute used to customize the selection of the initial active view.
            </summary>        
        </member>
        <member name="M:Sdl.Desktop.Platform.StudioStartupActiveViewAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.UserProfileCollection">
            <summary>
            A read-only collection of user profiles.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.UserProfileCollection.Item(System.String)">
            <summary>
            Gets the user profile with the given name.
            </summary>
            <param name="name">The user profile name.</param>
            <returns>The user profile with the given name; or null, if no such user profile exists.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Validation">
            <summary>
            Statis helper class containing parameter validation methods.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Validation.NotNull(System.Object,System.String)">
            <summary>
            Throws an an <see cref="T:System.ArgumentNullException"/> when the specified argument is null.
            </summary>
            <param name="argument">The argument to validate.</param>
            <param name="name">The name of the argument.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Validation.NotNull(System.Object,System.String,System.String)">
            <summary>
            Throws an an <see cref="T:System.ArgumentNullException"/> with the specified message when the specified argument is null.
            </summary>
            <param name="argument">The argument to validate.</param>
            <param name="name">The name of the argument.</param>
            <param name="message">The exception message to use when the argument is null.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Validation.NotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an an <see cref="T:System.ArgumentNullException"/> with the specified message when the specified string argument is null or an empty string.
            </summary>
            <param name="argument">The string argument to validate.</param>
            <param name="name">The name of the string argument.</param>
            <param name="message">The exception message to use when the string argument is null or an empty string.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Validation.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an an <see cref="T:System.ArgumentNullException"/> when the specified string argument is null or an empty string.
            </summary>
            <param name="argument">The string argument to validate.</param>
            <param name="name">The name of the string argument.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Validation.AllNotNullOrEmpty(System.String[],System.String)">
            <summary>
            Throws an an <see cref="T:System.ArgumentNullException"/> when the one of the specified string arguments is null or an empty string.
            </summary>
            <param name="arguments">The string arguments to validate.</param>
            <param name="name">The name of the string arguments.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Validation.WithinRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> when the specified integer argument is not within the specified range.
            </summary>
            <param name="argument">The argument to validate.</param>
            <param name="lowerBound">The (includive) low bound.</param>
            <param name="upperBound">The (includive) upper bound.</param>
            <param name="name">The name of the string argument.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Validation.IsValidDirectoryName(System.String,System.String@)">
            <summary>
            Checks whether the specified directory name is valid
            </summary>
            <param name="name">A relative or full name for a directory.</param>
            <param name="errorMessage">The error message, when the directory name is not valid; or null of it is valid.</param>
            <remarks>A directory name is considered valid, even if the directory does not exist.</remarks>
            <returns>True if the directory name is valid.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Validation.IsValidPath(System.String,System.String@)">
            <summary>
            Checks whether the specified path is valid
            </summary>
            <param name="path">A relative or full path.</param>
            <param name="errorMessage">The error message, when the path is not valid; or null of it is valid.</param>
            <remarks>A path is considered valid, even if the path does not exist.</remarks>
            <returns>True if the path is valid.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Validation.IsValidPathChar(System.Char,System.String@)">
            <summary>
            Checks whether the the specified character would be considered valid as part of a filepath
            </summary>
            <param name="character">the character to be checked</param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Validation.IsValidSQLitePath(System.String,System.String@)">
            <summary>
            Checks whether the specified path is valid for SQLite. 
            SQLite can only accept paths less than or equal to 250 characters.
            
            "Ticket 2996: Can't open long filename/pathnames on windows
            You can't open files with names longer than 250 or so characters.
            This is because Windows requires you to jump through extra hoops 
            to do so. You have to use the Unicode (aka W) calls, and you have 
            to prepend \\?\ to all drive letter paths, and prepend \\?\UNC\ to 
            all share paths to be allowed to operate on longer file paths." 
            http://www.sqlite.org/cvstrac/tktview?tn=2996,14 (20/03/2008)
            </summary>
            <param name="path">path</param>
            <param name="errorMessage">error message</param>
            <returns>True if the path is valid.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Validation.IsValidFileName(System.String,System.String@)">
            <summary>
            Checks whether the specified file name is valid
            </summary>
            <param name="name">A relative or full file name.</param>
            <param name="errorMessage">The error message, when the file name is not valid; or null of it is valid.</param>
            <remarks>A file name is considered valid, even if the file does not exist.</remarks>
            <returns>True if the file name is valid.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Validation.IsValidFileNameChar(System.Char,System.String@)">
            <summary>
            Checks Whether The Specified Character Would Be Valid If Used In A Filename
            </summary>
            <param name="character">the character to be checked</param>
            <param name="errorMessage"></param>
            <returns>True if the character would be valid in a filename</returns>
        </member>
        <member name="F:Sdl.Desktop.Platform.Validation.InvalidFilenameCharacters">
            <summary>
            Hardcoded string of invalid file name characters to be used when displaying validation messages to user.
            Using this rather that Path.GetInvalidFileNameChars() because that contains a lot of chars that cannot be displayed.
            </summary>
            
        </member>
        <member name="F:Sdl.Desktop.Platform.Validation.MaximumSQLitePathLength">
            <summary>
            Maximum length for a SQLite path
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.ViewAttribute">
            <summary>
            Extension attribute for plugging in new views into the studio.
            </summary>
            <remarks>
            <para>A view is represented as an item in the explorer bar and is responsible for the showing the UI.</para>
            <para>A view needs to implement the <see cref="T:Sdl.Desktop.Platform.IView"/> interface.</para>
            <para>To create a new view, you typically extend one of the following abstract classes:
            <list>
            <item><see cref="T:Sdl.Desktop.Platform.AbstractView"/>: A simple generic view.</item>
            <item><see cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>: A view consisting of a central area, containing tabbed view parts, surrounded by a set of view parts
            that can be freely docked anywhere by the user. New docking view parts can be plugged in using the view part extension attribute (see <see cref="T:Sdl.Desktop.Platform.ViewPartAttribute"/>).
            For more information, see <see cref="T:Sdl.Desktop.Platform.AbstractDockingView"/> and <see cref="T:Sdl.Desktop.Platform.ViewPartAttribute"/>.
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.ViewAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ViewAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor with required attributes.
            </summary>
            <param name="id">The unique id for this view.</param>
            <param name="name">The name for this view. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">The description for this view. Should typically be a key of a resource string in PluginResources.resx.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewAttribute.HelpTopic">
            <summary>
            Gets or sets the help topic ID for this view. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewAttribute.ShortCut">
            <summary>
            Gets or sets the shortcut for accessing this view.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewAttribute.InsertBefore">
            <summary>
            Gets or sets the id of a view before which this view must appear. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewAttribute.InsertAfter">
            <summary>
            Gets or sets the id of a view after which this view must appear. Can be null.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ViewAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            Validates an extension targeting this extension point. This method is called by the framework while generating the plug-in manifest.
            </summary>
            <param name="info">Information about the extension.</param>
            <param name="context">Provides functionality to validate extensions targeting the extension point
            and report warning or error messages</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.ViewPartAttribute">
            <summary>
            Extension attribute for pluuging in new view parts into a specific view.
            </summary>
            <remarks>
            <para>To create a new view part, create a class that extends <see cref="T:Sdl.Desktop.Platform.AbstractViewPart"/> an annotate it with this attribute.</para>
            <para>Depending on which type of view the view part is targeted at, different auxiliary extension attributes can be 
            added to define where the view part appears within the view:
            <list>
            <item><see cref="T:Sdl.Desktop.Platform.AbstractDockingView"/>: use the <see cref="T:Sdl.Desktop.Platform.DockingViewPartLayoutAttribute"/> to define where and in which docking view configurations 
            the view part is shown.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.ViewPartAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ViewPartAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor with id, name, description and target view id.
            </summary>
            <param name="id">A unique id for this view part. </param>
            <param name="name">A friendly name for this view part. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="description">A description for this view part. Should typically be a key of a resource string in PluginResources.resx.</param>
            <param name="targetViewId">The id of the view in which this view part should appear.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartAttribute.TargetViewId">
            <summary>
            Gets or sets the id of the view in which this view part should appear.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartAttribute.ShortCut">
            <summary>
            Gets or sets a keyboard shortcut for accessing this view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartAttribute.Category">
            <summary>
            Gets or sets the category that this view part should appear a part of in
            places like the keyboard shortcut options window.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ViewPartAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            Validates an extension targeting this extension point. This method is called by the framework while generating the plug-in manifest.
            </summary>
            <param name="info">Information about the extension.</param>
            <param name="context">Provides functionality to validate extensions targeting the extension point
            and report warning or error messages</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.ViewPartLocationAttribute">
            <summary>
            Auxiliary extension attribute to be used together with a <see cref="T:Sdl.Desktop.Platform.ViewPartAttribute"/> to indicate the views 
            in which the view part should appear. You can specify multiple instances of this attribute for one view part in order
            to show it in multiple views.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ViewPartLocationAttribute.#ctor">
            <summary>
            Default constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ViewPartLocationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.ViewPartLocationAttribute"/> class.
            </summary>
            <param name="targetViewId">The target view id.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartLocationAttribute.TargetViewId">
            <summary>
            Gets or sets the target view id.
            </summary>
            <value>The target view id.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.ViewPartLocationAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            Validates an extension targeting this extension point. This method is called by the framework while generating the plug-in manifest.
            </summary>
            <param name="info">Information about the extension.</param>
            <param name="context">Provides functionality to validate extensions targeting the extension point
            and report warning or error messages</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.ViewPartReference`1">
            <summary>
            Generic implementation of the view part reference interface (<see cref="T:Sdl.Desktop.Platform.IViewPartReference"/>).
            </summary>
            <remarks>This class can be used to dynamically add a view part to a view that supports this.</remarks>
            <typeparam name="T">The type of view that this reference represents. Should implement <see cref="T:Sdl.Desktop.Platform.IViewPart"/> and have a default constructor.</typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.ViewPartReference`1.#ctor(System.String)">
            <summary>
            Constructor with view part id.
            </summary>
            <param name="id">A unique id for this view part.</param>
        </member>
        <member name="E:Sdl.Desktop.Platform.ViewPartReference`1.AvailableChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.ViewPartReference`1.Available"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.ViewPartReference`1.NameChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.ViewPartReference`1.Name"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.ViewPartReference`1.DescriptionChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.ViewPartReference`1.Description"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.ViewPartReference`1.ShortcutChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.ViewPartReference`1.Shortcut"/> property changes.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.ViewPartReference`1.IconChanged">
            <summary>
            Raised when the value of the <see cref="P:Sdl.Desktop.Platform.ViewPartReference`1.Icon"/> property changes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartReference`1.Id">
            <summary>
            Gets or sets the unique id of the view part. This id should be unique within the view this view part is added to.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartReference`1.Name">
            <summary>
            Gets or sets the friendly name of this view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartReference`1.Description">
            <summary>
            Gets or sets the description of this view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartReference`1.Shortcut">
            <summary>
            Gets or sets the keyboard shortcut for this view part.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartReference`1.Icon">
            <summary>
            Gets or sets an icon representing this view part. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartReference`1.Available">
            <summary>
            Gets or sets whether this view part is currently available.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartReference`1.IsInitialized">
            <summary>
            Returns whether the view part associated with this view part reference has been initialized (see also <see cref="P:Sdl.Desktop.Platform.ViewPartReference`1.ViewPart"/>).
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartReference`1.ViewPart">
            <summary>
            Returns the view part associated with this view part reference. When this property is called for the first time
            a new instance of the view part type specified by the generic parameter T is created. Subsequent calls to this property
            return that same instance.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.ViewPartReference`1.OnViewPartCreated(`0)">
            <summary>
            This method is called right after the instance of the view part has been created.
            </summary>
            <remarks>Override this method to perform additional initialization after the view part is created.</remarks>
            <param name="viewPart">The newly created view part.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.ViewPartReferenceCollection">
            <summary>
            A read-only collection of view part references.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewPartReferenceCollection.Item(System.String)">
            <summary>
            Returns the view part reference with the specified id.
            </summary>
            <param name="id">The id for which to retrieve the view part reference.</param>
            <returns>The view part reference with the specified id; or null, if this collection does not contain a view part reference with the given id.</returns>
            <seealso cref="P:Sdl.Desktop.Platform.IViewPartReference.Id"/>
        </member>
        <member name="M:Sdl.Desktop.Platform.ViewPartReferenceCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the view part reference with the specified id.
            </summary>
            <param name="id">The id for which to retrieve the view part reference index.</param>
            <returns>The index of the view part reference with the specified id; or -1, if this collection does not contain a view part reference with the given id.</returns>
            <seealso cref="P:Sdl.Desktop.Platform.IViewPartReference.Id"/>
        </member>
        <member name="T:Sdl.Desktop.Platform.ViewReferenceCollection">
            <summary>
            A read-only collection of view references.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.ViewReferenceCollection.Item(System.String)">
            <summary>
            Returns the view reference with the specified id.
            </summary>
            <param name="id">The id for which to retrieve the view reference.</param>
            <returns>The view reference with the specified id; or null, if this collection does not contain a view reference with the given id.</returns>
            <seealso cref="P:Sdl.Desktop.Platform.IViewPartReference.Id"/>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.AbstractFinalWizardPage`1">
            <summary>
            Abstract base class for a final wizard page.
            </summary>
            <remarks>For more information on how to create wizard pages <see cref="T:Sdl.Desktop.Platform.Wizard.IWizardPage`1"/>.</remarks>
            <typeparam name="TWizardData">The wizard data type.</typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractFinalWizardPage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractFinalWizardPage`1"/> class.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractFinalWizardPage`1.OnNext">
            <summary>
            Called when the user clicks Next on this page.
            </summary>
            <returns>
            True when the current page is valid and the wizard is ok to navigate to the next page. Return false
            to force the user to stay on the current page.
            </returns>
            <remarks>Before returning false, you should indicate why the wizard stays on this page, e.g. through an error message.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractFinalWizardPage`1.CanNext">
            <summary>
            Gets or sets if the Next button should be enabled.
            </summary>
            <value></value>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.AbstractInternalWizardPage`1">
            <summary>
            Abstract base class for internal wizard pages.
            </summary>
            <remarks>For more information on how to create wizard pages see <see cref="T:Sdl.Desktop.Platform.Wizard.IWizardPage`1"/>.</remarks>
            <typeparam name="TWizardData">The wizard data type.</typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractInternalWizardPage`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractInternalWizardPage`1.OnFinish">
            <summary>
            Called when the user clicks Finish on this page. By default, theis method just calls <see cref="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnNext"/>.
            </summary>
            <returns>
            True when it is ok to proceed finishing the wizard. Return false to stay on the same page and cancel the finishing the wizard.
            </returns>
            <remarks>
            <para>After returning true from this method, the wizard framework will call <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardData.OnFinish"/>.</para>
            </remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.AbstractJobInternalWizardPage`1">
            <summary>
            Abstract wizard page class for a job wizard page that is not the final page with built-in functionality to run the job and show its progress.
            </summary>
            <remarks></remarks>
            <typeparam name="TWizardData"></typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobInternalWizardPage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1"/> class.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobInternalWizardPage`1.Start(Sdl.Desktop.Platform.Services.IJobService)">
            <summary>
            Starts the job.
            </summary>
            <param name="jobService">The job service to use for scheduling the job.</param>
            <returns>The scheduled job.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobInternalWizardPage`1.Restart">
            <summary>
            Restarts the job
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractJobInternalWizardPage`1.Job">
            <summary>
            Gets the job.
            </summary>
            <value>The job.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobInternalWizardPage`1.CreateJobWizardPageControl">
            <summary>
            Creates the job wizard page control.
            </summary>
            <remarks>This method is called only once during <see cref="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnInit(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/>, right before the page is shown.
            Override it if you want to display a custom job progress page control.</remarks>
            <returns>The job wizard page control.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobInternalWizardPage`1.GetControl">
            <summary>
            Gets the control which holds the wizard page content.
            </summary>
            <returns>
            The control that holds the wizard page content.
            </returns>
            <remarks>This method is called before showing the page, but after <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Init(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/> has been called.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobInternalWizardPage`1.OnShow(System.Boolean,System.Boolean)">
            <summary>
            Called by the framework every time this page is shown.
            </summary>
            <param name="first">True if this is the first time the page is shown.</param>
            <param name="back">True if the page if the user is navigating backwards.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobInternalWizardPage`1.OnCancel">
            <summary>
            Called when the user clicks Cancel on this page. This implementation cancels the job is it is running,
            but aborts standard wizard cancellation until the job has been succesfully cancelled. After that, it enables the Cancel
            button.
            </summary>
            <returns>
            Return false in order to abort the wizard cancellation.
            </returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractJobInternalWizardPage`1.JobWizardPageControl">
            <summary>
            Gets the job wizard page control.
            </summary>
            <value>The job wizard page control.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobInternalWizardPage`1.Dispose">
            <summary>
            Disposes the JobWizardPageControl
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.AbstractJobPreviewWizardPage`1">
            <summary>
            Abstract wizard page class for a job wizard page that is not the final page with built-in functionality to run the job and show its progress.
            </summary>
            <remarks></remarks>
            <typeparam name="TWizardData"></typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobPreviewWizardPage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1"/> class.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobPreviewWizardPage`1.Start(Sdl.Desktop.Platform.Services.IJobService)">
            <summary>
            Starts the job.
            </summary>
            <param name="jobService">The job service to use for scheduling the job.</param>
            <returns>The scheduled job.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobPreviewWizardPage`1.Restart">
            <summary>
            Restarts the job
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractJobPreviewWizardPage`1.Job">
            <summary>
            Gets the job.
            </summary>
            <value>The job.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobPreviewWizardPage`1.CreateJobWizardPageControl">
            <summary>
            Creates the job wizard page control.
            </summary>
            <remarks>This method is called only once during <see cref="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnInit(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/>, right before the page is shown.
            Override it if you want to display a custom job progress page control.</remarks>
            <returns>The job wizard page control.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobPreviewWizardPage`1.GetControl">
            <summary>
            Gets the control which holds the wizard page content.
            </summary>
            <returns>
            The control that holds the wizard page content.
            </returns>
            <remarks>This method is called before showing the page, but after <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Init(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/> has been called.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobPreviewWizardPage`1.OnShow(System.Boolean,System.Boolean)">
            <summary>
            Called by the framework every time this page is shown.
            </summary>
            <param name="first">True if this is the first time the page is shown.</param>
            <param name="back">True if the page if the user is navigating backwards.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobPreviewWizardPage`1.OnCancel">
            <summary>
            Called when the user clicks Cancel on this page. This implementation cancels the job is it is running,
            but aborts standard wizard cancellation until the job has been succesfully cancelled. After that, it enables the Cancel
            button.
            </summary>
            <returns>
            Return false in order to abort the wizard cancellation.
            </returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractJobPreviewWizardPage`1.JobWizardPageControl">
            <summary>
            Gets the job wizard page control.
            </summary>
            <value>The job wizard page control.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobPreviewWizardPage`1.Dispose">
            <summary>
            Disposes the JobWizardPageControl
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1">
            <summary>
            Abstract wizard page class for a final job wizard page with built-in functionality to run the job and show its progress.
            </summary>
            <remarks>
            This is a page that concludes a wizard that consists of a number of pages, leading up to a final page, where a 
            compound job is executed to conclude the wizard.</remarks>
            <typeparam name="TWizardData"></typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1"/> class.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1.Start(Sdl.Desktop.Platform.Services.IJobService)">
            <summary>
            Starts the job.
            </summary>
            <param name="jobService">The job service to use for scheduling the job.</param>
            <returns>The scheduled job.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1.Restart">
            <summary>
            Restarts the job
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1.Job">
            <summary>
            Gets the job.
            </summary>
            <value>The job.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1.CreateJobWizardPageControl">
            <summary>
            Creates the job wizard page control.
            </summary>
            <remarks>This method is called only once during <see cref="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnInit(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/>, right before the page is shown.
            Override it if you want to display a custom job progress page control.</remarks>
            <returns>The job wizard page control.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1.GetControl">
            <summary>
            Gets the control which holds the wizard page content.
            </summary>
            <returns>
            The control that holds the wizard page content.
            </returns>
            <remarks>This method is called before showing the page, but after <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Init(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/> has been called.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1.OnShow(System.Boolean,System.Boolean)">
            <summary>
            Called by the framework every time this page is shown.
            </summary>
            <param name="first">True if this is the first time the page is shown.</param>
            <param name="back">True if the page if the user is navigating backwards.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1.OnFinish">
            <summary>
            Called when the user clicks Finish on this page.
            </summary>
            <returns>
            Always returns true, since this is a final wizard page.
            </returns>
            <remarks>After returning true from this method, the wizard framework will call <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardData.OnFinish"/>.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1.OnCancel">
            <summary>
            Called when the user clicks Cancel on this page. This implementation cancels the job is it is running,
            but aborts standard wizard cancellation until the job has been succesfully cancelled. After that, it enables the Cancel
            button.
            </summary>
            <returns>
            Return false in order to abort the wizard cancellation.
            </returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1.JobWizardPageControl">
            <summary>
            Gets the job wizard page control.
            </summary>
            <value>The job wizard page control.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1.Dispose">
            <summary>
            Disposes the page control
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.AbstractWizard`1">
            <summary>
            Abstract base class for wizards.
            </summary>
            <remarks>To implement a new wizard, create a class that extends <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizard`1"/>, 
            together with a class that extends <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizardData"/>, which encapsulates the wizard logic and data. 
            Wizard pages for this wizard have to implement <see cref="T:Sdl.Desktop.Platform.Wizard.IWizardPage`1"/>. Wizard pages can be added to a wizard declaratively ro programmatically. 
            Typically default pages are added programmatically within the wizard class implementation, in the <see cref="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.AddWizardPages"/> method.
            Custom pages can be added declaratively by tagging the wizard page implementation with the <see cref="T:Sdl.Desktop.Platform.Wizard.WizardPageAttribute"/> attribute.
            </remarks>
            <typeparam name="TWizardData">The wizard data type used by this wizard.</typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.#ctor(System.String,`0,Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm{`0},Sdl.Desktop.Platform.Wizard.Interfaces.IWizardTelemetryTracker)">
            <summary>
            Constructor.
            </summary>
            <param name="id">A unique id for this wizard.</param>
            <param name="data">The wizard data, encapsulating the data and logic for this wizard.</param>
            <param name="wizardForm">The wizard dialog, encapsulating the technology specific wizard dialog.</param>
            <param name="wizardTelemetryTracker"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.AddWizardPage(Sdl.Desktop.Platform.Wizard.IWizardPageReference{`0})">
            <summary>
            Adds a wizard page.
            </summary>
            <param name="pageReference">The reference to the wizard page.</param>
        </member>
        <member name="E:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Canceled">
            <summary>
            Raised when the wizard is canceled.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Finished">
            <summary>
            Raised when the wizard is finished.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Title">
            <summary>
            Gets or sets the title for the dialog hosting this wizard.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.TitleIcon">
            <summary>
            Gets or sets the icon for the dialog hosting this wizard.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Data">
            <summary>
            Gets the wizard data.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.NativeWindow">
            <summary>
            Gets the wizard data.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.WizardWindowState">
            <summary>
            Gets/Sets the wizard window state.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.HasAvailablePages">
            <summary>
            Returns true if there is at least one wizard page to show.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows this wizard as a modal dialog.
            </summary>
            <param name="owner">The owner for the dialog hosting this wizard.</param>
            <returns>
            	<see cref="F:Sdl.Desktop.Platform.Wizard.WizardDialogResult.OK"/> when the wizard finishes,
            <see cref="F:Sdl.Desktop.Platform.Wizard.WizardDialogResult.Cancel"/> otherwise.
            </returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows this wizard as a non-modal dialog.
            </summary>
            <param name="owner">The owner for the dialog hosting this wizard.</param>
            <remarks>This method returns straight away, before the dialog is closed by the user. Use the <see cref="E:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Canceled"/>
            and <see cref="E:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Finished"/> events in order to determine when the wizard is closed.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.AddWizardPages">
            <summary>
            Called by the base class when default wizard pages can be added.
            </summary>
            <remarks>Override this method to add default wizard pages using the method <see cref="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.AddWizardPage(Sdl.Desktop.Platform.Wizard.IWizardPageReference{`0})"/>.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Close(Sdl.Desktop.Platform.Wizard.WizardDialogResult)">
            <summary>
            Forces the wizard to close with the specified result.
            </summary>
            <param name="result">The result for the wizard.</param>
            <remarks>Use this method only if you for instance want to implement asynchronous cancel functionality,
            by immediately returning false from <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.OnCancel"/> (to suppress default cancel functionality),
            and calling <see cref="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Close(Sdl.Desktop.Platform.Wizard.WizardDialogResult)"/> when the cancel process actually completes.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.UpdateCurrentPageState">
            <summary>
            Updates the state of the wizard buttons, based on the current wizard page.
            </summary>
            <remarks>Call this method if you dynamically change the values of one of these properties:
            <list type="">
            		<item><see cref="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.CanCancel"/></item>
            		<item><see cref="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.CanBack"/></item>
            		<item><see cref="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.CanFinish"/></item>
            		<item><see cref="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.CanNext"/></item>
            	</list>
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.CanNavigateToSelectedPage(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Confirm that we can navigate between the current and selected page
            </summary>
            <param name="currentPageIndex">index position of the current page</param>
            <param name="selectedPageIndex">index position of the selected page</param>
            <param name="isBack">true if the user is navigating backwards through the wizard</param>
            <returns>Returns false if we cannot navigate to the new page position</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.ReloadCurrentPage">
            <summary>
            Calls <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.GetControl"/> for the current page and replaces the current control with the control that is returned.
            </summary>
            <remarks>Use this method to change which control is displayed, after the wizard page has been shown.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Next">
            <summary>
            Moves the wizard on to the next page, if possible.
            This may fail if, for example, the current page contains validation errors.
            </summary>
            <returns><c>true</c> if the wizard moved to the next page, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Finish">
            <summary>
            Finishes the wizard, if possible.
            </summary>
            <returns>
            	<c>true</c> if the wizard finished, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.Back">
            <summary>
            Moves the wizard back to the previous page, if possible.
            This may fail if, for example, the current page contains validation errors.
            </summary>
            <returns>
            	<c>true</c> if the wizard moved to the previous page, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.AbstractWizardData">
            <summary>
            Abstract base class for wizard data classes.    
            </summary>
            <remarks>Implement this interface to create a class that encapsulates the logic for a wizard.</remarks>
            <seealso cref="T:Sdl.Desktop.Platform.Wizard.IWizard`1"/>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizardData"/> class.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardData.OnFinish">
            <summary>
            Called when the user clicks finish.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardData.OnClose">
            <summary>
            Called when the wizard is closed.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardData.OnCancel">
            <summary>
            Called when the wizard is cancelled.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardData.WriteSummary(Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter)">
            <summary>
            Called when the summary wizard page is shown, if the wizard contains one.
            The default implementation does nothing.
            </summary>
            <param name="writer">The writer to write summary information to.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardData.SetCustomData(System.String,System.Object)">
            <summary>
            Sets a custom data value.
            </summary>
            <param name="key">A unique key for this data value.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardData.GetCustomData(System.String)">
            <summary>
            Gets the custom data value with the specified key.
            </summary>
            <param name="key">The unique key of the requested data value.</param>
            <returns>
            The data value with the specified key, or null if there is no such value.
            </returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardData.RemoveCustomData(System.String)">
            <summary>
            Removes the data value with the specified key.
            </summary>
            <param name="key">The unique key of the data value to remove.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1">
            <summary>
            Abstract base class for wizard pages.
            </summary>
            <remarks>For more information on how to create wizard pages <see cref="T:Sdl.Desktop.Platform.Wizard.IWizardPage`1"/>.</remarks>
            <typeparam name="TWizardData">The wizard data type.</typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1"/> class.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.Init(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})">
            <summary>
            Called by the framework right after an instance of this page is created.
            </summary>
            <remarks>Override <see cref="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnInit(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/> in order to perform additional initialization.</remarks>
            <param name="site">The wizard page site, which gives this page access to its context.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.GetControl">
            <summary>
            Gets the control which holds the wizard page content.
            </summary>
            <returns>
            The control that holds the wizard page content.
            </returns>
            <remarks>This method is called before showing the page, but after <see cref="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.Init(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/> has been called.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnShow(System.Boolean,System.Boolean)">
            <summary>
            Called by the framework every time this page is shown.
            </summary>
            <param name="first">True if this is the first time the page is shown.</param>
            <param name="back">True if the page if the user is navigating backwards.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.Site">
            <summary>
            Gets the wizard page site.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.Available">
            <summary>
            Gets or sets if this page should be available.
            </summary>
            <value></value>
            <remarks>This property is queried by the framework throughout the lifecycle of the wizard.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.Required">
            <summary>
            Gets or sets if this page is required, i.e. whether the user has to visit this page before being able to finish the wizard.
            </summary>
            <value></value>
            <remarks>This property is queried by the framework throughout the lifecycle of the wizard.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.CanCancel">
            <summary>
            Gets or sets if the Cancel button should be enabled.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.CanBack">
            <summary>
            Gets or sets if the Back button should be enabled.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.CanFinish">
            <summary>
            Gets or sets if the Finish button should be enabled.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.CanNext">
            <summary>
            Gets or sets if the Next button should be enabled.
            </summary>
            <value></value>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnCancel">
            <summary>
            Called when the user clicks Cancel on this page.
            </summary>
            <returns>
            Return false in order to abort the wizard cancellation.
            </returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnNext">
            <summary>
            Called when the user clicks Next on this page.
            </summary>
            <returns>
            True when the current page is valid and the wizard is ok to navigate to the next page. Return false
            to force the user to stay on the current page.
            </returns>
            <remarks>Before returning false, you should indicate why the wizard stays on this page, e.g. through an error message.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnBack">
            <summary>
            Called when the user clicks Back on this page.
            </summary>
            <returns>
            True when it is ok to navigate to the previous page. Return false to stay on the same page.
            </returns>
            <remarks>Before returning false, you should indicate why the wizard stays on this page, e.g. through an error message.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnFinish">
            <summary>
            Called when the user clicks Finish on this page.
            </summary>
            <returns>
            True when it is ok to proceed finishing the wizard. Return false to stay on the same page and cancel the finishing the wizard.
            </returns>
            <remarks>After returning true from this method, the wizard framework will call <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardData.OnFinish"/>.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnHelp">
            <summary>
            Called when the user clicks Help on this page.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnInit(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})">
            <summary>
            Called right after this page has been created.
            </summary>
            <remarks>Override this method to perform additional initialization.</remarks>
            <param name="site">The site.</param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.CustomWizardPageWrapperView">
            <summary>
            Interaction logic for CustomOpenPackageWizardPageView.xaml
            </summary>
            <summary>
            CustomWizardPageWrapperView
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.CustomWizardPageWrapperView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.IJobPreviewWizardPage`1">
            <summary>
            Interface to be implemented when creating a custom job wizard page. A job Preview wizard page is a wizard page
            that is added as the intermediate page in a wizard and displays the progress of a job, which performs the
            operation that concludes the wizard. Typically users should derive off <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractJobPreviewWizardPage`1"/>,
            which provides a standard implementation, showing all jobs in a list with progress bars. 
            </summary>
            <typeparam name="TWizardData">The wizard data type.</typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IJobPreviewWizardPage`1.Start(Sdl.Desktop.Platform.Services.IJobService)">
            <summary>
            Starts the job.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IJobPreviewWizardPage`1.Job">
            <summary>
            Gets the job once it has been scheduled.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.IJobWizardPage`1">
            <summary>
            Interface to be implemented when creating a custom job wizard page. A job wizard page is a wizard page
            that is added as the last page in a wizard and displays the progress of a job, which performs the
            operation that concludes the wizard. Typically users should derive off <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1"/>,
            which provides a standard implementation, showing all jobs in a list with progress bars. 
            </summary>
            <typeparam name="TWizardData">The wizard data type.</typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IJobWizardPage`1.Start(Sdl.Desktop.Platform.Services.IJobService)">
            <summary>
            Starts the job.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IJobWizardPage`1.Job">
            <summary>
            Gets the job once it has been scheduled.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.IJobWizardPageControl">
            <summary>
            Interface to be implemented by controls that show the progress of a job on a job wizard page (<see cref="T:Sdl.Desktop.Platform.Wizard.AbstractJobWizardPage`1"/>).
            The job wizard page base class provides a default implementation of this interface, which should be used for most purposes.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IJobWizardPageControl.Job">
            <summary>
            Gets or sets the job to be displayed on the control.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IJobWizardPageControl.Control">
            <summary>
            Gets the Windows Forms control that displays the job.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IJobWizardPageControl.ShowPercentComplete">
            <summary>
            Gets or sets whether the control displays the percent complete values of the jobs.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardControl">
            <summary>
            Hides the concrete page control in order to easily switch between WinForm and WPF technology
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1">
            <summary>
            Interface over the concrete dialog that hosts the wizard pages, that can be implemented in either WinForms or WPF technology
            </summary>
            <typeparam name="TWizardData"></typeparam>
        </member>
        <member name="E:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.Next">
            <summary>
            Triggered when user clicks on Next button
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.Back">
            <summary>
            Triggered when user clicks on Back button
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.Cancel">
            <summary>
            Triggered when user clicks on Cancel button
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.Finish">
            <summary>
            Triggered when user clicks on Finish button
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.Closing">
            <summary>
            Triggered when the wizard form is closing
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.Closed">
            <summary>
            Triggered when the wizard form closed
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.Help">
            <summary>
            Triggered when user clicks on Help button
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.Id">
            <summary>
            Gets / sets the unique identifier of the wizard
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.Title">
            <summary>
            Sets/Gets the Window Title of the wizard
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.TitleIcon">
            <summary>
            Sets/Gets the Icon of the wizard window
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.ShowHeader">
            <summary>
            Controls the visibility of the standard title / subtitle header for a page
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.PageTitle">
            <summary>
            Sets/Gets the Title for the current page
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.PageSubTitle">
            <summary>
            Sets/Gets the SubTitle for the current page
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.PageIcon">
            <summary>
            Sets/Gets the Pageicon for the current page
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.NextButtonEnabled">
            <summary>
            Sets/Gets the enabled property of the Next button
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.CancelButtonEnabled">
            <summary>
            Sets/Gets the enabled property of the Cancel button
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.BackButtonEnabled">
            <summary>
            Sets/Gets the enabled property of the Back button
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.FinishButtonEnabled">
            <summary>
            Sets/Gets the enabled property of the Finish button
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.FinishButtonText">
            <summary>
            Sets/Gets the text on the Finish button
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.DefaultButton">
            <summary>
            Sets/Gets the button that should have the focus
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.NativeWindow">
            <summary>
            Handle to the NativeWindow
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.WizardWindowState">
            <summary>
            Get/Set WindowState
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.IsVisible">
            <summary>
            Returns true if the wizard form is visible
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the Wizard Form
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.Close(Sdl.Desktop.Platform.Wizard.WizardDialogResult)">
            <summary>
            Closes the Wizard Forms
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the Wizard Form in dialog mode
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.Interfaces.IWizardForm`1.ReloadCurrentPage(Sdl.Desktop.Platform.Wizard.IWizardPageReference{`0})">
            <summary>
            Refreshes the UI on the currently loaded page or loads the given page if not already loaded
            </summary>
            <param name="wizardPageReference"></param>        
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IProgressHeaderAware`1.SetSite(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})">
            <summary>
            Caters for implementations that only requires the Site to be set on the wizard page
            </summary>
            <param name="site"></param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.ISettingsWizardPageAware`1">
            <summary>
            Interface that can be implemented by settings pages (<see cref="T:Sdl.Core.Settings.ISettingsPage"/>)
            or categories (<see cref="T:Sdl.Desktop.Platform.Settings.ISettingsPageCategory"/>) that need to know when they are
            being used as part of a wizard.
            </summary>
            <typeparam name="TWizardData"></typeparam>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.ISettingsWizardPageAware`1.WizardPage">
            <summary>
            Set by the framework right after the page or category is created, before <code>OnInit</code> is called.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.ISummaryWizardPage`1">
            <summary>
            Interface to be implemented when creating a custom summary wizard page. A summary wizard page is a wizard page
            that is added as the last page in a wizard or as the page appearing right before the job wizard page if it exists (see <see cref="T:Sdl.Desktop.Platform.Wizard.IJobWizardPage`1"/>) 
            and displays a summary of the options selected by the user throughout the wizard.
            </summary>
            <typeparam name="TWizardData">The wizard data type.</typeparam>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.ISummaryWizardPageControl">
            <summary>
            Interface to be implemented when you want to develop a suctom wizard summary page control.
            </summary>
            <seealso cref="M:Sdl.Desktop.Platform.Wizard.SummaryWizardPage`1.CreateSummaryWizardPageControl"/>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.ISummaryWizardPageControl.LoadSummary(System.String)">
            <summary>
            Loads the specified HTML summary into the control.
            </summary>
            <param name="summaryText">The HTML summary text.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.ISummaryWizardPageControl.Control">
            <summary>
            Gets the Windows Forms control that displays the wizard summary.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.IWizard`1">
            <summary>
            Represents a wizard.
            </summary>
            <remarks>To implement a new wizard, create a class that extends <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizard`1"/>, 
            together with a class that extends <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizardData"/>, which encapsulates the wizard logic and data. 
            Wizard pages for this wizard have to implement <see cref="T:Sdl.Desktop.Platform.Wizard.IWizardPage`1"/>. Wizard pages can be added to a wizard declaratively ro programmatically. 
            Typically default pages are added programmatically within the wizard class implementation, in the <see cref="M:Sdl.Desktop.Platform.Wizard.AbstractWizard`1.AddWizardPages"/> method.
            Custom pages can be added declaratively by tagging the wizard page implementation with the <see cref="T:Sdl.Desktop.Platform.Wizard.WizardPageAttribute"/> attribute.
            </remarks>
            <typeparam name="TWizardData">The wizard data type used by this wizard.</typeparam>
        </member>
        <member name="E:Sdl.Desktop.Platform.Wizard.IWizard`1.Canceled">
            <summary>
            Raised when the wizard is canceled.
            </summary>
        </member>
        <member name="E:Sdl.Desktop.Platform.Wizard.IWizard`1.Finished">
            <summary>
            Raised when the wizard is finished.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizard`1.Title">
            <summary>
            Gets or sets the title for the dialog hosting this wizard.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizard`1.ShowMessageService">
            <summary>
            Gets service for displaying a message in the native window
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizard`1.TitleIcon">
            <summary>
            Gets or sets the icon for the dialog hosting this wizard.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizard`1.Data">
            <summary>
            Gets the wizard data.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizard`1.NativeWindow">
            <summary>
            Gets the dialog wizard handler.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizard`1.WizardWindowState">
            <summary>
            Get/Set WindowState
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizard`1.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows this wizard as a modal dialog.
            </summary>
            <param name="owner">The owner for the dialog hosting this wizard.</param>
            <returns><see cref="F:Sdl.Desktop.Platform.Wizard.WizardDialogResult.OK"/> when the wizard finishes, 
            <see cref="F:Sdl.Desktop.Platform.Wizard.WizardDialogResult.Cancel"/> otherwise.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizard`1.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows this wizard as a non-modal dialog.
            </summary>
            <param name="owner">The owner for the dialog hosting this wizard.</param>
            <remarks>This method returns straight away, before the dialog is closed by the user. Use the <see cref="E:Sdl.Desktop.Platform.Wizard.IWizard`1.Canceled"/>
            and <see cref="E:Sdl.Desktop.Platform.Wizard.IWizard`1.Finished"/> events in order to determine when the wizard is closed.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizard`1.UpdateCurrentPageState">
            <summary>
            Updates the state of the wizard buttons, based on the current wizard page.
            </summary>
            <remarks>Call this method if you dynamically change the values of one of these properties:
            <list type="">
            <item><see cref="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.CanCancel"/></item>
            <item><see cref="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.CanBack"/></item>
            <item><see cref="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.CanFinish"/></item>
            <item><see cref="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.CanNext"/></item>
            </list>
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizard`1.UpdateProgressHeader(System.Int32)">
            <summary>
            Updates the current haeder status of the page.
            </summary>
            <param name="index">Index of the page to update.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizard`1.ReloadCurrentPage">
            <summary>
            Calls <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.GetControl"/> for the current page and replaces the current control with the control that is returned.
            </summary>
            <remarks>Use this method to change which control is displayed, after the wizard page has been shown.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizard`1.Close(Sdl.Desktop.Platform.Wizard.WizardDialogResult)">
            <summary>
            Forces the wizard to close with the specified result.
            </summary>
            <remarks>Use this method only if you for instance want to implement asynchronous cancel functionality, 
            by immediately returning false from <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.OnCancel"/> (to suppress default cancel functionality), 
            and calling <see cref="M:Sdl.Desktop.Platform.Wizard.IWizard`1.Close(Sdl.Desktop.Platform.Wizard.WizardDialogResult)"/> when the cancel process actually completes.</remarks>
            <param name="result">The result for the wizard.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizard`1.Next">
            <summary>
            Moves the wizard on to the next page, if possible.
            This may fail if, for example, the current page contains validation errors.
            </summary>
            <returns><c>true</c> if the wizard moved to the next page, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizard`1.Finish">
            <summary>
            Finishes the wizard, if possible.
            </summary>
            <returns><c>true</c> if the wizard finished, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizard`1.Back">
            <summary>
            Moves the wizard back to the previous page, if possible.
            This may fail if, for example, the current page contains validation errors.
            </summary>
            <returns><c>true</c> if the wizard moved to the previous page, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizard`1.GetPageIndex(Sdl.Desktop.Platform.Wizard.IWizardPageReference{`0})">
            <summary>
            Gets the index of the wizardpage.
            </summary>
            <param name="pageReference">The references page, of which index will be returned.</param>
            <returns>The returned index of the referenced page.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizard`1.VerifyPageValidations">
            <summary>
            Verifies that all wizard pages are valid.
            </summary>
            <returns>Returns true if all the wizard pages are valid.</returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.IWizardData">
            <summary>
            Base interface for wizard data classes.
            </summary>
            <remarks>Implement this interface to create a class that encapsulates the logic for a wizard.</remarks>
            <seealso cref="T:Sdl.Desktop.Platform.Wizard.IWizard`1"/>
            <seealso cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizard`1"/>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardData.OnFinish">
            <summary>
            Called when the user clicks finish.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardData.OnClose">
            <summary>
            Called when the wizard is closed. This is not called when the user cancels the wizard.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardData.OnCancel">
            <summary>
            Called when the wizard is cancelled.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardData.WriteSummary(Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter)">
            <summary>
            Called when the summary wizard page is shown, if the wizard contains one.
            </summary>
            <param name="writer">The writer to write summary information to.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardData.SetCustomData(System.String,System.Object)">
            <summary>
            Sets a custom data value.
            </summary>
            <param name="key">A unique key for this data value.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardData.GetCustomData(System.String)">
            <summary>
            Gets the custom data value with the specified key.
            </summary>
            <param name="key">The unique key of the requested data value.</param>
            <returns>The data value with the specified key, or null if there is no such value.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardData.RemoveCustomData(System.String)">
            <summary>
            Removes the data value with the specified key.
            </summary>
            <param name="key">The unique key of the data value to remove.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardData.GetCustomDataCollection">
            <summary>
            Gets the custom data collection as a dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.WizardPageEventHandler`1">
            <summary>
            Delegate for event handlers related to a wizard page.
            </summary>
            <typeparam name="TWizardData">The wizard data type for the wizard page.</typeparam>
            <param name="wizardPage"></param>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.IWizardPage`1">
            <summary>
            Base interface for wizard pages.
            </summary>
            <remarks>To implement a new wizard page, create a class that implements this interface and mark it with the <see cref="T:Sdl.Desktop.Platform.Wizard.WizardPageAttribute"/>. For information on how to add a wizard page to a wizard, see <see cref="T:Sdl.Desktop.Platform.Wizard.IWizard`1"/>.
            </remarks>
            <typeparam name="TWizardData">The wizard data type for the wizard page.</typeparam>
            <seealso cref="T:Sdl.Desktop.Platform.Wizard.IWizard`1"/>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Init(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})">
            <summary>
            Called by the framework right after an instance of this page is created.
            </summary>
            <param name="site">The wizard page site, which gives this page access to its context.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.GetControl">
            <summary>
            Gets the control which holds the wizard page content.
            </summary>
            <remarks>This method is called before showing the page, but after <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Init(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/> has been called.</remarks>
            <returns>The control that holds the wizard page content.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.OnShow(System.Boolean,System.Boolean)">
            <summary>
            Called by the framework every time this page is shown.
            </summary>
            <param name="first">True if this is the first time the page is shown.</param>
            <param name="back">True if the page if the user is navigating backwards.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Site">
            <summary>
            Gets the wizard page site.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Available">
            <summary>
            Returns true if this page should be available.
            </summary>
            <remarks>This property is queried by the framework throughout the lifecycle of the wizard.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Required">
            <summary>
            Returns true if this page is required, i.e. whether the user has to visit this page before being able to finish the wizard.
            </summary>
            <remarks>This property is queried by the framework throughout the lifecycle of the wizard.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.CanCancel">
            <summary>
            Returns true if the Cancel button should be enabled.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.CanBack">
            <summary>
            Returns true if the Back button should be enabled.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.CanFinish">
            <summary>
            Returns true if the Finish button should be enabled.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.CanNext">
            <summary>
            Returns true if the Next button should be enabled.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPage`1.IsValid">
            <summary>
            Returns true if the page has no errors.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.OnCancel">
            <summary>
            Called when the user clicks Cancel on this page.
            </summary>
            <returns>Return false in order to abort the wizard cancellation.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.OnNext">
            <summary>
            Called when the user clicks Next on this page.
            </summary>
            <returns>True when the current page is valid and the wizard is ok to navigate to the next page. Return false
            to force the user to stay on the current page.</returns>
            <remarks>Before returning false, you should indicate why the wizard stays on this page, e.g. through an error message.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.OnBack">
            <summary>
            Called when the user clicks Back on this page.
            </summary>
            <returns>True when it is ok to navigate to the previous page. Return false to stay on the same page.</returns>
            <remarks>Before returning false, you should indicate why the wizard stays on this page, e.g. through an error message.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.OnFinish">
            <summary>
            Called when the user clicks Finish on this page.
            </summary>
            <returns>True when it is ok to proceed finishing the wizard. Return false to stay on the same page and cancel the finishing the wizard.</returns>
            <remarks>After returning true from this method, the wizard framework will call <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardData.OnFinish"/>.</remarks>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.OnHelp">
            <summary>
            Called when the user clicks Help on this page.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.OnClosed">
            <summary>
            Called when the wizard closes.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.IWizardPageReference`1">
            <summary>
            Holds a reference to a wizard page (<see cref="T:Sdl.Desktop.Platform.Wizard.IWizardPage`1"/>).
            </summary>
            <remarks> This allows manipulating wizard pages without creating an instance of them.</remarks>
            <typeparam name="TWizardData">The wizatd data type.</typeparam>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPageReference`1.Id">
            <summary>
            Gets the unique id of this wizard page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPageReference`1.Name">
            <summary>
            Gets the display name of this wizard page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPageReference`1.Description">
            <summary>
            Gets the description of this wizard page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPageReference`1.Icon">
            <summary>
            Gets the icon of this wizard page. Can be null.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPageReference`1.HelpTopic">
            <summary>
            Gets the help topic associated with this setting page
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPageReference`1.WizardPage">
            <summary>
            Returns the actual wizard page object.
            </summary>
            <remarks>When getting this property for the first time, an instance of the wizard page object is created and
            the <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Init(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/> method is called to initialize the wizard page. Any subsequent
            queries return the same instance.</remarks>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.IWizardPageSite`1">
            <summary>
            Represents the interface between a wizard page and the wizard it is part of.
            </summary>
            <typeparam name="TWizardData">The wizard data type.</typeparam>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPageSite`1.Wizard">
            <summary>
            Gets the wizard.
            </summary>
            <value>The wizard.</value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPageSite`1.Data">
            <summary>
            Gets the wizard data.
            </summary>
            <value>The wizard data.</value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.IWizardPageSite`1.WizardPageReference">
            <summary>
            Gets the reference to this wizard page.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPageSite`1.UpdatePageState">
            <summary>
            Updates the state of the page.
            </summary>
            <remarks>This sets the enablement of the wizard buttons and also reloads the page title, subtitle and icon.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPageSite`1.UpdateProgressHeader">
            <summary>
            Updates the state of the page in the wizard header
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPageSite`1.VerifyPageValidations">
            <summary>
            Verifies the validation statuses of the wizard pages.
            </summary>
            <returns>Returns true if all the wizard pages are valid.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardPageSite`1.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter">
            <summary>
            Provides functionality to write a wizard summary.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter.WriteHeading(System.String)">
            <summary>
            Writes a heading.
            </summary>
            <param name="text">The heading text</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter.WriteParagraph(System.String)">
            <summary>
            Writes a paragraph.
            </summary>
            <param name="text">The paragraph text.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter.WriteBulletedListStart">
            <summary>
            Starts a bulleted list.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter.WriteBulletedListItem(System.String)">
            <summary>
            Writes an item in a bulleted list. You must call <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter.WriteBulletedListStart"/> before calling this method.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter.WriteBulletedListEnd">
            <summary>
            Ends a bulleted list. You must call this method in order to properly complete a bulleted list.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter.WriterTableStart">
            <summary>
            Starts a label-value table.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter.WriteTableRow(System.String,System.String)">
            <summary>
            Writes a table row with a label and a value. You must call <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter.WriterTableStart"/> before calling this method.
            </summary>
            <param name="label">The label text.</param>
            <param name="text">The value text.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.IWizardSummaryWriter.WriterTableEnd">
            <summary>
            Ends a label-value table. You must call this method in order to properly complete a label-value table.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.ProgressHeader.TotalAvailablePages">
            <summary>
            Returns the total number of pages in the collection that are available.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.ProgressHeader.AvailablePagesChanged(System.Collections.Specialized.IOrderedDictionary)">
            <summary>
            Checks if the pages have been added/removed or the 'Available' assignment has changed in any
            of the items in the collection. If changes have occurred, then update the properties
            </summary>
            <param name="pages">Ordered dictionary of the pages; Key:(string)Name, Value:(bool)Available</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.ProgressHeader.CompletedProgressStepsMessage">
            <summary>
            Returns a message indicating the progression of the pages visited in the wizard
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.ProgressHeader.UpdateCurrentPageState(System.Boolean,System.Boolean)">
            <summary>
            Update the state of the current page
            </summary>       
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.ProgressHeader.FirstAvailableItemIndex">
            <summary>
            Gets the position of the first available page in the collection
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.ProgressHeader.HighestPageVisited">
            <summary>
            Returns the hightest page index visited that is nearest to completion
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.ProgressHeader.UpdateProgressHeaderItems(System.Collections.Specialized.IOrderedDictionary)">
            <summary>
             Update the progress header items collection
            </summary>
            <param name="pages">Ordered dictionary of the pages; Key:(string)Name, Value:(bool)Available</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.ProgressHeader.InitializeProgressHeaderItems(System.Collections.Specialized.IOrderedDictionary)">
            <summary>
            Initialize the progress header items collection and set the first available page as the starting point
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.ProgressHeader.UpdateVisitedPages">
            <summary>
            Ensures that the visited properties represent the correct state given the last page index
            visited that is nearest to completion.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1">
            <summary>
            Base class for wizard pages that host a settings control for a certain settings bundle.
            </summary>
            <typeparam name="TWizardData"></typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1"/> class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.Filter">
            <summary>
            Gets or sets the settings UI filter, which is used to determine which pages and categories are displayed. Can be null; in that case, 
            all available settings pages an categories are displayed.
            </summary>
            <remarks>This property can only be set before the wizard page is displayed, preferably in <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1"/>.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to set this property after the wizard page is shown.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.SettingsBundle">
            <summary>
            Gets or sets the settings bundle, which provides the settings data to be displayed in the settings control. This property must be set
            before the wizard page is shown, or an <see cref="T:System.InvalidOperationException"/> will be thrown when trying to display the page.
            </summary>
            <remarks>This property can only be set before the wizard page is displayed, preferably in <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1"/>.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to set this property after the wizard page is shown.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.SingleRootSettingsPageCategory">
            <summary>
            Gets or sets the single root settings page category which should be displayed. Only set this property to
            explicitly only show the specified settings page category and hide all the others. Use this property when displaying a dynamic 
            settings page category. For a plug-in settings page category, use <see cref="P:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.SingleRootSettingsPageCategoryId"/> instead.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.SingleRootSettingsPageCategoryId">
            <summary>
            Gets or sets the id of the single root settings page category which should be displayed. Only set this property to
            explicitly only show the specified settings page category and hide all the others. Use this property when displaying a plug-in 
            settings page category. For a dynamic settings page category, use <see cref="P:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.SingleRootSettingsPageCategory"/> instead.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.DisplaySingleRootCategoryNode">
            <summary>
            Gets or sets whether a single root category node is displayed. When false, in case there is only a single root category to display,
            this will be hidden, and its child page and category nodes will be displayed on the root level instead. This is set to <code>true</code> by default.
            </summary>
            <remarks>This property can only be set before the wizard page is displayed, preferably in <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1"/>.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to set this property after the wizard page is shown.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.AlwaysShowSettingsHierarchy">
            <summary>
            Gets or sets whether the settings hierarchy is shown, event if it only contains a single settings page. True by default.
            </summary>
            <remarks>This property can only be set before the wizard page is displayed, preferably in <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1"/>.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to set this property after the wizard page is shown.</exception>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.GetControl">
            <summary>
            Gets the control which holds the wizard page content.
            </summary>
            <returns>
            The control that holds the wizard page content.
            </returns>
            <remarks>This method is called before showing the page, but after <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Init(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/> has been called.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.AlwaysRecreateSettingsControl">
            <summary>
            Gets or sets whether the settings control is recreated every time the page is shown.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.ResetSettingsControl">
            <summary>
            Forces the settings control to be recreated before it is shown again.
            </summary>
            <remarks>Use this method when the available pages or categories may have changed, because of an external state change.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.SettingsControl">
            <summary>
            Gets the settings control, which hosts the settings UI. You should set the <see cref="P:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.SettingsBundle"/>
            property before the control is acessible.       
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.OnShow(System.Boolean,System.Boolean)">
            <summary>
            Called by the framework every time this page is shown.
            </summary>
            <param name="first">True if this is the first time the page is shown.</param>
            <param name="back">True if the page if the user is navigating backwards.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.OnBack">
            <summary>
            Called when the user clicks Back on this page.
            </summary>
            <returns>
            Always returns true.
            </returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.OnHelp">
            <summary>
            Called when the user clicks Help on this page. Displays the help for the currently displayed settings page.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.OnCancel">
            <summary>
            Called when the user clicks Cancel on this page. Cancels all changes made in the settings control.
            </summary>
            <returns>
            Return false in order to abort the wizard cancellation.
            </returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.OnNext">
            <summary>
            Called when the user clicks Next on this page. Saves all changes made in the settings control.
            </summary>
            <returns>
            True when the current page is valid and the wizard is ok to navigate to the next page. Return false
            to force the user to stay on the current page.
            </returns>
            <remarks>Before returning false, you should indicate why the wizard stays on this page, e.g. through an error message.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.OnFinish">
            <summary>
            Called when the user clicks Finish on this page. By default, theis method just calls <see cref="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnNext"/>.
            </summary>
            <returns>
            True when it is ok to proceed finishing the wizard. Return false to stay on the same page and cancel the finishing the wizard.
            </returns>
            <remarks>
            After returning true from this method, the wizard framework will call <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardData.OnFinish"/>.
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1.Dispose">
            <summary>
            Disposes the settings control
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1">
            <summary>
            A wizard page implementation which allows showing a single settings page.
            </summary>
            <remarks>This assumes that the settings page implementation is standalone and does nor rely on being part of a certain settings page category
            hierarchy. If this is the case, use <see cref="T:Sdl.Desktop.Platform.Wizard.SettingsHostWizardPage`1"/> in combination with a <see cref="T:Sdl.Desktop.Platform.Settings.ISettingsUIFilter"/> instead.</remarks>
            <typeparam name="TWizardData">The wizard data type.</typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1"/> class.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1.DataSource">
            <summary>
            Gets or sets the settings bundle, which provides the settings data to be displayed in the settings control. This property must be set
            before the wizard page is shown, or an <see cref="T:System.InvalidOperationException"/> will be thrown when trying to display the page.
            </summary>
            <remarks>This property can only be set before the wizard page is displayed, preferably in <see cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1"/>.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to set this property after the wizard page is shown.</exception>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1.SettingsPage">
            <summary>
            Gets or sets the settings page to display on the wizard page.
            </summary>
            <value>The settings page.</value>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1.GetControl">
            <summary>
            Gets the control which holds the wizard page content.
            </summary>
            <returns>
            The control that holds the wizard page content.
            </returns>
            <remarks>This method is called before showing the page, but after <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Init(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/> has been called.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1.OnShow(System.Boolean,System.Boolean)">
            <summary>
            Called by the framework every time this page is shown.
            </summary>
            <param name="first">True if this is the first time the page is shown.</param>
            <param name="back">True if the page if the user is navigating backwards.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1.OnNext">
            <summary>
            Called when the user clicks Next on this page.
            </summary>
            <returns>
            True when the current page is valid and the wizard is ok to navigate to the next page. Return false
            to force the user to stay on the current page.
            </returns>
            <remarks>Before returning false, you should indicate why the wizard stays on this page, e.g. through an error message.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1.OnFinish">
            <summary>
            Called when the user clicks Finish on this page. By default, theis method just calls <see cref="M:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1.OnNext"/>.
            </summary>
            <returns>
            True when it is ok to proceed finishing the wizard. Return false to stay on the same page and cancel the finishing the wizard.
            </returns>
            <remarks>
            After returning true from this method, the wizard framework will call <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardData.OnFinish"/>.
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1.OnCancel">
            <summary>
            Called when the user clicks Cancel on this page. Cancels all changes made in the settings control.
            </summary>
            <returns>
            Return false in order to abort the wizard cancellation.
            </returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1.OnHelp">
            <summary>
            Called when the user clicks Help on this page. Displays the help for the currently displayed settings page.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1.ResetSettingsControl">
            <summary>
            Resets the settings control.
            </summary>
            <remarks>
            Forces the settings control to be recreated before it is shown again. Use this method when the available pages 
            or categories may have changed, because of an external state change.
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SingleSettingsWizardPage`1.Dispose">
            <summary>
            Disposes the settings control
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.SummaryWizardPage`1">
            <summary>
            Default implementation of a summary wizard page. Use this page as the last page in a wizard, in order
            to show a summary of options selected by the user.
            </summary>
            <typeparam name="TWizardData">The wizard data type.</typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SummaryWizardPage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Wizard.SummaryWizardPage`1"/> class.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SummaryWizardPage`1.OnInit(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})">
            <summary>
            Called right after this page has been created.
            </summary>
            <remarks>Override this method to perform additional initialization.</remarks>
            <param name="site">The site.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SummaryWizardPage`1.CreateSummaryWizardPageControl">
            <summary>
            Creates the summary wizard page control.
            </summary>
            <remarks>This method is called only once during <see cref="M:Sdl.Desktop.Platform.Wizard.SummaryWizardPage`1.OnInit(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/>, right before the page is shown.
            Override it if you want to display a custom summary page control.</remarks>
            <returns>The summary wizard page control.</returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SummaryWizardPage`1.GetControl">
            <summary>
            Gets the control which holds the wizard page content.
            </summary>
            <returns>
            The control that holds the wizard page content.
            </returns>
            <remarks>This method is called before showing the page, but after <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Init(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/> has been called.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SummaryWizardPage`1.OnShow(System.Boolean,System.Boolean)">
            <summary>
            Called by the framework every time this page is shown.
            </summary>
            <param name="first">True if this is the first time the page is shown.</param>
            <param name="back">True if the page if the user is navigating backwards.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SummaryWizardPage`1.OnNext">
            <summary>
            Called when the user clicks Next on this page.
            </summary>
            <returns>
            True when the current page is valid and the wizard is ok to navigate to the next page. Return false
            to force the user to stay on the current page.
            </returns>
            <remarks>Before returning false, you should indicate why the wizard stays on this page, e.g. through an error message.</remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SummaryWizardPage`1.LoadSummary">
            <summary>
            Recreates and displays the wizard summary.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.SummaryWizardPage`1.Dispose">
            <summary>
            Disposes the control
            </summary>
        </member>
        <member name="F:Sdl.Desktop.Platform.Wizard.WinFormWizardPageHostControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.WinFormWizardPageHostControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.WinFormWizardPageHostControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.WizardPageAttribute">
            <summary>
            Extension attribute for adding wizard pages to wizards.
            </summary>
            <remarks>In order to add a a wizard page to a wizard, create a class that implements <see cref="T:Sdl.Desktop.Platform.Wizard.IWizardPage`1"/>
            with the correct TWizardData type required by the target wizard. Typically you should not implement <see cref="T:Sdl.Desktop.Platform.Wizard.IWizardPage`1"/>
            directly, but rather user one of the following abstract base classes:
                <list type="unordered">
                    <item><see cref="T:Sdl.Desktop.Platform.Wizard.AbstractWizardPage`1"/></item>
                    <item><see cref="T:Sdl.Desktop.Platform.Wizard.AbstractInternalWizardPage`1"/></item>
                    <item><see cref="T:Sdl.Desktop.Platform.Wizard.AbstractFinalWizardPage`1"/></item>
                </list>
            Then, mark the wizard page class with the <see cref="T:Sdl.Desktop.Platform.Wizard.WizardPageAttribute"/>. Set the <see cref="P:Sdl.Desktop.Platform.Wizard.WizardPageAttribute.TargetWizardId"/> to the id of
            the target wizard and use the <see cref="P:Sdl.Core.PluginFramework.Util.SortableExtensionAttribute.InsertBefore"/> and <see cref="P:Sdl.Core.PluginFramework.Util.SortableExtensionAttribute.InsertAfter"/> properties to specify
            where the page should appear relative to the other pages.
            </remarks>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.WizardPageAttribute.#ctor">
            <summary>
            constructor for XML serialization.
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.WizardPageAttribute.#ctor(System.String)">
            <summary>
            Constructor with required <paramref name="targetWizardId"/> parameter.
            </summary>
            <param name="targetWizardId">The id of the target wizard.</param>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.WizardPageAttribute.TargetWizardId">
            <summary>
            Gets or sets the id of the target wizard.
            </summary>
            <value>The id of the target wizard.</value>
        </member>
        <member name="T:Sdl.Desktop.Platform.Wizard.WizardPageReference`2">
            <summary>
            Default implementation of a wizard page reference.
            </summary>
            <remarks>Use this class to programmatically create wizard references and add them to a wizard.</remarks>
            <typeparam name="TWizardData">The type of the wizard data.</typeparam>
            <typeparam name="TWizardPage">The type of the wizard page.</typeparam>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.WizardPageReference`2.#ctor(System.String,System.String,System.String,System.Drawing.Icon,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sdl.Desktop.Platform.Wizard.WizardPageReference`2"/> class.
            </summary>
            <param name="id">A unique id for this wizard page.</param>
            <param name="name">The display name of the wizard page.</param>
            <param name="description">The description of the wizard page.</param>
            <param name="icon">The icon for the wizard page. This should be 48x48.</param>
            <param name="helpTopic">The id of the help topic associated with this wizard page.</param>        
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.WizardPageReference`2.Id">
            <summary>
            Gets the unique id of this wizard page.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.WizardPageReference`2.Name">
            <summary>
            Gets the display name of this wizard page.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.WizardPageReference`2.Description">
            <summary>
            Gets the description of this wizard page.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.WizardPageReference`2.Icon">
            <summary>
            Gets the icon of this wizard page. Can be null.
            </summary>
            <value></value>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.WizardPageReference`2.HelpTopic">
            <summary>
            Gets or sets the help topic associated with this wizard page.
            </summary>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.WizardPageReference`2.WizardPage">
            <summary>
            Returns the actual wizard page object.
            </summary>
            <value></value>
            <remarks>When getting this property for the first time, an instance of the wizard page object is created and
            the <see cref="M:Sdl.Desktop.Platform.Wizard.IWizardPage`1.Init(Sdl.Desktop.Platform.Wizard.IWizardPageSite{`0})"/> method is called to initialize the wizard page. Any subsequent
            queries return the same instance.</remarks>
        </member>
        <member name="P:Sdl.Desktop.Platform.Wizard.WizardPageReference`2.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
            <value>
            	<c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sdl.Desktop.Platform.Wizard.WizardPageReference`2.Dispose">
            <summary>
            Disposes the wizard page
            </summary>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableCollectionObject.GetDispatcher">
            <summary>
            returns a valid dispatcher if this is a UI thread (can be more than one UI thread so different dispatchers are possible); 
            null if not a UI thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.Add(System.Object)">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation / TryAdd / DoAdd instead
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.Insert(System.Int32,System.Object)">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation / TryInsert / DoInsert instead
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.Remove(System.Object)">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation / TryRemove / DoRemove instead
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.Remove(`0)">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation / TryRemove / DoRemove instead
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.Add(`0)">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation / TryAdd / DoAdd instead
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation / TryAddRange / DoAddRange instead
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.Clear">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation instead
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.Insert(System.Int32,`0)">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation / TryInsert / DoInsert instead
            </summary>
            <param name="index"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation instead
            </summary>
            <param name="index"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation / TryRemove / DoRemove instead
            </summary>
            <param name="value"></param>
            <param name="equalityComparer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation instead
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.RemoveAt(System.Int32)">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation / TryRemove / DoRemoveAt instead
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation instead
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation instead
            </summary>
            <param name="items"></param>
            <param name="equalityComparer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation instead
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="equalityComparer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.Desktop.Platform.WPFTools.Collections.ObservableImmutableList`1.SetItem(System.Int32,`0)">
            <summary>
            Warning: This is not a thread safe method, use DoOperation / TryOperation / TrySetItem / DoSetItem instead
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
