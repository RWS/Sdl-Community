<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="_ContainerColumn.UserAddedColumn" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAB
        AAAAAAAABAIEAEJaAABDXAAARF8AAEZgAABIYwAAS2cAAFFvAABScQAAVHMAAFV1AABXeAAAWHkAAFp8
        AABcfgAAX3gbAF2AAABhhAAAZ40AAGqSAABtlQAAb5kAAGmGGwBsihsAdZcbAG+DNgByhzsAdYo9AHmT
        NgB/mTYAepE9AH+YOwAE/gQAiag2AIeiPQCMqjsAjKo9AISChACmtIIAqbeCALLEggC0x4IAvcejAL7I
        owDCzqMAw8yqAMTOqgDH1KMAyNWjAMbQqgDI06oAydSqAMvYqgDM2KoAytKyAMzWsgDO2LIA0NuyAMTC
        xADX3sYA2N/GANjfyADa38wA2+LGANzkxgDa4cgA3eXIAN3jzADe5cwA4ejMAPj69gD9/v0AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAmSCYmJiYmJiYmJiYmJiYBAAAAAAAAAAAAAAAAAAAAACZIOzs7Ozs7Ozs7
        Ozs7JgEAAAAAAAAAAAAAAAAAAAAAJkg7Ozs7Ozs7Ozs7ITsmAQAAAAAAAAAAAAAAAAAAAAAmSDs7Ozs7
        Ozs7Ozs7OyYBAAAAAAAAAAAAAAAAAAAAACZIOzs7Ozs7Ozs7Ozs7JgEAAAAAAAAAAAAAAAAAAAAAJkg7
        Ozs7Ozs7Ozs7OzsmAQAAAAAAAAAAAAAAAAAAAAAmSDs7Ozs7Ozs7Ozs7OyYBAAAAAAAAAAAAAAAAAAAA
        ACZIOzs7Ozs7Ozs7Ozs7JgEAAAAAAAAAAAAAAAAAAAAAJkg7Ozs7Ozs7Ozs7OzsmAQAAAAAAAAAAAAAA
        AAAAAAAmSDs7Ozs7Ozs7Ozs7OyYBAAAAAAAAAAAAAAAAAAAAACZIOzs7Ozs7Ozs7Ozs7JgEAAAAAAAAA
        AAAAAAAAAAAAJkg7Ozs7Ozs7Ozs7OzsmAQAAAAAAAAAAAAAAAAAAAAAmSDs7Ozs7Ozs7Ozs7OyYBAAAA
        AAAAAAAAAAAAAAAAACZIOzs7Ozs7Ozs7Ozs7JgAAAAAAAAAAAAANDAsLCx8oLCwoHAYGBQMDSEhISEgm
        AQAAAAAAAAAAAA0NDR1ESEhISEhIPxoGAwMmJiYmJiYAAAAAAAAAAAAADREgLTIyPkdHPi8vKxoGAzs7
        Ozs7JgEAAAAAAAAAAAARHi0NFzhISEhIOBAGLxoFOzs7OzsmAAAAAAAAAAAAABJENBhEMjIyMi8vPxAv
        PwY7Ozs7OyYBAAAAAAAAAAAAI0g0OTINDAsLCwgvOC9IHDs7Ozs7JgAAAAAAAAAAAAApSEFINA0NDQsL
        CC9IPEgnSEhISEgmAQAAAAAAAAAAADBIR0g0EQ0NDQsLL0hHSC0mJiYmJiYAAAAAAAAAAAAAMUhHSDQR
        EQ0NDQsySEdIKzs7Ozs7JgEAAAAAAAAAAAApSEFINBIREQ0NDTJIPkgoOzs7OzsmAAAAAAAAAAAAACVI
        Njo0EhEREQ0NNDgySB87Ozs7OyYBAAAAAAAAAAAAFEY2GUQ0NjQ0NDREFzJECzs7Ozs7JgAAAAAAAAAA
        AAAUIjETGTpISEhIORgNLR0LOzs7OzsmAQAAAAAAAAAAABQUJTE2NkFHR0E0NC0gCwtISEhISEgAAAAA
        AAAAAAAAFhQUIkZISEhISEhEHg0NDSYmJiYmJiYAAAAAAAAAAAAWFhQUFCUpMTEpIxIREQ0NAAAAAAAA
        AAAAAAAAAAAAAP/////+AAH//gAB//4AAf/+AAH//gAB//4AAf/+AAH//gAB//4AAf/+AAH//gAB//4A
        Af/+AAH//gAB//4AAf8AAAH/AAAB/wAAAf8AAAH/AAAB/wAAAf8AAAH/AAAB/wAAAf8AAAH/AAAB/wAA
        Af8AAAH/AAAB/wAAAf8AAP//
</value>
  </data>
</root>