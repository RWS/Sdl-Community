<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sdl.FileTypeSupport.Framework.Core</name>
    </assembly>
    <members>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentHandler">
            <summary>
            Abstract base class for convenient implementation of bilingual
            content handlers. Provides the default implementations for the
            content handler methods; you just need to override the ones you are interested in.
            </summary>
            <remarks>
            <para>
            Derives from <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualFileTypeComponent"/> to provide
            easy access to the message reporter and factory.
            </para>
            <para>
            Implementations are not required to derive from this class. It is designed
            as a convenient default implementation to be used when appropriate.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentHandler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentHandler.Initialize(Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties)">
            <summary>
            Default implementation, does not perform any task.
            </summary>
            <param name="documentInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentHandler.Complete">
            <summary>
            Default implementation, does not perform any task.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentHandler.SetFileProperties(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)">
            <summary>
            Default implementation, does not perform any task.
            </summary>
            <param name="fileInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentHandler.FileComplete">
            <summary>
            Default implementation, does not perform any task.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentHandler.ProcessParagraphUnit(Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit)">
            <summary>
            Default implementation, does not perform any task.
            </summary>
            <param name="paragraphUnit"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor">
            <summary>
            Abstract base class for convenient implementation of bilingual
            content processors. Provides the default implementations for the
            content processor methods that call the corresponding methods
            on the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.Output"/>. You just need to override the ones you are interested in,
            and call the base class to output content.
            </summary>
            <remarks>
            <para>
            Implementations are not required to derive from this class. It is designed
            as a convenient default implementation to be used when appropriate.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.#ctor">
            <summary>
            Default constructor - sets Output to <c>null</c>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.Output">
            <summary>
            Default implementation is an accessor to a member
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.Initialize(Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties)">
            <summary>
            Calls the corresponding method on the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.SetFileProperties(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)">
            <summary>
            Calls the corresponding method on the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.ProcessParagraphUnit(Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit)">
            <summary>
            Calls the corresponding method on the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.FileComplete">
            <summary>
            Calls the corresponding method on the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.Complete">
            <summary>
            Calls the corresponding method on the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualFileTypeComponent">
            <summary>
            Convenient base class from which bilingual file type components can be built.
            Implements the setters and getters for the bilingual component initialization.
            For convenience, implements the <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentMessageReporter"/> interface by forwarding
            all calls to the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualFileTypeComponent.MessageReporter"/> (if set).
            </summary>
            <remarks>
            <para>
            Implementations are not required to derive from this class. It is designed
            as a convenient default implementation to be used when appropriate.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualFileTypeComponent.#ctor">
            <summary>
            Protected constructor that is used by derived classes
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualFileTypeComponent.ItemFactory">
            <summary>
            Default implementation of the ItemFactory property
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualFileTypeComponent.PropertiesFactory">
            <summary>
            Convenience accessor to the properties factory used by the 
            item factory.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualFileTypeComponent.MessageReporter">
            <summary>
            Accessor for the message reporter
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualFileTypeComponent.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation,Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation)">
            <summary>
            Calls the corresponding method on the message reporter (if set).
            </summary>
            <param name="source"></param>
            <param name="origin">The description of the action/component that this message originated from.</param>
            <param name="level"></param>
            <param name="message"></param>
            <param name="fromLocation"></param>
            <param name="uptoLocation"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualFileTypeComponent.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation,Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation,Sdl.FileTypeSupport.Framework.IntegrationApi.ExtendedMessageEventData)">
            <summary>
            Calls the corresponding method on the message reporter (if set).
            </summary>
            <param name="source"></param>
            <param name="origin">The description of the action/component that this message originated from.</param>
            <param name="level"></param>
            <param name="message"></param>
            <param name="fromLocation"></param>
            <param name="uptoLocation"></param>
            <param name="extendedData"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualFileTypeComponent.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,System.String)">
            <summary>
            Calls the corresponding method on the message reporter (if set).
            </summary>
            <param name="source"></param>
            <param name="origin">The description of the action/component from which this message originates.</param>
            <param name="level"></param>
            <param name="message"></param>
            <param name="locationDescription"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualFileTypeComponent.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.ExtendedMessageEventData)">
            <summary>
            Calls the corresponding method on the message reporter (if set).
            </summary>
            <param name="source"></param>
            <param name="origin">The description of the action/component from which this message originates.</param>
            <param name="level"></param>
            <param name="message"></param>
            <param name="locationDescription"></param>
            <param name="extendedData"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualParser">
            <summary>
            Base class that can be used to implement bilingual parsers.
            <para>Takes care of the basics involved in implementing the
            <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser"/> and <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent"/> interfaces.</para>
            </summary>
            <remarks>
            <para>
            Implementations are not required to derive from this class. It is designed
            as a convenient default implementation to be used when appropriate.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualParser.DocumentProperties">
            <summary>
            Default implementation; stores the value in a data member.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualParser.Output">
            <summary>
            Default implementation; stores the value in a data member.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualParser.FileRestriction">
            <summary>
            Default implementation; sotres the value in a data member.
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualParser.Progress">
            <summary>
            Default implementation of this event. Use <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualParser.OnProgress(System.Byte)"/> to raise the event.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualParser.ParseNext">
            <summary>
            The framework calls this method to parse a chunk of content.
            It must be overridden in derived classes to provide the actual parser implementation.
            </summary>
            <returns><c>False</c> when there is no more content to be processed, otherwise <c>true</c>.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualParser.Dispose">
            <summary>
            Implements IDisposable. Just calls Dispose saying that this is an explicit disposal and 
            tells the GC not to call the Finalizer.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualParser.Dispose(System.Boolean)">
            <summary>
            Last change for the Parser to dispose manage and unmanged objects.
            It can be overriden by subclases.
            </summary>
            <param name="disposing">indicates if the dispose is explicit or implicit (from GC)</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualParser.Finalize">
            <summary>
            The distructor just calls Dispose with false parameter specifying this is a cakl from GC.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.AbstractBilingualParser.OnProgress(System.Byte)">
            <summary>
            Raises the Progress event.
            </summary>
            <param name="percent"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.BilingualContentMessageReporterProxy">
            <summary>
            BilingualContentMessageReporterProxy class is responsible for reporting messages using a message reporter.
            </summary>
            <remarks>
            Messages can be reported with extended data and without extended data. To report a message with extended data requires
            a message reporter that implements IBilingualContentMessageReporterWithExtendedData interface. This proxy implements
            both IBilingualContentMessageReporter and IBilingualContentMessageReporterWithExtendedData interfaces and safely calls
            the appropriate methods on the message reporter.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.BilingualContentMessageReporterProxy.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentMessageReporter)">
            <summary>
            Constructor that takes the given message reporter.
            </summary>
            <param name="messageReporter">message reporter</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.BilingualContentMessageReporterProxy.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,System.String)">
            <summary>
            Reports the message with the given message arguments.
            </summary>
            <param name="source">source</param>
            <param name="origin">origin</param>
            <param name="level">level</param>
            <param name="message">message</param>
            <param name="locationDescription">location description</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.BilingualContentMessageReporterProxy.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.ExtendedMessageEventData)">
            <summary>
            Reports the message with the given message arguments and extended data.
            </summary>
            <remarks>
            If the messager reporter does not implement IBasicMessageReporterWithExtendedData then 
            the extended data will not be passed to the message reporter.
            </remarks>
            <param name="source">source</param>
            <param name="origin">origin</param>
            <param name="level">level</param>
            <param name="message">message</param>
            <param name="locationDescription">location description</param>
            <param name="extendedData">extended data</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.BilingualContentMessageReporterProxy.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation,Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation)">
            <summary>
            Reports the message with the given message arguments.
            </summary>
            <param name="source">source</param>
            <param name="origin">origin</param>
            <param name="level">level</param>
            <param name="message">message</param>
            <param name="fromLocation">from location</param>
            <param name="uptoLocation">upto location</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.BilingualContentMessageReporterProxy.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation,Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation,Sdl.FileTypeSupport.Framework.IntegrationApi.ExtendedMessageEventData)">
            <summary>
            Reports the message with the given message arguments and extended data.
            </summary>
            <remarks>
            If the messager reporter does not implement IBasicMessageReporterWithExtendedData then 
            the extended data will not be passed to the message reporter.
            </remarks>
            <param name="source">source</param>
            <param name="origin">origin</param>
            <param name="level">level</param>
            <param name="message">message</param>
            <param name="fromLocation">from location</param>
            <param name="uptoLocation">upto location</param>
            <param name="extendedData">extended data</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.DependencyFileLocator">
            <summary>
            Used by bilingual document parsers. Helps locate missing dependency files.
            The implementation should try to locate the file based on the provided information.
            If successful, it returns the actual file path. The implementation may alternatively 
            throw an exception to abort parsing, or return an empty or null string if the file 
            could not be located, but parsing should attempt to proceed anyway.
            </summary>
            <param name="missingFileInfo">Everything that is known about the missing dependency file. 
            The implementation is not expected to change any of these properties, but is not prevented
            from doing so.</param>
            <returns>Full path to the located dependency file.</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentMessageReporterWithExtendedData">
            <summary>
            IBilingualContentMessageReporterWithExtendedData interface is almost exactly the same as the IBilingualContentMessageReporter
            except that the ReportMessage method includes an extended data parameter.
            </summary>
            <remarks>
            This interface has been included to allow messages to be reported with extended data without breaking backwards compatibility
            with the released API.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentMessageReporterWithExtendedData.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation,Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation,Sdl.FileTypeSupport.Framework.IntegrationApi.ExtendedMessageEventData)">
            <summary>
            Reports the message with the given message arguments.
            </summary>
            <param name="source">source</param>
            <param name="origin">origin</param>
            <param name="level">level</param>
            <param name="message">message</param>
            <param name="fromLocation">from location</param>
            <param name="uptoLocation">upto location</param>
            <param name="extendedData">extended data</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor">
            <summary>
            Chainable content handler for streaming the processing of bilingual
            content. Input is received on the <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler"/> implementation
            and the corresponding output is generated by calls on the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor.Output"/>.
            </summary>
            <remarks>
            <para>
            Similar to a native content processor, i.e.
            the component may buffer content and 'decides' what to output when.
            </para>
            <para>
            This allows inserting of new paragraph units into the content stream, as well as removal
            or re-ordering of existing paragraph units. 
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor.Output">
            <summary>
            The interface on which this processor generates output. Typically set by
            the framework during initialization.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties">
            <summary>
            Output properties of a bilingual document file; communicated to file type components
            through the IBilingualDocumentOutputPropertiesAware interface during generation with
            a <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentFileWriter"/>.
            </summary>
            <remarks>
            <para>
            This includes the path to the output file that will be created. This may be changed
            by bilingual content processors, or by the bilingual document file writers.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.OutputFilePath">
            <summary>
            Full path to the bilingual document file
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.LinkedDependencyFiles">
            <summary>
            Updated by a bilingual file writer during the writing process to indicate which dependency files 
            were not embedded in the output file, and must therefore be explicitly made
            available by the host application at the expected locations (which 
            can be absolute paths or paths relative to the original file) when the 
            output file is to be parsed.
            </summary>
            <remarks>
            <para>
            This property should only be set by the bilingual writer; the host
            application should not modify this collection. 
            </para>
            <para>
            When the bilingual output file is opened, the dependency files in this
            list must be located at the same paths (either absolute or relative to
            the output file) for them to be found by the parser. This is the responsibility
            of the host application.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputPropertiesAware">
            <summary>
            Implement this interface to retrieve information on the
            bilingual document output (e.g. SDL XLIFF), and have the ability
            to suggest a file name when a bilingual document is about to be created.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputPropertiesAware.GetProposedFileInfo(Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties,Sdl.FileTypeSupport.Framework.NativeApi.IOutputFileInfo)">
            <summary>
            Called by the framework to collect input for the name of the intermediate
            bilingual document file to be generated.
            </summary>
            <param name="documentInfo"></param>
            <param name="proposedFileInfo">Proposed filename and other output file properties. 
            The implementation may modify this to propose different output properties.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputPropertiesAware.SetOutputProperties(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties)">
            <summary>
            Called by the framework to communicate the output properties before
            processing starts.
            </summary>
            <param name="outputProperties"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser">
            <summary>
            Parser for intermediate bilingual document formats such as SDL XLIFF,
            which are used for persistence of the entire bilingual object model. 
            </summary>
            <remarks>
            <para>
            This interface should not be implemented by parsers that handle content
            from a single native input file, even if that content is bilingual (like TTX or ITD).
            Such parsers should just implement <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser"/>.
            </para>
            </remarks>
            <seealso cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentFileWriter"/>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.DependencyFileLocator">
            <summary>
            If specified, this delegate can be used to locate dependency files that are linked, but missing.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.FileRestriction">
            <summary>
            This property is set by the framework during initialization.
            The delegate will be invoked to determine which files in a multi-file
            document should generate output.
            </summary>
            <remarks>
            <para>
            The bilingual parser is not required to test this delegate for each
            file it processes. The framework will invoke the delegate to block
            content from files from being propagated through the framework.
            The delegate is provided through this property to give the 
            bilingual parser implementation a chance to optimize its processing
            by directly skipping files who's content will anyway not be propagated
            through the framework.
            </para>
            <para>
            If this property is <c>null</c> no restrictions apply and all files
            will be processed.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter">
            <summary>
            Implemented by components that directly write bilingual output without
            native content processing. The input to the writer is provided by calls to
            the <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler"/> implementation.
            </summary>
            <remarks>
            <para>
            There are two types of bilingual writers: writers for 
            document files that fully serialize the content of the bilingual
            object model and that can write documents consisting of multiple files (e.g. SDL XLIFF), and
            bilingual writers for single files that contain bilingual content, e.g. 
            3rd party XLIFF files, TTX files, ITD files, etc.
            </para>
            <para>
            Writers for full document files implement <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter"/>, which
            is derived from this interface.
            </para>
            <para>
            Writers for single bilingual files implement this interface.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.ISerializableMarkupDataContainer">
            <summary>
            Intended for binary serialization of markup data content.
            The implementation of this interface is guaranteed to be marked with the [Serializable] attribute,
            and is binary serializable.
            </summary>
            <remarks>
            <para>
            Used for native Windows clipboard support. The document and file properties are
            serialized too, so that it is possible to determine whether the content originates
            from the same file and/or document when pasting.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISerializableMarkupDataContainer.DocProperties">
            <summary>
            Document properties for the document that the markup data originates from
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISerializableMarkupDataContainer.FileProperties">
            <summary>
            File properties for the file that the markup data originates from
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType">
            <summary>
            Type of revision/editing operation; used in <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties.RevisionType"/>.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType.Insert">
            <summary>
            Content that has been inserted
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType.Delete">
            <summary>
            Content that has been deleted
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType.FeedbackComment">
            <summary>
            Content that has feedback associated with it
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType.FeedbackAdded">
            <summary>
            Content which has been added for feedback
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType.FeedbackDeleted">
            <summary>
            Content which has been deleted for feedback
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType.Unchanged">
            <summary>
            Content that has not been changed
            </summary>
            <remarks>
            <para>
            This is equivalent to not annotating content with a revision marker.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractDataContent">
            <summary>
            Base interface for markup data items that represent actual
            "physical" segment content (i.e. tags and text as opposed to
            markers).
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag">
            <summary>
            Base interface for all tags that appear
            inside the source or target content of a paragraph unit.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.SubSegments">
            <summary>
            Information on any localizable content inside this tag
            </summary>
            <remarks>
            <para>
            Call <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.AddSubSegmentReference(Sdl.FileTypeSupport.Framework.BilingualApi.ISubSegmentReference)"/> or <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.RemoveSubSegmentReference(Sdl.FileTypeSupport.Framework.BilingualApi.ISubSegmentReference)"/>
            to add or remove localizable content.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.TagProperties">
            <summary>
            Common properties of tag information as determined by the native file type processors
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.AddSubSegmentReference(Sdl.FileTypeSupport.Framework.BilingualApi.ISubSegmentReference)">
            <summary>
            Appends a sub-segment reference to the list of sub-segments.
            </summary>
            <remarks>
            The <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISubSegmentReference.Properties"/> of the added sub-segment reference should correspond to an 
            existing sub-segment in the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.TagProperties"/>.
            </remarks>
            <param name="subSegmentReference"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.AddSubSegmentReferences(System.Collections.Generic.IEnumerable{Sdl.FileTypeSupport.Framework.BilingualApi.ISubSegmentReference})">
            <summary>
            Appends a set of sub-segment references.
            </summary>
            <remarks>
            Each sub-segment reference should correspond to a sub-segment in the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.TagProperties"/>.
            </remarks>
            <param name="subSegmentReferences"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.RemoveSubSegmentReference(Sdl.FileTypeSupport.Framework.BilingualApi.ISubSegmentReference)">
            <summary>
            Removes the specified sub-segment reference.
            </summary>
            <remarks>
            <para>
            If the <paramref name="subSegmentReference"/> is not part of the collection,
            nothing happens.
            </para>
            </remarks>
            <param name="subSegmentReference"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.ClearSubSegmentReferences">
            <summary>
            Removes all sub-segment references from the tag.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.HasSubSegmentReferences">
            <summary>
            <c>True</c> if there is one or more <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.SubSegments"/> for the tag.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentMessageReporter">
            <summary>
            Means for bilingual content processing components to communicate
            non-fatal issues with associated locations to the framework.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentMessageReporter.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation,Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation)">
            <summary>
            Used by bilingual content processors to report a non-critical issue with an associated range or location
            in the bilingual object model.
            </summary>
            <param name="source">The component the message originates from. Components typically pass <c>this</c> as parameter.</param>
            <param name="origin">The description of the action/component from which this message originated.</param>
            <param name="level">Severity of the message.</param>
            <param name="message">The actual message text.</param>
            <param name="fromLocation">Start of the content range that the message refers to.</param>
            <param name="uptoLocation">The end of the content range that the message refers to.
            This parameter is optional; it may be <c>null</c> or the same object as 
            the one from the location, in which case the message is interpreted as referring to a single location rather
            than a range.</param>
            <remarks>
            <para>
            The location objects allow a bilingual content processor to report locations inside the bilingual
            content model (without requiring modifications to the object model).
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler">
            <summary>
            This interface is implemented by content processors
            that work on the bilingual content model, for example <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor"/>
            and <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter"/>.
            </summary>
            <remarks>
            <para>
            To facilitate processing in a streaming manner without requiring
            the entire document object in memory at any time the implementation
            will be fed ParagraphUnits one by one through calls 
            to <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler.ProcessParagraphUnit(Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit)"/>.
            </para>
            <para>
            Document and file properties are provided from the framework by calling 
            <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties"/> and <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties"/> before processing
            content in the document / file.
            </para>
            <para>
            If the component implements the <see cref="T:System.IDisposable"/> interface, the Dispose() method
            will be called by the framework for clean-up after parsing is finished.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler.Initialize(Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties)">
            <summary>
            The framework will call this method to provide the implementation
            with a reference to the document properties for the document being processed.
            
            This method will always be called, and always before any other calls are made on this interface.
            
            This or other content processor implementations may modify the document properties 
            as part of the document processing. If you need to access the final version of the 
            document properties, you should do so through the <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler.Complete"/> method implementation.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler.Complete">
            <summary>
            Called by the framework when all content has been processed.
            
            At this point it is safe to assume that the document properties will not change any further.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler.SetFileProperties(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)">
            <summary>
            The framework will call this method to provide the implementation with
            a reference to the properties for each file in the document
            before the ParagraphUnits of the file are processed.
            
            This or other content processor implementations may modify the properties as part of the file processing.
            If you need to access the final version of the file properties, you should do so through the <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler.FileComplete"/> method
            implementation.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler.FileComplete">
            <summary>
            Called by the framework after all trans units in a file have been processed by all components.
            
            At this point it is safe to assume that the file properties will not change any further.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler.ProcessParagraphUnit(Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit)">
            <summary>
            The framework will call this method for each ParagraphUnit in the file.
            </summary>
            <param name="paragraphUnit"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentFileWriter">
            <summary>
            Bilingual writer that can write an entire bilingual
            document (potentially consisting of content from
            multiple native files) to a single output file.
            </summary>
            <remarks>
            <para>
            This interface is implemented by writers for intermediate bilingual file formats such as SDL XLIFF.
            </para>
            <para>
            Writers that implement this interface will be treated differently from regular
            bilingual writers by the framework. Normal bilingual writers are designed to write output that originates
            from a single input file (even if that file is in bilingual format such as TTX or ITD), while bilingual
            document writers are designed to write output that can originate form multiple input files.
            </para>
            </remarks>
            <seealso cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser"/>
            <seealso cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter"/>
            <seealso cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter"/>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent">
            <summary>
            Bilingual components that need access to the document item factory
            should implement this interface.
            
            The <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent.ItemFactory"/> property will be set by the framework before
            parsing begins.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent.ItemFactory">
            <summary>
            The framework will set this property as part of initialization.
            
            Bilingual components should use this factory to create any items
            that are inserted into the bilingual content model.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent.MessageReporter">
            <summary>
            The framework will set this property as part of initialization.
            
            Bilingual components may use this to report any issues encountered 
            during processing.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser">
            <summary>
            Interface implemented by components that can read
            bilingual data from an external source.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent"/> implementation is used to get hold 
            of the item and property object factories needed to build the 
            bilingual content model objects that are required to generate output from the parser.
            </para>
            <para>
            If a bilingual parser already has existing instances of the factories, these will be
            used by all the framework components.
            </para>
            <para>
            Parsers for full intermediate bilingual file formats such as SDL XLIFF should implement
            <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser.DocumentProperties">
            <summary>
            This property is set by the framework before parsing commences.
            The instance provided through this property should be initialized
            and used by the bilingual parser for the Initialize() call on the
            bilingual content processor <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser.Output"/> property.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser.Output">
            <summary>
            This property is set by the framework during initialization of the
            bilingual parser. The parser should build bilingual content model objects,
            and call methods on this interface as appropriate to generate the output.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualToNativeConverter">
            <summary>
            Interface implemented by components that can convert
            bilingual content received from calls on the <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler"/> interface
            to (source or target language) the native content output on the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualToNativeConverter.Output"/> interface.
            
            Note that it is up to the implementation to 'decide' if the source or the target 
            (or both) in the bilingual content should be processed.
            </summary>
            <remarks>
            If the implementation needs access to factories in order to create property objects, etc., 
            it should implement the <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent"/> interface.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualToNativeConverter.Output">
            <summary>
            This property is set by the framework during initialization.
            The converter implementation should call the methods on this
            interface to generate output.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualToNativeConverter.Flush">
            <summary>
            Used to flush the buffer
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualVerifier">
            <summary>
            Implemented by components that can verify bilingual document
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter">
            <summary>
            Implemented by components that can write bilingual data for multiple
            files in a single document to external storage (e.g. XLIFF files).
            </summary>
            <remarks>
            <para>
            The input will be received on the <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler"/> interface,
            and the implementation should let all the content processors defined in the 
            bilingual processor container act on the input before writing it.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation">
            <summary>
            Reference to a location inside the bilingual content model that
            may be inside a text node
            </summary>
            <remarks>
            <para>
            Consists of a <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.Location"/> and a text
            offset (0-based). The text offset is used only when the location references
            a text item.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.#ctor">
            <summary>
            Constructs an uninitialized location object.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData)">
            <summary>
            Constructs from a markup data item; the location will reference the
            position just in front of the item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IText,System.Int32)">
            <summary>
            Constructs from a markup data text item; the location will reference the
            specified character offset into the text.
            </summary>
            <param name="textItem"></param>
            <param name="offsetIntoText"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location,System.Int32)">
            <summary>
            Initializes using the specified location and text offset.
            </summary>
            <param name="location"></param>
            <param name="textOffset"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation)">
            <summary>
            Protected constructor used in cloning
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.ToString">
            <summary>
            Should be used for debugging purposes only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.Equals(System.Object)">
            <summary>
            Objects are considered equal if they refer to the 
            same location and text offset.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.GetHashCode">
            <summary>
            Hash code is computed by combining the hashes of the location and the text offset.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.Location">
            <summary>
            The location of the item referred to. If this is an <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IText"/> the
            <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.TextOffset"/> property determines the location inside that text.
            The root of the location should be a <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph"/> container.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.TextOffset">
            <summary>
            When the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.Location"/> property refers to an <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IText"/> item, this
            property indicates the 0-based character index inside the text that the text position
            refers to. This property should be a valid 0-based index into the text. It should be
            less than or equal to the number of characters in the text.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.IsValid">
            <summary>
            <c>True</c> if the text location is a valid location
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.TextLocation.Clone">
            <summary>
            Returns a deep clone of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.ICommentMarker">
            <summary>
            Comments associated with specific content inside markup data
            </summary>
            <remarks>
            <para>
            The comments refer to the content inside the container
            </para>
            <para>
            It is possible to attach the same comments to multiple locations by creating
            multiple comment markers that reference the same <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.ICommentMarker.Comments"/> instance.
            (Just call <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateCommentMarker(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)"/>, and pass in the same properties instance.)
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ICommentMarker.Comments">
            <summary>
            The actual comments for the content that this container spans
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory">
            <summary>
            Factory for items that can be inserted into the bilingual content model.
            
            Bilingual file type components typically get an instance of this factory
            through their implementation of the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent.ItemFactory"/> property, which
            is set by the framework during component initialization.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.PropertiesFactory">
            <summary>
            May hold a reference to the properties factory that is used together
            with the document item factory.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateDocumentProperties">
            <summary>
            Creates an empty document properties instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateFileProperties">
            <summary>
            Creates an empty file properties instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateStructureTag(Sdl.FileTypeSupport.Framework.NativeApi.IStructureTagProperties)">
            <summary>
            Creates a structure tag instance.
            </summary>
            <param name="tagInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateParagraphUnit(Sdl.FileTypeSupport.Framework.NativeApi.LockTypeFlags)">
            <summary>
            Creates a new localizable ParagraphUnit with empty source and target content.
            </summary>
            <param name="flags">This indicates which LockTypeFlags are to be used for this ParagraphUnit</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateText(Sdl.FileTypeSupport.Framework.NativeApi.ITextProperties)">
            <summary>
            Creates a text instance.
            </summary>
            <param name="textInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateTagPair(Sdl.FileTypeSupport.Framework.NativeApi.IStartTagProperties,Sdl.FileTypeSupport.Framework.NativeApi.IEndTagProperties)">
            <summary>
            Creates a tag pair instance.
            </summary>
            <param name="startTagInfo"></param>
            <param name="endTagInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreatePlaceholderTag(Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties)">
            <summary>
            Creates a placeholder tag instance.
            </summary>
            <param name="tagInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateSubSegmentReference(Sdl.FileTypeSupport.Framework.NativeApi.ISubSegmentProperties,Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId)">
            <summary>
            Creates a sub-segment reference instance.
            </summary>
            <param name="subSegment"></param>
            <param name="paragraphUnitId"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateLocationMarker">
            <summary>
            Creates a new location marker that is initialized with a unique <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateOtherMarker">
            <summary>
            Creates an instance of a generic marker type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateCommentMarker(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)">
            <summary>
            Creates a new comment associated with a comments collection.
            This is somewhat inconsistent with the other factory methods, because there is no 
            separate comment properties object for wrapping the collection.
            </summary>
            <param name="comments"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateSegmentPairProperties">
            <summary>
            Creates a new segment pair properties object that can be used to create segments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateTranslationOrigin">
            <summary>
            Creates a new translation origin object that can be assigned to segment pair properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateSegment(Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties)">
            <summary>
            Creates a new segment object and assigns the properties to it.
            </summary>
            <remarks>
            <para>
            Uses the same properties object when creating the corresponding source and target segments.
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateSegmentPair(Sdl.FileTypeSupport.Framework.BilingualApi.ISegment,Sdl.FileTypeSupport.Framework.BilingualApi.ISegment)">
            <summary>
            Creates a segment pair object that can be used as a convenience when working with source and target segments in a <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit"/>.
            </summary>
            <param name="source">The source segment of a paragraph unit. Must not be <c>null</c>.</param>
            <param name="target">The target segment corresponding to the source segment. May be <c>null</c> if no target segment exists in the ParagraphUnit yet.</param>
            <returns></returns>
            <remarks>The source and target segment passed in must be in the same paragraph unit.</remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateLockedContent(Sdl.FileTypeSupport.Framework.NativeApi.ILockedContentProperties)">
            <summary>
            Creates a locked content object, which represents locked content.
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateRevisionProperties(Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType)">
            <summary>
            Creates a revision properties object, which represents information associated with a revision marker.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateRevision(Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties)">
            <summary>
            Create a revision marker that can be used to indicate that a part of the content was changed
            through adding or deleting.
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateFeedback(Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties)">
            <summary>
            Create a feedback marker that can be used to indicate that a part of teh content has user
            feedback associated with it.
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateSerializableContainer">
            <summary>
            Creates an empty container for markup data that is guaranteed to be serializable.
            </summary>
            <remarks>
            <para>
            Used to save data to the Windows clipboard during a copy operation.
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.DeserialzeContainer(System.Runtime.Serialization.IFormatter,System.IO.Stream)">
            <summary>
            De-serialize the stream into a markup data container of the same type 
            returned from <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentItemFactory.CreateSerializableContainer"/>.
            </summary>
            <remarks>
            <para>
            Used to parse data from the Windows clipboard during a paste operation.
            </para>
            </remarks>
            <param name="formatter">Formatter to use for de-serialization</param>
            <param name="serializationStream">Stream that contains the data to de-serialize from</param>
            <returns><c>Null</c>, if the stream cannot be de-serialized to the expected object type</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties">
            <summary>
            Properties that are common to all files in a bilingual document
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties.SourceLanguage">
            <summary>
            The source language used by any files in this document.
            All files in a document must use the same source language.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties.TargetLanguage">
            <summary>
            The target language (if any) used by files in this document.
            All files in a document must use the same target language,
            however, for files that have not yet been localized the 
            target language may not yet apply.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties.SourceCount">
            <summary>
            Total word/character count for the source language content of this document (if set)
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties.Repetitions">
            <summary>
            Table of segments with the same source language content that occur
            more than one time in the document
            </summary>
            <remarks>
            <para>
            This property is not set by the framework itself. It is up to implementations
            to initialize and use it as appropriate.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties.LastSavedAsPath">
            <summary>
            (optional) Full path to a file the document was last saved as
            </summary>
            <remarks>
            <para>
            This property is meant to be available as a hint. It is not
            guaranteed to be kept up-to-date, and it may be empty.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties.LastOpenedAsPath">
            <summary>
            (optional) Full path to a file from which the document was last opened
            </summary>
            <remarks>
            <para>
            This property is meant to be available as a hint. It is not
            guaranteed to be kept up-to-date, and it may be empty.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties">
            <summary>
            Information on an original file in a document.
            
            A document can consist of multiple files that have been merged together.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties.FileConversionProperties">
            <summary>
            The file properties that are embedded within the bilingual document
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties.Comments">
            <summary>
            Notes/comments that are relevant to the file (as opposed to for
            individual ParagraphUnits)
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties.IsStartOfFileSection">
            <summary>
            Determines whether this FileProperties represents the start file section of a sub-content file with multiple sections
            If this is a non-sub content file, will always return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties.IsEndOfFileSection">
            <summary>
            Determines whether this FileProperties represents the end file section of a sub-content file with multiple sections
            If this is a non-sub content file, will always return true.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.ILocationMarker">
            <summary>
            A location marker represents a persistent location in the bilingual content.
            It is often generated from <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.LocationMark(Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)"/> calls
            with associated native message reporter calls from native parsers, and content 
            processors used during extraction. Location markers can also be used as general bookmarks.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ILocationMarker.MarkerId">
            <summary>
            The unique identifier for this location marker.
            
            Note that it may happen that content gets duplicated, e.g. from source to target
            in a paragraph unit, and that location markers in that case also get duplicated.
            Therefore, it is not possible to guarantee that location marker ids are unique throughout
            the document, but at least, in such cases, the two locations should be closely related.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.ILockedContainer">
            <summary>
            Container for items in a <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.ILockedContent"/>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ILockedContainer.LockedContent">
            <summary>
            The parent ILockedContent to which this container belongs
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.ILockedContent">
            <summary>
            Represents a collection of markup data items that has
            been locked in order to indicate that they should not be changed
            during localization.
            </summary>
            <remarks>
            <para>
            The locked content item was explicitly NOT made a markup data container
            in order to avoid accidental access to the locked items when 
            iterating over the tree structure. If required, the locked content can 
            be accessed through the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.ILockedContent.Content"/> property, which 
            is a markup data container.
            </para>
            <para>
            Locked content can be nested, i.e. there can be other locked content
            items inside the locked container. The outermost locked
            content properties always take precedence.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ILockedContent.Content">
            <summary>
            Provides access to the items that have been locked.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ILockedContent.Properties">
            <summary>
            Information on the lock
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarker">
            <summary>
            Base interface for all markup that does not directly 
            represent content in the native files (as opposed to <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractDataContent"/>).
            </summary>
            <remarks>
            Markers that implement <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer"/> can contain other 
            markup data, some of which are likely to be <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractDataContent"/> objects.
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData">
            <summary>
            Base interface for all tagged text content with markup that can appear
            inside the source or target in a localizable paragraph unit.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData.AcceptVisitor(Sdl.FileTypeSupport.Framework.BilingualApi.IMarkupDataVisitor)">
            <summary>
            Part of the visitor pattern implementation for markup data.
            
            This method is overridden in each leaf implementation. The implementation
            should call the <c>Visit...</c> method on the visitor corresponding to their object
            type, passing themselves (i.e. <c>this</c>) as the parameter.
            
            Objects that contain other objects (e.g. implementations of <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.ISegment"/> or
            <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IOtherMarker"/>) should NOT apply the visitor to their content items.
            It must be left to the visitor implementation to 'decide' whether the visitor 'wants'
            to visit the sub-items of a node.
            </summary>
            <example>
            The <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.ILocationMarker"/> implementation of this interface looks as follows:
            <code>
            void AcceptVisitor(IMarkupDataVisitor visitor)
            {
              visitor.VisitLocationMarker(this);
            }
            </code>
            </example>
            <param name="visitor"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData.Parent">
            <summary>
            When this item is inside a markup data container, this property
            provides access to the parent container.
            </summary>
            <remarks>
            This property is automatically set when the item is inserted into
            or removed from a container. API users should never need to set this
            property.
            <para>Attempting to set this property to an invalid value (i.e. a container
            that does not contain this item, or setting it to null when the item
            is part of an existing collection) will cause an exception.</para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData.IndexInParent">
            <summary>
            The index of this item in its parent container (if any).
            </summary>
            <remarks>
            <para>
            This is equivalent to calling <code>item.Parent.IndexOf(item)</code>.
            </para>
            <para>
            If this item has no parent this property, -1 is returned.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData.ParentParagraph">
            <summary>
            Convenient accessor to the source or target paragraph container that the 
            item appears in.
            </summary>
            <remarks>
            <para>
            This property is <c>null</c> if the item does not appear (directly or nested) 
            inside a <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData.RemoveFromParent">
            <summary>
            Removes this node from its parent container (if any).
            </summary>
            <remarks>
            <para>
            If the item is not inside a parent container, nothing will happen.
            </para>
            <para>
            This is a convenience implementation that achieves the same result as 
            calling <code>item.Parent.Remove(item)</code>.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer">
            <summary>
            Abstract interface implemented by containers that hold data items representing localizable content.
            For example, the <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph"/>, <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.ISegment"/>, <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.ITagPair"/>, and <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IOtherMarker"/> interfaces are 
            derived from this interface.
            </summary>
            <remarks>
            <para>
            Adding or inserting an item into the container automatically sets the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData.Parent"/>
            property of the item. Removing an item from a container automatically sets the parent property to <c>null</c>.
            </para>
            <para>
            An item can never appear in more than one container at the same time. Attempting to add an item to
            a container if it is already in another container causes an exception.
            </para>
            <para>
            If you want an equivalent item to appear in two containers, you can clone it, and insert the clone 
            into the second container. The cloned item will then reference the same properties object(s).
            </para>
            <para>
            Implementations of this interface may or may not be <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData"/>. <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.ITagPair"/> is
            an example of a container that is also a markup data item, and can therefore appear inside other containers.
            <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph"/> is an example of a container that is NOT a markup data item.
            </para>
            <example>
            <para>
            The following example demonstrates how to retrieve the parent container for a container node if it is a markup data item.
            </para>
            <code>
            IAbstractMarkupData GetParent(IAbstractMarkupDataContainer container)
            {
            	IAbstractMarkupData item = container as IAbstractMarkupData;
            	if (item != null)
            	{
            		return item.Parent;
            	}
            	// container is not a markup data item
            	return null;
            }
            </code>
            </example>
            <para>
            During content manipulation it is sometimes necessary to split a container into two parts,
            with the first part containing some of the items, the second containing others, and both containers
            referencing the same properties objects. The easiest way to accomplish this is to call <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.Split(System.Int32)"/>.
            </para>
            <para>
            Note that not all containers can be split (for example, <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph"/> cannot be split). Before calling
            <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.Split(System.Int32)"/> you should therefore check the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.CanBeSplit"/> property.
            </para>
            <para>
            Another common operation is to move items into a different container. The easiest way to do that is
            to use one of the overloads of <c>MoveAllItemsTo()</c> or <c>MoveItemsTo()</c>.
            </para>
            <para>
            It is sometimes necessary to reference locations inside a container. This can be done using the 
            <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.Location"/> class. You can iterate over all possible locations in a container (including
            locations in nested containers) using the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.Locations"/> iterator.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.AllSubItems">
            <summary>
            An iterator that can be used to iterate over all child items - including sub-items - in the container.
            </summary>
            <remarks>
            <para>
            Container items inside the container are encountered before the  actual items that they contain. Note that there is
            no need for the caller to loop through the content of container nodes, as these will also be automatically
            retrieved through this iterator.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.CanBeSplit">
            <summary>
            Indicates whether it is possible to split this container into different
            parts by calling the <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.Split(System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.Split(System.Int32)">
            <summary>
            Splits this container in two. After the split, this object will hold
            all items with index lower than the splitBeforeItemIndex parameter.
            The returned object is a clone of this object, which contains all other items.
            </summary>
            <remarks>
            <para>
            Note that if this item is a markup data item that is part of a parent container
            it will remain in that container. The returned item is not automatically inserted
            into the parent container. If you need it to be there, you must insert it manually.
            </para>
            </remarks>
            <param name="splitBeforeItemIndex"></param>
            <returns></returns>
            <exception cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.NotSplittableException">Thrown if the collection cannot be split at the specified location.</exception>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.MoveAllItemsTo(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer)">
            <summary>
            Moves all items from this container into another one.
            </summary>
            <param name="destinationContainer">The container that will receive all 
            items from this container.</param>
            <remarks>
            The items are added at the end of the other container, while the order is preserved.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.MoveAllItemsTo(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,System.Int32)">
            <summary>
            Moves all items from this container to a specific location in another container.
            </summary>
            <param name="destinationContainer">The container that will receive all items from this container</param>
            <param name="insertAtIndex">The index in the destination container where items should be inserted. 
            Must be less than or equal to the number of items in the destination container.</param>
            <remarks>
            The order of the moved items is preserved.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.MoveItemsTo(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,System.Int32,System.Int32)">
            <summary>
            Moves a number of items from this container into another one.
            </summary>
            <param name="destinationContainer">The container into which the items will be moved</param>
            <param name="startIndex">Index of the first item in this container to be moved</param>
            <param name="count">Number of items to be moved</param>
            <remarks>
            The items are added to the end of the container, while the order is preserved.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.MoveItemsTo(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves a number of items from this container into a specific location in another one.
            </summary>
            <param name="destinationContainer">The container into which the items will be moved</param>
            <param name="destinationIndex">The location where the items should be inserted in the destination container</param>
            <param name="startIndex">Index of the first item in this container to be moved.</param>
            <param name="count">Number of items to be moved</param>
            <remarks>
            The order of the moved items is preserved.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.Locations">
            <summary>
            Iterator for all possible locations in the collection and its sub-collections
            </summary>
            <example>
            Below you find an example of how you can use this iterator:
            <code>
            void ProcessAllText(IAbstractMarkupDataContainer container)
            {
              foreach (Location location in container.Locations)
              {
                IText text = location.ItemAtLocation as IText;
                if (text != null)
                {
                  ProcessText(text);
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.GetLocationsFrom(Sdl.FileTypeSupport.Framework.BilingualApi.Location)">
            <summary>
            Enumerator for locations starting from a specific location
            </summary>
            <param name="startingFrom">Must be a location inside this collection</param>
            <returns>Iterator that can be used to iterate over the remainder of the collection</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.Find(System.Predicate{Sdl.FileTypeSupport.Framework.BilingualApi.Location})">
            <summary>
            Returns the first location that matches the specified predecate.
            The iteration is performed over all locations in this collection and all sub-collections until
            the element is located.
            </summary>
            <param name="match">Delegate that returns true when a matching location has been found</param>
            <returns>The first location that matches the specified predicate
            <para>If no corresponding location is found, <c>null</c> is returned.</para></returns>
            <example>
            This example shows how this can be used to find the location of an equivalent item inside a paragraph.
            <code>
            Location GetEquivalentItemLocation(IAbstractMarkupData equalItem, IParagraph para)
            {
              return para.Find( 
                delegate(Location location)
                {
                  return equalItem.Equals(location.ItemAtLocation);
                });
            }
            </code>
            </example>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.Find(System.Predicate{Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData})">
            <summary>
            Returns the first item that matches the specified predecate.
            <para>
            The iteration is performed over all items and sub-items in this collection and all sub-collections until
            the item is located.
            </para>
            </summary>
            <param name="match">Delegate that returns true when a matching item has been found</param>
            <returns>The first item that matches the specified predicate
            <para>If no corresponding item is found, <c>null</c> is returned.</para></returns>
            <example>
            The following example shows how this can be used (with an anonymous method) to find the an equivalent item inside a paragraph.
            <code>
            IAbstractMarkupData GetEquivalentItem(IAbstractMarkupData equalItem, IParagraph para)
            {
              return para.Find( 
                delegate(IAbstractMarkupData item)
                {
                  return equalItem.Equals(item);
                });
            }
            </code>
            </example>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.Find(Sdl.FileTypeSupport.Framework.BilingualApi.Location,System.Predicate{Sdl.FileTypeSupport.Framework.BilingualApi.Location})">
            <summary>
            Returns the first location that matches the specified predecate, starting
            at a specific location.
            </summary>
            <param name="startAt">The location at which the search is started. This must NOT be <c>null</c>.
            <para>If the predicate matches
            this location, it will be returned.</para>
            <para>If no corresponding location is found, <c>null</c> is returned.</para></param>
            <param name="match">The predicate to evaluate for each location.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.ForEachSubItem(System.Action{Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData})">
            <summary>
            Execute the specified action on each item and (recursively) each sub-item in this container.
            </summary>
            <param name="action"></param>
            <remarks>
            <para>
            The action is executed on the container nodes themselves before it is executed
            on the content items of the containers.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IMarkupDataVisitor">
            <summary>
            Interface for the visitor in the visitor pattern implementation for translatable source / target 
            content items in a localizable paragraph unit.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IMarkupDataVisitor.VisitTagPair(Sdl.FileTypeSupport.Framework.BilingualApi.ITagPair)">
            <summary>
            Called by tag pair instances.
            </summary>
            <param name="tagPair"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IMarkupDataVisitor.VisitPlaceholderTag(Sdl.FileTypeSupport.Framework.BilingualApi.IPlaceholderTag)">
            <summary>
            Called by placeholder tag instances.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IMarkupDataVisitor.VisitText(Sdl.FileTypeSupport.Framework.BilingualApi.IText)">
            <summary>
            Called by text instances.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IMarkupDataVisitor.VisitSegment(Sdl.FileTypeSupport.Framework.BilingualApi.ISegment)">
            <summary>
            Called by segment instances.
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IMarkupDataVisitor.VisitLocationMarker(Sdl.FileTypeSupport.Framework.BilingualApi.ILocationMarker)">
            <summary>
            Called by location marker instances.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IMarkupDataVisitor.VisitCommentMarker(Sdl.FileTypeSupport.Framework.BilingualApi.ICommentMarker)">
            <summary>
            Called by comment marker instances.
            </summary>
            <param name="commentMarker"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IMarkupDataVisitor.VisitOtherMarker(Sdl.FileTypeSupport.Framework.BilingualApi.IOtherMarker)">
            <summary>
            Called by other marker instances.
            </summary>
            <param name="marker"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IMarkupDataVisitor.VisitLockedContent(Sdl.FileTypeSupport.Framework.BilingualApi.ILockedContent)">
            <summary>
            Called by locked content instances.
            </summary>
            <param name="lockedContent"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IMarkupDataVisitor.VisitRevisionMarker(Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionMarker)">
            <summary>
            Called by revision marker instances.
            </summary>
            <param name="revisionMarker"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.INativeToBilingualConverter">
            <summary>
            Interface implemented by components that can convert input
            from calls to the native content handler interface to calls on a bilingual content processor.
            </summary>
            <remarks>
            The implementation must build bilingual content model objects (e.g. <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit"/>),
            and as such will need access to factories for properties and bilingual content model items.
            These factories are supplied by the framework to components implementing the <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent"/> interface.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.INativeToBilingualConverter.Output">
            <summary>
            The framework will set this property during initialization. 
            The converter implementation should generate calls on this interface
            in order to produce the output.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.INativeToBilingualConverter.DocumentInfo">
            <summary>
            Common document properties that will be passed to Initialize() on the bilingual
            output during processing of SetFileConversionProperties().
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.INativeToBilingualConverter.FileInfo">
            <summary>
            Common file properties that will be set by a call to SetFileProperties() on the bilingual
            output during processing of SetFileConversionProperties()
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IOtherMarker">
            <summary>
            A custom marker that can span content, but that is not visible in the editor.
            </summary>
            <remarks>
            <para>
            This type of marker is intended to be used for custom implementations that 
            temporarily need to embed invisible content-spanning markup inside the bilingual content.
            </para>
            <para>
            Examples could include markup of terminology.
            </para>
            <para>
            The markers are often preserved during regular editing operations, but since
            they are invisible in the editing environment, users may delete them
            without even knowing that they are present. Implementations should keep this
            in mind, and not rely on the markers not being deleted during such operations.
            </para>
            <para>
            The markers have no equivalent representation in the native API.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IOtherMarker.Id">
            <summary>
            Marker id
            </summary>
            <remarks>
            <para>
            Intended to allow the marker to be identified, for example, so that
            it can be associated with properties that is stored elsewhere.
            </para>
            <para>
            Note that there is no guarantee that this property uniquely identifies
            a specific marker instance. Even if the id is originally unique,
            the marker may be duplicated during content processing operations, which causes cloned
            instances to use the same id.
            </para>
            <para>
            This property may be null.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IOtherMarker.MarkerType">
            <summary>
            Type of marker
            </summary>
            <remarks>
            <para>
            Set this property to distinguish your specific type of marker from other markers.
            </para>
            <para>
            Values used by SDL have the prefix "x-sdl-".
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph">
            <summary>
            Container for the source or target content in a <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit"/>;
            this often corresponds to a paragraph of localizable content in one language.
            </summary>
            <remarks>
            <para>
            A paragraph is a markup data container, but does not implement
            <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData"/>. It acts as the root container for the
            source or target content in a paragraph.
            </para>
            <para>
            Paragraphs are only used as <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Source"/> or <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Target"/>
            members; they are never created as standalone objects.
            </para>
            <para>
            The <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph.IsSource"/> and <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph.IsTarget"/> properties can be used
            to quickly find out if this is the source or target part of the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph.Parent"/> paragraph unit.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph.IsSource">
            <summary>
            True if the paragraph is the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Source"/> of the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph.Parent"/>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph.IsTarget">
            <summary>
            True if the paragraph is the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Target"/> of the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph.Parent"/>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph.Parent">
            <summary>
            The parent paragraph unit this paragraph belongs to
            </summary>
            <remarks>
            This property is automatically set by the framework. API users should therefore never need to set this
            property.
            <para>Attempting to set this property to an invalid value (i.e. a ParagraphUnit
            that does not contain this item, or setting it to null when the item
            is part of an existing ParagraphUnit) will cause an exception.</para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraph.TextDirection">
            <summary>
            The text direction of the paragraph. This directionality overrides any document-level directionality 
            unless it is set to Inherit.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit">
            <summary>
            A continous unit of source language content within a single context,
            and (if applicable) the localized target language version of the content.
            This often corresponds to a paragraph of text in a native file. 
            </summary>
            <remarks>
            <para>
            There are two types of paragraph units: those that contain localizable content,
            and those that do not contain localizable content. The latter is referred to as a structure paragraph unit,
            and typically only contains structure tags and associated whitespace.
            The <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.IsStructure"/> property indicates whether this paragraph unit is a structure
            paragraph unit. Since the content of structure paragraph units is not localized,
            their <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Target"/> property is null.
            </para>
            <para>
            Paragraph units that are not structure paragraph units are referred to as localizable
            paragraph units. They normally have both <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Source"/> and <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Target"/>,
            and never contain structure tags.
            </para>
            <para>
            The <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Properties"/> of the paragraph unit contains associated
            information, including contexts and the paragraph unit's unique id.
            </para>
            <para>
            The content in localizable paragraph units is typically divided into segments.
            A segment is usually a sentence. Segments exist in source and target language versions,
            and you can iterate over them using the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.SegmentPairs"/> property.
            </para>
            <para>
            When processing content in a localizable paragraph, it is important to be aware of the fact that
            the segments do not represent all content of the paragraph. There may also be content between
            segments. Examples of such content include space characters (which separate sentences), 
            tags that appearr between sentences, etc. Content between segments can differ between the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Source"/>
            and <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Target"/>.
            </para>
            <para>
            To iterate over content between segments you can use a <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.Location"/>. The <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.GetSourceSegmentLocation(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)"/>
            and <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.GetTargetSegmentLocation(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)"/> methods can be useful for this task.
            </para>
            <para>
            The <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.GetSourceSegment(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)"/> and <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.GetTargetSegment(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)"/> methods provide a convenient
            way of locating the corresponding source/target version for a segment.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Properties">
            <summary>
            Information on this paragraph unit
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.IsStructure">
            <summary>
            <c>true</c> if this is a structure ParagraphUnit, i.e. a paragraph unit that
            contains no localizable content (i.e. structure tags and whitespace only).
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Source">
            <summary>
            Source language content of the ParagraphUnit
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Target">
            <summary>
            Target language content of the ParagraphUnit
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.GetSourceSegment(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)">
            <summary>
            Returns the segment with the specified id if it exists in the source of this ParagraphUnit.
            </summary>
            <param name="id"></param>
            <returns><c>Null</c> if no segment with that id exists in the source</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.GetTargetSegment(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)">
            <summary>
            Returns the segment with the specified id if it exists in the target of this ParagraphUnit.
            </summary>
            <param name="id"></param>
            <returns><c>Null</c> if no segment with that id exists in the target</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.GetSegmentPair(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)">
            <summary>
            Get the source and target segment with a specified id.
            </summary>
            <param name="id"></param>
            <returns><c>Null</c> if no segments with that id exist in the source</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.GetSourceSegmentLocation(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)">
            <summary>
            Locates the segment with the specified id inside the source.
            </summary>
            <param name="id">The segment id to search for.</param>
            <returns>Location of the start of the source segment inside the source paragraph, or null if it does not exist.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.GetTargetSegmentLocation(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)">
            <summary>
            Locates the segment with the specified id inside the target.
            </summary>
            <param name="id">The segment id to search for.</param>
            <returns>Location of the start of the target segment inside the target paragraph, or null if it does not exist.</returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.SegmentPairs">
            <summary>
            Iterator for easy access to the source and target segments in the ParagraphUnit
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IPlaceholderTag">
            <summary>
            A standalone inline tag that appears inside the source or target
            content in a localizable ParagraphUnit in the bilingual content model.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IPlaceholderTag.Properties">
            <summary>
            The tag properties communicated from the native file file type components on this tag
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IPlaceholderTag.RevisionProperties">
            <summary>
            Revision information associated with the tag, or <c>null</c> if none.
            </summary>
            <remarks>
            <para>
            This property is rarely used, since placeholder tags can simply be 
            included inside regular <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionMarker"/> containers like
            other localizable content.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IRepetitionsTable">
            <summary>
            Used in <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties.Repetitions"/> to keep track
            of segments with the same source language content that appear in multiple 
            locations within the document (potentially in different files).
            </summary>
            <remarks>
            <para>
            This table is built by a dedicated component during initial content processing.
            Assuming that the source content does not change, the table should remain valid 
            as long as the document contains the same files.
            </para>
            <para>
            The table is used during editing to implement the auto-propagation feature,
            whereby the translation of a repeated segment can be immediately propagated
            to other locations in the same document.
            </para>
            <para>
            A <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId"/> is used to identify a set 
            of source segments with the same content (repetitions) in the table. The actual
            segments that are associated with the repetition can be retrieved by 
            calling <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IRepetitionsTable.GetRepetitions(Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId)"/>. A segment is referenced as a paragraph unit id
            and the associated segment id (this is necessary since the same segment ids can be re-used
            in multiple files in the document (in fact, it is only guaranteed to be unique within
            a paragraph unit).
            </para>
            <para>
            It is left to the implementation to determine how repetitions are calculated
            and propagated. Sophisticated algorithms can apply repetitions also when
            the source content differs, for example, with regards to tagging and placeables.
            Very often, a temporary translation memory is used to build the repetition table.
            </para>
            <para>
            When a translation is applied using auto-propagation, the corresponding 
            repetition id should be stored in the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.RepetitionTableId"/>
            property. This allows the editor to better track auto-propagated segments.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IRepetitionsTable.GetRepetitions(Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId)">
            <summary>
            Returns the repetition list relating to a specific RepetitionId.
            </summary>
            <param name="repetitions"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IRepetitionsTable.RepetitionIds">
            <summary>
            Use this iterator to iterate over the pepetition ids in the repetitions table.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IRepetitionsTable.Count">
            <summary>
            The number of repetition ids in the table
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IRepetitionsTable.GetRepetitionId(Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId,Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)">
            <summary>
            Finds the repetition id of a segment.
            </summary>
            <param name="paragraphUnitId"><see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties.ParagraphUnitId"/> for the paragraph in which the segment appears</param>
            <param name="segmentId"><see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties.Id"/> for the segment</param>
            <returns>The repetition id for the specified segment, or <c>default (RepetitionId)</c> if 
            the table has no entry for this segment.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IRepetitionsTable.Add(Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId,Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId,Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)">
            <summary>
            Adds a repeated segment to the table.
            </summary>
            <param name="key"></param>
            <param name="pu"></param>
            <param name="newRepetition"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IRepetitionsTable.Remove(Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId,Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)">
            <summary>
            Remove a repeated segment from the table.
            </summary>
            <param name="paragraphUnitId"></param>
            <param name="segmentId"></param>
            <returns>True if the segment was removed, otherwise false</returns>
            <remarks>
            When the last segment for a repetition id is removed, the repetition id is also removed.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IRepetitionsTable.DeleteKey(Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId)">
            <summary>
            Removes all repetitions with the specified id from the table.
            </summary>
            <param name="repetitions"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IRepetitionsTable.Clear">
            <summary>
            Remove all entries from the table.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionMarker">
            <summary>
            Marker used to indicate content changes tracked via revisions, such as 
            content that has been added or deleted. The revision applies to
            all content that this marker spans.
            </summary>
            <remarks>
            <para>
            Revision markers can be nested. If revisions
            are nested, all content inside a <see cref="F:Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType.Delete"/> revision (including
            other revisions) is always considered to be deleted. Deleted revisions that appear inside
            inserted revisions should be treated as if a part of the inserted content has been deleted
            in a subsequent revision.
            </para>
            <para>Note that individual tags may also have revision properties. This is necessary
            to track adding and deleting of tag pairs or individual start/end tags.</para>
            <para>
            Revision markers are also used to annotate differences between TM matches and document content
            when a match is shown in the TM window.
            </para>
            <para>
            A single edit operation (revision) may need to be applied using multiple revision markers (and tags). 
            In such cases, the different markers (and tags) can reference the same revision properties object.
            </para><para>
            Feedback (Translation Quality Assessment): RevisionMarkers are also used for TQA. In this case, the
            RevisionType enum indicates what type of feedback is involved (FeedbackAdded, FeedbackRemoved or FeedbackComment)
            Please see the RevisionType enum for more information.
            </para>
            <para>
            <see cref="F:Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType.FeedbackAdded"/>
            </para>
            <para>
            <see cref="F:Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType.FeedbackDeleted"/>
            </para>
            <para>
            <see cref="F:Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType.FeedbackComment"/>
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionMarker.Properties">
            <summary>
            Information on this particular revision
            </summary>
            <remarks>
            This object may be shared between multiple revision markers and tags that represent 
            the same edit operation.
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties">
            <summary>
            Information on a particular revision
            </summary>
            <remarks>
            <para>
            Revision properties are used in <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionMarker.Properties"/>,
            in <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.ITagPair.StartTagRevisionProperties"/>, and in <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.ITagPair.EndTagRevisionProperties"/>.
            </para>
            <para>
            A single revision that spans multiple parts of a document can be 
            achieved by having multiple <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionMarker"/> instances reference
            the same revision properties.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties.RevisionType">
            <summary>
            The type of change the revision represents
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties.Date">
            <summary>
            (optional) The date and time when the revision was made
            </summary>
            <remarks>This property may be <c>null</c>.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties.Author">
            <summary>
            (optional) Name of the person that made the change
            </summary>
            <remarks>This property may be <c>null</c>.</remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.ISegment">
            <summary>
            Identifies the content of a segment inside the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Source"/>
            or <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Target"/>. 
            </summary>
            <remarks>
            <para>
            A segment is a piece of localizable content (text and tags etc.)
            for which existing translations can possibly be re-used. 
            What exactly counts as a segment is determined
            by the segmentation engine. In practice, a segment is typically a sentence.
            </para>
            <para>
            The process of dividing the source content into segments usually takes place when the 
            file is first processed. This process is performed by the segmentation engine, a bilingual 
            content processor that is invoked after the bilingual content processors, which are part of the extractor. 
            Bilingual content processors that are defined as part of the extractor will therefore not receive content that
            has been processed by the segmentation engine.
            </para>
            <para>
            Content originating from bilingual file types (e.g. TTX, ITD, or XLIFF) may contain
            segments even if it has not yet been processed by the segmentation engine.
            </para>
            <para>
            A segment that appears in the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Target"/> always has a corresponding
            source language version that appears in the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Source"/>. The combination of source and
            target segments is called segment pair. 
            They reference the same <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties"/> object.
            </para>
            <para>
            The <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISegment.Properties"/> of the segment contains information on its translation status.
            </para>
            <para>
            You can locate the corresponding source/target segment through the methods
            <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.GetSourceSegment(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)"/> and <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.GetTargetSegment(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)"/>.
            The segment pairs in a paragraph unit can also be enumerated by using <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.SegmentPairs"/>.
            </para>
            <para>
            It is important to note that not all content inside the source and target of a
            paragraph unit appears inside a segment. There can also be content outside of segments, such as
            spaces between sentences, tags, and other elements that the segmentation engine has not considered
            part of a segment.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISegment.Properties">
            <summary>
            The properties common between the corresponding source and target segments
            </summary>
            <remarks>
            <para>
            Matching source and target segments in a ParagraphUnit must reference the 
            same segment pair properties object instance.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISegment.ParentParagraphUnit">
            <summary>
            The ParagraphUnit the segment appears in, or <c>null</c> if none.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.ISegmentPair">
            <summary>
            Represents a source and target segment pair in a paragraph unit.
            </summary>
            <remarks>
            <para>
            The segment pair is an artificial concept that has been introduced
            for the purpose of simplifying tasks that only deal with source and 
            target segment pairs. The actual segments in the segment pair still appear inside the
            <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Source"/> and <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Target"/>
            content.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISegmentPair.Source">
            <summary>
            The segment that appears in the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Source"/>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISegmentPair.Target">
            <summary>
            The segment that appears in the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.Target"/>
            <para>For source segments with no target equivalent, this property is <c>null</c>.</para>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISegmentPair.Properties">
            <summary>
            The common properties for the segment pair
            </summary>
            <remarks>
            <para>
            Assigning to this property will affect both the source and the target segment.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IStructureTag">
            <summary>
            Tag that represents structural information, and that appears
            inside a <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit"/> with <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IParagraphUnit.IsStructure"/>
            set to <c>true</c>.
            </summary>
            <remarks>
            <para>
            If the tag has localizable content, that content
            is exposed for translation inside separate, localizable paragraph units, 
            which are referenced via the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractTag.SubSegments"/> collection.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IStructureTag.Properties">
            <summary>
            Information on the structure tag
            </summary>
            <remarks>
            <para>
            These properties originate from the
            native file type processors.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.ISubSegmentReference">
            <summary>
            Contains information associated with localizable content
            of a tag in the bilingual content model.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISubSegmentReference.Properties"/> contain the information
            provided by the native file processor components, and the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISubSegmentReference.ParagraphUnitId"/>
            identifies the localizable paragraph unit in wich the content
            has been externalized for translation.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISubSegmentReference.Properties">
            <summary>
            Information on which tag content has been externalized
            </summary>
            <remarks>
            <para>
            This originates from the native file processing components.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ISubSegmentReference.ParagraphUnitId">
            <summary>
            The id of the localizable paragraph unit 
            in which the content is available for translation.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.ITagPair">
            <summary>
            A pair of tags (i.e. start and end) in the bilingual content model, with the content enclosed by the tag pair
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ITagPair.StartTagProperties">
            <summary>
            The tag properties communicated by the native file processing components that refer to the start tag of the paired tags
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ITagPair.StartTagRevisionProperties">
            <summary>
            Revision information that is directly associated with the start tag, or <c>null</c> if none
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ITagPair.IsStartTagGhost">
            <summary>
            <para>When true, the start tag of the tag pair has ghost status.</para>
            <para>
            Ghost tags occur when either the start tag or the end tag of a tag pair has been deleted. 
            Such operations would leave the tag pair in an invalid state until either the remaining start or end
            tag has been removed too (provided that the entire tag pair can be deleted properly). SDL Trados Studio supports
            this behavior in the editor by leaving the tag pair in place until both start
            and end tags have been deleted. While only one tag of a pair has been deleted, the "deleted" tag is
            temporarily marked as a (transparent) "ghost" tag, but retains its position.
            </para>
            </summary>
            <remarks>
            <para>
            Under normal circumstances, tags should never have ghost status, however,
            we still need to support serialization of the ghost status when saving files
            to an intermediate bilingual format, which is why this interface had to be introduced.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ITagPair.EndTagProperties">
            <summary>
            The tag properties communicated from the native file processing components that refer to the end tag of the paired tags
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ITagPair.EndTagRevisionProperties">
            <summary>
            Revision information directly associated with the end tag, or <c>null</c> if none
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.ITagPair.IsEndTagGhost">
            <summary>
            When true, the end tag of the tag pair has ghost status.
            <para>
            Ghost tags occur when either the start tag or the end tag of a tag pair has been deleted. 
            Such operations would leave the tag pair in an invalid state until either the remaining start or end
            tag has been removed too (provided that the entire tag pair can be deleted properly). SDL Trados Studio supports
            this behavior in the editor by leaving the tag pair in place until both start
            and end tags have been deleted. While only one tag of a pair has been deleted, the "deleted" tag is
            temporarily marked as a (transparent) "ghost" tag, but retains its position.
            </para>
            </summary>
            <remarks>
            <para>
            Under normal circumstances, tags should never have ghost status, however,
            we still need to support serialization of the ghost status when saving files
            to an intermediate bilingual format, which is why this interface had to be introduced.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.IText">
            <summary>
            Translatable text inside the source or target in a 
            localizable ParagraphUnit.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.IText.Properties">
            <summary>
            Original information on the translatable text as
            provided by the native file processing components.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.IText.Split(System.Int32)">
            <summary>
            Splits the text node in two. 
            
            This object retains the first part of the text.
            The returned object is a clone of this object, which
            contains the remainder of the text.
            </summary>
            <param name="fromIndex">Must be a value between 0 and the length of the text</param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation">
            <summary>
            Represents a location inside an <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.Parent"/> property specifies the parent container,
            and the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.Index"/> property represents the item index
            in the container. An index of 0 indicates a position between the
            first item in the parent, and an index of <c>Parent.Count</c> indicates a 
            position after the last item.
            </para>
            <para>
            If you need to refer to an item in a nested container, use a <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.Location"/> instead.
            </para>
            <para>
            Since the position includes an index into the parent, if
            the content of the parent changes (e.g. new items are inserted, or existing
            ones removed or replaced), the position may no longer point to the same
            item.
            </para>
            <para>
            Use a location marker instead if you need to refer to a specific location that may
            change as part of operations on the data.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.#ctor">
            <summary>
            Creates an uninitialized object.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,System.Int32)">
            <summary>
            Creates from specific parent and index values.
            </summary>
            <param name="parent"></param>
            <param name="index"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation)">
            <summary>
            Creates from the values used in another object.
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.Parent">
            <summary>
            The container that this location refers to a position inside.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.Index">
            <summary>
            The index in the parent collection that defines the location.
            
            Index 0 refers to the location before the first item in the collection.
            The index Parent.Count indicates a location after the last item
            in the collection.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.ItemAtLocation">
            <summary>
            Returns the item with the same index in the parent collection
            as the <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.Index"/> of this location, or null if there
            is no item with that index (e.g. if the index indicates a position
            after the last item in the collection).
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.Equals(System.Object)">
            <summary>
            Compares all properties.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.GetHashCode">
            <summary>
            Calculated from index and parent properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.ToString">
            <summary>
            Overridden to provide more intuitive information for use in the debugger
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.Clone">
            <summary>
            Create a shallow clone.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.IsValid">
            <summary>
            The location is valid if the parent is set, and
            the index is a value within the range: 0 &lt;= index &lt;= Parent.Content.Count
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.IsAtEndOfParent">
            <summary>
            True if the location is valid and refers to the position after the last item in the parent
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation.IsAtStartOfParent">
            <summary>
            True if the location is valid and refers to the first item in the parent
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.Location">
            <summary>
            Represents a location inside a possibly nested <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer"/> collection.
            </summary>
            <remarks>
            <para>
            The parent in the top level location (index 0) is the root container (often IParagraph or ISegment).
            The <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.BottomLevel"/> is the location in the lowest level.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation)">
            <summary>
            Initializes the location with one level only.
            This generates a location that is equivalent to the passed-in LevelLocation.
            </summary>
            <param name="location">must not be null</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,System.Boolean)">
            <summary>
            Initialize the location to the first or last position in the specified root container.
            </summary>
            <param name="rootContainer"></param>
            <param name="firstLocation">Indicates whether the location should be initialized to the
            first or the last available location of the root container. Pass true to initialize
            it to the first location, and false to initialize it to the last location.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData)">
            <summary>
            Creates a location that corresponds to the position of the item with regards to the
            specified root container.
            </summary>
            <param name="rootContainer">Must not be null</param>
            <param name="itemAtLocation">Must be an item somewhere inside the root container, i.e.
            the root container must be an ancestor to the item.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location)">
            <summary>
            Creates a deep clone
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.Levels">
            <summary>
            Provides access to the actual collection of levels that this location represents.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtEnd">
            <summary>
            <c>True</c> if the <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNext"/> method 
            returns <c>false</c>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtStart">
            <summary>
            <c>True</c> if the <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePrevious"/> method 
            returns <c>false</c>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.BottomLevel">
            <summary>
            Quick access to the most specific level
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.ItemAtLocation">
            <summary>
            Returns the item at the location specified by the bottom level.
            
            If the location is not valid, or if there is not item at the location
            (i.e. if it is a location after the last element in a collection), this
            property returns null.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.Depth">
            <summary>
            Returns the number of levels in the location.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsValid">
            <summary>
            True if all levels are valid locations and each
            level corresponds to the location defined in the parent layer.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNext">
            <summary>
            Advances to the next possible location. This will move to
            the next available position according to the following priority list:
            <list type="bullet">
            <item>First child</item>
            <item>Next Sibling</item>
            <item>Next Parent Sibling</item>
            </list>
            If no such location is available (i.e. the location is currently behind the last item in the top level), 
            the location is not changed, and the method returns false.
            
            If the location is invalid, the behavior is undefined and exceptions may be thrown.
            </summary>
            <returns>True if location was successfully advanced to the next possible position.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePrevious">
            <summary>
            Moves the location to the preceding available position according to the following priority list:
            <list type="bullet">
            <item>Previous Sibling Last Child</item>
            <item>Previous Sibling</item>
            <item>Parent</item>
            </list>
            If no parent is available (i.e. location is before the first item in the top level), the location
            is not changed, and the method returns false.
            </summary>
            <returns>True if the location was successfully moved to a previous position.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNextSibling">
            <summary>
            Advance the location to the next sibling position in the current bottom layer.
            
            If no next sibling position is available (i.e. the location is already behind the
            last item in the parent collection), the location is not changed, and this method
            returns false.
            </summary>
            <returns>True if the location was changed successfully</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePreviousSibling">
            <summary>
            Moves the location to the preceding sibling position in the current bottom layer.
            
            If no previous sibling location is available (i.e. the current location is already
            at the start of the parent collection), the location is not changed, and this method
            returns false.
            </summary>
            <returns>True if the location was changed successfully</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveParent">
            <summary>
            Changes the location to refer to the position just before the parent of the current 
            bottom level location.
            
            If no parent location is available (i.e. the location is already in the top layer),
            the location is not changed, and this method returns false.
            </summary>
            <returns>True if the location was changed successfully</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveFirstChild">
            <summary>
            Changes the location to refer to the position just before the first child node
            of the item at the current location.
            
            If no child node is available (i.e. the current location does not refer to a
            node that is an IAbstractMarkupDataContainer), the location is not changed, and 
            this method returns false.
            
            Note that if the item at the current location is a container, but it has
            no content, the location is still advanced to a location at the index 0 inside
            the collection, as it is possible to insert new content there.
            </summary>
            <returns>True if the location was changed successfully</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveLastChild">
            <summary>
            Changes the location to just behind the last child node of the item
            at the current location.
            
            If no child node is available (i.e. the current location does not refer to a
            node that is an IAbstractMarkupDataContainer), the location is not changed, and 
            this method returns false.
            
            Note that if the item at the current location is a container, but it has
            no content, the location is still advanced to a location at the index 0 inside
            the collection, as it is possible to insert new content there.
            </summary>
            <returns>True if the location was changed successfully</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.Clone">
            <summary>
            Creates a deep clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.Equals(System.Object)">
            <summary>
            Returns <c>true</c> if this location refers to the same position as the other location.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.GetHashCode">
            <summary>
            Returns the hash code of the levels in this location.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.ToString">
            <summary>
            Overridden to provide more useful information while debugging
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.BilingualApi.NotSplittableException">
            <summary>
            Thrown by the <see cref="M:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer.Split(System.Int32)"/> method if content cannot be split.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.NotSplittableException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.NotSplittableException.#ctor(System.String)">
            <summary>
            Construction from a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.NotSplittableException.#ctor(System.String,System.Exception)">
            <summary>
            Construction from a message and another exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.BilingualApi.NotSplittableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Direction">
            <summary>
            Reading order directionality for text
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.Direction.Inherit">
            <summary>
            Same directionality as surrounding content, or the default directionality if none
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.Direction.LeftToRight">
            <summary>
            Explicit left-to-right reading order, independent of the surrounding content
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.Direction.RightToLeft">
            <summary>
            Explicit right-to-left reading order, independent of the surrounding content
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.TextDirection">
            <summary>
            Formatting representing the direction of the text flow. This is used for custom
            bi-directional text insertions.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextDirection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextDirection.#ctor(Sdl.FileTypeSupport.Framework.Direction)">
            <summary>
            Construct with explicit direction
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextDirection.#ctor(Sdl.FileTypeSupport.Framework.Formatting.TextDirection)">
            <summary>
            Cloning constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextDirection.Name">
            <summary>
            The string used as name for this type of formatting.
            </summary>
            <remarks>Typically used during de-serialization from a key/value pair.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextDirection.LocalizedFormattingName">
            <summary>
            A localized representation of this type of formatting
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextDirection.StringValue">
            <summary>
            The string value representing the value of the <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.TextDirection.Direction"/>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextDirection.LocalizedStringValue">
            <summary>
            A localized representation of the value of the type of formatting
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextDirection.Direction">
            <summary>
            The direction in which the text should be displayed when this formatting is applied
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextDirection.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Visitor implementation
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextDirection.Clone">
            <summary>
            ICloneable implementation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.AbstractBooleanFormatting">
            <summary>
            Base class for simpe on/off type formatting, such as bold, italic, underline
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.AbstractBooleanFormatting.#ctor(System.Boolean)">
            <summary>
            Initializes the boolean formatting with the specified value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.AbstractBooleanFormatting.#ctor">
            <summary>
            Default constructor, creates an uninitialized boolean formatting.
            The default value for the bool data is <c>true</c>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.AbstractBooleanFormatting.Value">
            <summary>
            The boolean value for the formatting that the derived type represents
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.AbstractBooleanFormatting.StringValue">
            <summary>
            The boolean value as a string
            </summary>
            <remarks>
            <para>
            Typically used for serialization.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.AbstractBooleanFormatting.LocalizedStringValue">
            <summary>
            A localized representation of the boolean value string
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem">
            <summary>
            Abstract base class for formatting items; provides a default implementation
            of the <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem"/> interface, implements <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.Equals(System.Object)"/>
            and <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.GetHashCode"/> using the <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.FormattingName"/> and <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.StringValue"/>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.FormattingName">
            <summary>
            The name of this type of formatting.
            The default implementation returns the type name of the actual class,
            but this can be overridden in derived classes.
            
            <para>The name may be used as an attribute name when storing this
            formatting in XML format, in which case the value of the attribute
            represents the StringValue property.</para>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.LocalizedFormattingName">
            <summary>
            A localized representation of the formatting name; the default implementation
            returns <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.FormattingName"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.GetDefaultName(System.Reflection.MemberInfo)">
            <summary>
            The default name for an IFormattingItem type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.StringValue">
            <summary>
            The value this formatting represents as a string.
            
            Derived formatting classes should allow their entire value to be
            retrieved and set through this property.
            
            <para>The name and string value may be used for storing formatting as
            an XML attribute with a value.</para>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.LocalizedStringValue">
            <summary>
            A localized representation of the formatting value. The default implementation
            returns <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.StringValue"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Implementation of the visitor pattern.
            <para>Derived formatting classes should implement this by calling into
            the appropriate method on the visitor.</para>
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.Equals(System.Object)">
            <summary>Compares the name and value properties of the objects.</summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>True if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>, otherwise false.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.GetHashCode">
            <returns>A hash code for the current <see cref="T:System.Object"></see>.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.ToString">
            <summary>
            For debugging; returns "FormattingName = StringValue".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.Clone">
            <summary>
            Must be overridden in all directly and indirectly derived classes to return
            objects of the correct type.
            </summary>
            <returns>A clone of this object</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor">
            <summary>
            Formatting that represents the background color of a field
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor.Name">
            <summary>
            The string used as name for this type of formatting.
            </summary>
            <remarks>Typically used during de-serialization from key/value pair.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor.LocalizedFormattingName">
            <summary>
            The localized name of this type of formatting
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor.#ctor(System.Drawing.Color)">
            <summary>
            Creates formatting that represents a specific background color.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor.#ctor">
            <summary>
            Constructs a background color with the default color (Window color from current Windows settings).
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor.Equals(System.Object)">
            <summary>
            Overridden to consider equivalent colors represented by different values equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor.GetHashCode">
            <summary>
            Overridden to return the same hash code for the same effective color values
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor.Value">
            <summary>
            The color value of this formatting
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor.StringValue">
            <summary>
            Colors are serialized to strings either as named colors
            (e.g. Aquamarine or ActiveWindowTitleText), or as 32-bit hex values
            in the format determined by the .NET ColorConverter class.
            </summary>
            <remarks>
            <para>
            Setting this value to <c>null</c> sets the color to the windows default color.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor.LocalizedStringValue">
            <summary>
            Colors are serialized to localized strings either as named colors
            (e.g. Aquamarine or ActiveWindowTitleText), or as 32-bit hex values
            in the format determined by the .NET ColorConverter class.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitBackgroundColor(Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor)"/> on the visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor.Clone">
            <summary>
            Clones this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.Bold">
            <summary>
            Represents bold character formatting.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.Bold.Name">
            <summary>
            The string used as name for this type of formatting.
            </summary>
            <remarks>Typically used during de-serialization from key/value pair.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.Bold.LocalizedFormattingName">
            <summary>
            A localized representation of the type of formatting
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Bold.#ctor(System.Boolean)">
            <summary>
            Creates a formatting representing bold explicitly turned on or off.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Bold.#ctor">
            <summary>
            Creates a formatting representing bold explicitly turned on.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Bold.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitBold(Sdl.FileTypeSupport.Framework.Formatting.Bold)"/> on the visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Bold.Clone">
            <summary>
            Creates a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.FontName">
            <summary>
            Represents a human readable font name for formatted text.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.FontName.Name">
            <summary>
            The string used as name for this type of formatting.
            </summary>
            <remarks>Typically used during de-serialization from key/value pair.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.FontName.LocalizedFormattingName">
            <summary>
            A localized representation of this type of formatting.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.FontName.#ctor(System.String)">
            <summary>
            Construction from a specified font name.
            </summary>
            <param name="value">Name of the font</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.FontName.#ctor">
            <summary>
            Constructs a font name using the default font (Arial Unicode MS).
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.FontName.Value">
            <summary>
            The font name
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.FontName.StringValue">
            <summary>
            The font name, same as <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.FontName.Value"/>
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.FontName.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitFontName(Sdl.FileTypeSupport.Framework.Formatting.FontName)"/> on the visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.FontName.Clone">
            <summary>
            Creates a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.FontSize">
            <summary>
            Represents the font size in points for formatted text.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.FontSize.Name">
            <summary>
            The string used as name for this type of formatting.
            </summary>
            <remarks>Typically used during de-serialization from key/value pair.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.FontSize.LocalizedFormattingName">
            <summary>
            A localized representation of this type of formatting
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.FontSize.#ctor(System.Single)">
            <summary>
            Specifies an explicit font size.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.FontSize.#ctor">
            <summary>
            Constructs a font size with the default size (12 pt).
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.FontSize.Value">
            <summary>
            The font size in points
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.FontSize.StringValue">
            <summary>
            String representation of the font size.
            </summary>
            <remarks>Typically used for serialization.</remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.FontSize.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitFontSize(Sdl.FileTypeSupport.Framework.Formatting.FontSize)"/> on the visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.FontSize.Clone">
            <summary>
            Creates a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup">
            <summary>
            <para>
            A collection of non-conflicting formatting items that together
            specify a fully defined formatting or a formatting override.
            </para>
            </summary>
            <remarks>
            <para>
            Instances of this class should normally be created by calling <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItemFactory.CreateFormatting"/>, or
            by cloning an existing instance. (<see cref="T:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItemFactory"/> is typically accessed from 
            the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.FormattingItemFactory"/> property.)
            </para>
            <para>
            The collection is a dictionary indexed using the <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.FormattingName"/> as keys
            for the contained formatting items.
            </para>
            <para>
            Can be combined with other formatting by calling <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup.OverrideWith(Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup)"/> or
            <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup.UnderrideWith(Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup)"/>.
            </para>
            </remarks>
            <example>
            Here is an example that shows how to explicitly turn off bold formatting
            only when the formatting is set:
            <code>
            void SetNoBold(IFormattingGroup fmt)
            {
            	// check if there is bold formatting already
            	if (fmt.ContainsKey(Bold.Name))
            	{
            		// explicitly override by setting our formatting instead
            		Bold notBold = new Bold(false);
            		fmt.Add(notBold);
            	}
            }
            </code></example>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup.Add(Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem)">
            <summary>
            Adds a formatting item to the collection. The FormattingName is used as a key.
            If a formatting of this type already exists, it will be replaced.
            </summary>
            <param name="formatting"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup.Contains(System.String)">
            <summary>
            Tests whether the collection contains a formatting item of a certain type.
            </summary>
            <param name="formattingName"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup.Contains(Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem)">
            <summary>
            Tests whether an equivalent formatting is part of the collection.
            </summary>
            <param name="formatting"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup.Item(System.String)">
            <summary>
            Retrieves a formatting item of a specified type.
            </summary>
            <param name="formattingName"></param>
            <returns>Null if no such formatting exists in the collection.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup.OverrideWith(Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup)">
            <summary>
            Adds each formatting item from the other object to this one, thereby overwriting
            any formatting of the same type in this object. Any formatting items
            in this object that do not have corresponding formatting items in the
            other object remain unchanged.
            
            <para>This can be used to apply a formatting override.</para>
            </summary>
            <remarks>Note that this operation only overrides and appends items,
            and thus cannot be used to explicitly remove formatting items (without overriding them).</remarks>
            <seealso cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup.UnderrideWith(Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup)"/>
            <param name="otherFormatting"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup.UnderrideWith(Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup)">
            <summary>
            Adds each formatting item from the other formatting that does not already
            exist in this collection.
            
            <para>This can be used to "overlay" formatting overrides when starting from
            the most significant formatting.</para>
            <para>The difference to <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup.OverrideWith(Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup)"/> is the fact that existing formatting
            in this object is always preserved.</para>
            </summary>
            <seealso cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup.OverrideWith(Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup)"/>
            <param name="otherFormatting"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem">
            <summary>
            This interface represents an individual formatting property, which is typically used as part of semi-WYSIWYG
            display formatting.
            </summary>
            <remarks>
            <para>
            Examples of formatting items include <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.Bold"/> and <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.FontSize"/>.
            </para>
            <para>
            The formatting property is effectively a key/value pair, in which the
            <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.FormattingName"/> acts as a key describing the formatting property type (e.g. "Bold"),
            and the <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.StringValue"/> represents the value associated with the formatting type (e.g. "On"). 
            Implementation classes typically provide convenience accessors that can be used to set the string value using
            strong types (e.g. color or bool). However, the actual value should also be accessible and settable via the <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.StringValue"/>
            property. 
            </para>
            <para>
            Formatting items are serialized as a key/value pair using the <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.FormattingName"/> and <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.StringValue"/> properties.
            They can be de-serialized from a string key/value pair by calling <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItemFactory.CreateFormattingItem(System.String,System.String)"/>.
            </para>
            <para>
            Formatting items are typically instantiated directly (e.g. <c>new Bold()</c>), and assigned to an <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.IFormattingGroup"/>
            instance.
            </para>
            <para>
            If the formatting needs to be shown in text form to the user, the <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.LocalizedFormattingName"/> and <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.LocalizedStringValue"/>
            properties should be used. Implementation classes should return culture specific values for these properties as appropriate.
            </para>
            <para>
            This interface also implements a visitor pattern (via <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)"/>) that can be used by applications 
            to discover the well-known formatting item types defined in <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor"/>.
            </para>
            <para>
            To represent formatting types other than the well-known ones, which are listed in the <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor"/> interface, you can either
            use an explicit instance of <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting"/> (e.g. <c>new UnknownFormatting("Emboss", "On")</c>), or derive your 
            own implementation class from this type. (If you derive your own implementation, you may also want to provide your own implementation
            of the <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItemFactory"/> to ensure that formatting items are correctly de-serialized to your implementation class.
            Given the complexities of this approach, it is typically preferred to use an explicit <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting"/> instance.)
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.FormattingName">
            <summary>
            The name of this type of formatting.
            
            <para>The name may be used as an attribute name when storing this particular
            formatting in XML format, in which case the value of the attribute
            represents the StringValue property.</para>
            </summary>
            <remarks>The name must be unique for each type of formatting.
            It may be used as a key for an indexed collection, and it may be used
            by factories to create object instances when de-serializing.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.StringValue">
            <summary>
            The value this formatting represents as a string.
            
            Formatting classes should allow their entire value to be
            retrieved and set through this property.
            
            <para>The name and string value may be used for storing the formatting as
            an XML attribute with a value.</para>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.LocalizedFormattingName">
            <summary>
            A localized representation of the formatting name. This can be used
            when displaying the formatting in a client UI.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.LocalizedStringValue">
            <summary>
            A localized representation of the formatting value. This can be used
            when displaying the formatting value in a client UI.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Implementation of the visitor pattern for formatting items
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItemFactory">
            <summary>
            This factory can be used to construct formatting items
            from name/value pair strings, e.g. when de-serializing
            formatting information.
            </summary>
            <remarks>
            <para>
            The <c>Sdl.FileTypeSupport.Framework.Core.Utilities.Formatting.FormattingItemFactory</c> class provides a default
            implementation of this interface, and it supports all strongly typed, well-known formatting types, 
            as defined in the <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor"/>. The default factory uses <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting"/>
            for anything else.
            </para>
            <para>
            If you define your own additional formatting types, you can implement your own factory to ensure
            that these types are used during de-serialization.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItemFactory.CreateFormattingItem(System.String,System.String)">
            <summary>
            Instantiates the most appropriate formatting item derived class
            and initializes it with the specified value.
            </summary>
            <remarks>
            Compares the name against all known formatting types. If it matches
            one exactly, that type is created; otherwise an <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting"/> object
            is used instead.
            </remarks>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItemFactory.CreateFormatting">
            <summary>
            Creates a new empty formatting collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor">
            <summary>
            Visitor interface for formatting items; used in <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingItem.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitBold(Sdl.FileTypeSupport.Framework.Formatting.Bold)">
            <summary>
            Called by <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.Bold"/> formatting items.
            </summary>
            <param name="item">The caller</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitItalic(Sdl.FileTypeSupport.Framework.Formatting.Italic)">
            <summary>
            Called by <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.Italic"/> formatting items.
            </summary>
            <param name="item">The caller</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitUnderline(Sdl.FileTypeSupport.Framework.Formatting.Underline)">
            <summary>
            Called by <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.Underline"/> formatting items.
            </summary>
            <param name="item">The caller</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitStrikethrough(Sdl.FileTypeSupport.Framework.Formatting.Strikethrough)">
            <summary>
            Called by <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.Strikethrough"/> formatting items.
            </summary>
            <param name="item">The caller</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitFontName(Sdl.FileTypeSupport.Framework.Formatting.FontName)">
            <summary>
            Called by <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.FontName"/> formatting items.
            </summary>
            <param name="item">The caller</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitFontSize(Sdl.FileTypeSupport.Framework.Formatting.FontSize)">
            <summary>
            Called by <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.FontSize"/> formatting items.
            </summary>
            <param name="item">The caller</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitBackgroundColor(Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor)">
            <summary>
            Called by <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.BackgroundColor"/> formatting items.
            </summary>
            <param name="item">The caller</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitTextColor(Sdl.FileTypeSupport.Framework.Formatting.TextColor)">
            <summary>
            Called by <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.TextColor"/> formatting items.
            </summary>
            <param name="item">The caller</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitTextPosition(Sdl.FileTypeSupport.Framework.Formatting.TextPosition)">
            <summary>
            Called by <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.TextPosition"/> formatting items.
            </summary>
            <param name="item">The caller</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitTextDirection(Sdl.FileTypeSupport.Framework.Formatting.TextDirection)">
            <summary>
            Called by <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.TextDirection"/> formatting items.
            </summary>
            <param name="item">The caller</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitUnknownFormatting(Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting)">
            <summary>
            Called by <see cref="T:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting"/> formatting items.
            </summary>
            <param name="item">The caller</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.Italic">
            <summary>
            Represents italic character formatting.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.Italic.Name">
            <summary>
            The string used as name for this type of formatting.
            </summary>
            <remarks>Typically used during de-serialization from key/value pair.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.Italic.LocalizedFormattingName">
            <summary>
            A localized representation of this type of formatting
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Italic.#ctor(System.Boolean)">
            <summary>
            Creates a formatting representing italic explicitly turned on or off.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Italic.#ctor">
            <summary>
            Creates a formatting representing italic explicitly turned on.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Italic.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitItalic(Sdl.FileTypeSupport.Framework.Formatting.Italic)"/> on the visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Italic.Clone">
            <summary>
            Creates a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.Strikethrough">
            <summary>
            Represents overstrike character formatting.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.Strikethrough.Name">
            <summary>
            The string used as name for this type of formatting.
            </summary>
            <remarks>Typically used during de-serialization from a key/value pair.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.Strikethrough.LocalizedFormattingName">
            <summary>
            A localized representation of this type of formatting
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Strikethrough.#ctor(System.Boolean)">
            <summary>
            Creates a formatting object indicating whether overstrike formatting should be explicitly on or off.
            </summary>
            <param name="value"><c>True</c> indicates that formatting is enabled, while <c>false</c>
            indicates that overstrike formatting is explicitly turned off (even if it was in a surrounding context)</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Strikethrough.#ctor">
            <summary>
            Default constructor, creates a formatting with overstrike formatting turned on.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Strikethrough.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitUnderline(Sdl.FileTypeSupport.Framework.Formatting.Underline)"/> on the visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Strikethrough.Clone">
            <summary>
            Creates a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.TextColor">
            <summary>
            Character formatting that represents a text color
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextColor.Name">
            <summary>
            The string used as name for this type of formatting.
            </summary>
            <remarks>Typically used during de-serialization from key/value pair.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextColor.LocalizedFormattingName">
            <summary>
            A localized representation of this type of formatting
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextColor.#ctor(System.Drawing.Color)">
            <summary>
            Creates character formatting representing a specific color.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextColor.#ctor">
            <summary>
            Constructs a text color using the default color (WindowText color from the current Windows settings).
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextColor.Equals(System.Object)">
            <summary>
            Overridden to consider equivalent colors represented by different values equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextColor.GetHashCode">
            <summary>
            Overridden to return the same hash code for the same effective color values
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextColor.Value">
            <summary>
            The color value of this formatting
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextColor.StringValue">
            <summary>
            Colors are serialized to strings either as named colors
            (e.g. Aquamarine or ActiveWindowTitleText), or as 32-bit hex values
            in the format used by the .NET ColorConverter.
            </summary>
            <remarks>
            <para>
            Setting this value to <c>null</c> sets the color to the windows default text color.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextColor.LocalizedStringValue">
            <summary>
            A localized representation of the value of this kind of formatting
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextColor.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitTextColor(Sdl.FileTypeSupport.Framework.Formatting.TextColor)"/> on the visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextColor.Clone">
            <summary>
            Creates a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.TextPosition">
            <summary>
            Represents superscript or subscript position for the formatted text.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.SuperSub">
            <summary>
            Vertical position of text relative to normally formatted text
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.SuperSub.Normal">
            <summary>
            Text is not superscript or subscript
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.SuperSub.Superscript">
            <summary>
            Superscript text
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.SuperSub.Subscript">
            <summary>
            Subscript text
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.SuperSub.Invalid">
            <summary>
            Value is unrecognized
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.Name">
            <summary>
            The string used as name for this type of formatting.
            </summary>
            <remarks>Typically used during de-serialization from a key/value pair.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.LocalizedFormattingName">
            <summary>
            A localized representation of this type of formatting.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.#ctor(Sdl.FileTypeSupport.Framework.Formatting.TextPosition.SuperSub)">
            <summary>
            Creates the text position using a specific type of position
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.#ctor">
            <summary>
            Creates the text position using the default position, <see cref="F:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.SuperSub.Normal"/>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.Value">
            <summary>
            Indicates what type of text position this formatting represents.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.StringValue">
            <summary>
            A string value representing the <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.Value"/>.
            </summary>
            <remarks>Typically used during serialization</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.LocalizedStringValue">
            <summary>
            A localized representation of the value for this formatting
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitTextPosition(Sdl.FileTypeSupport.Framework.Formatting.TextPosition)"/> on the visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.TextPosition.Clone">
            <summary>
            Creates a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.Underline">
            <summary>
            Represents underline formatting.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.Underline.Name">
            <summary>
            The string used as the name for this type of formatting.
            </summary>
            <remarks>Typically used during de-serialization from key/value pair.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.Underline.LocalizedFormattingName">
            <summary>
            A localized representation of this type of formatting
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Underline.#ctor(System.Boolean)">
            <summary>
            Creates a formatting object indicating whether underline formatting should be explicitly on or off.
            </summary>
            <param name="value"><c>True</c> indicates that formatting is enabled, while <c>false</c>
            indicates that underline formatting is explicitly turned off (even if it was on in a surrounding context).</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Underline.#ctor">
            <summary>
            Default constructor, creates a formatting with underline turned on.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Underline.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitUnderline(Sdl.FileTypeSupport.Framework.Formatting.Underline)"/> on the visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.Underline.Clone">
            <summary>
            Creates a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting">
            <summary>
            Represents a type of formatting that is unknown.
            The formatting name and its value can be retrieved from these
            properties.
            <para>Objects of this type are typically created as a result of
            parsing formatting types that are not known to the system. This class
            allows such formatting to be preserved and persisted.</para>
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting.#ctor">
            <summary>
            Empty constructor required by the spring framework to construct UnknownFormatting without formatting
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting.#ctor(System.String,System.String)">
            <summary>
            Construction from a formatting type name and a value.
            </summary>
            <param name="name">Name of the formatting type.
            <para>
            This value must be unique for all different types of formatting.
            </para>
            <para>
            The default formatting types use the value returned by <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.AbstractFormattingItem.GetDefaultName(System.Reflection.MemberInfo)"/> for their type names
            e.g. "Bold", "Italic", "FontName", etc.
            </para>
            </param>
            <param name="value">Value of formatting type, or <c>null</c> if none.</param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting.Value">
            <summary>
            The value of this formatting as a string.
            This is the same as the <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting.StringValue"/> property.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting.SetFormattingName(System.String)">
            <summary>
            Allows the name of this formatting to be explicitly set (this is a read-only
            property in the base class).
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting.FormattingName">
            <summary>
            The name of this type of the formatting
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting.LocalizedFormattingName">
            <summary>
            A localized representation of this type of formatting
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting.StringValue">
            <summary>
            Returns the value of the formatting, same as <see cref="P:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting.Value"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting.AcceptVisitor(Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.Formatting.IFormattingVisitor.VisitUnknownFormatting(Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting)"/> on the visitor.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Formatting.UnknownFormatting.Clone">
            <summary>
            Creates a clone of the unknown formatting.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractFileTypeDefinitionComponent">
            <summary>
            Convenient default implementation of <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware"/>;
            ensures synchronized access to the data member, so that components
            can be safely marked as singletons in the spring configuration files.
            </summary>
            <remarks>
            <para>
            Implementation classes are not required to derive from this base class, it merely
            serves as a convenience.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractFileTypeDefinitionComponent.#ctor">
            <summary>
            Default construction - protected as this is an abstract class.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractFileTypeDefinitionComponent.FileTypeDefinition">
            <summary>
            Implements synchronized access to this property.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController">
            <summary>
            Implement this class for single file previews. Override the required properties and methods
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.Control">
            <summary>
            The actual Windows Forms control for the preview display
            </summary>
            <remarks>
            <para>
            This property provides direct access to the control. It 
            is used by host applications that host the control to set
            its size and other standard properties.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.Refresh">
            <summary>
            Called when a document preview first needs to be been displayed and 
            subsequently each time the document preview needs to be been updated.
            </summary>
            <remarks>
            This preview control may also need to call the contained preview generator object's IAbstractPreviewGenerator.Refresh() method
            to ensure that a new preview file has been created or has been updated, and is ready to be viewed.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.RefreshPreview">
            <summary>
            RefreshPreview should be set to true in the controller if a full preview regeneration is needed
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.PreviewFile">
            <summary>
            Full path to the file that should be displayed in the preview
            </summary>
            <remarks>
            <para>
            The host application sets this path after generating the preview file before
            calling <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewControl.Refresh"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewApplication.Launch"/> in order to display the file.
            </para>
            <para>
            The file is passed through a temporary file manager, which means that it should 
            be deleted automatically when it is no longer needed.
            </para>
            </remarks>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.SegmentSelected">
            <summary>
            Raised when the user interacts with the preview, selecting
            a different segment than the one that is currently highlighted.
            </summary>
            <remarks>
            <para>
            The host application typically handles this event by 
            changing the active segment in the editor to the one that the
            user has selected in the preview.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.PreferredHighlightColor">
            <summary>
            Set by the host application to indicate the preferred color
            to be used for highlighting the current segment in the preview
            when <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.NavigateToSegment(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference)"/> is called.
            </summary>
            <remarks>
            <para>
            Using the highlight color is optional, but leads to an enhanced
            user experience. This will typically be the same
            color as the background color that is used for the active segment row
            in the editor, which makes it easier for the user to see that
            the two segments (i.e. from the bilingual document and the preview) relate to each other.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.NavigateToSegment(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference)">
            <summary>
            Called by the host application to request that 
            the preview should scroll to the specified segment.
            </summary>
            <param name="segment"></param>
            <remarks>
            <para>
            The implementation may specifically highlight
            the segment in the preview (if possible).
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.FileTypeDefinition">
            <summary>
            FileTypeDefinition
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.CreateSegmentFile(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference)">
            <summary>
            Called when a segment file should be created
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.UpdatePreviewFromSegmentFile(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference,Sdl.FileTypeSupport.Framework.TempFileManager)">
            <summary>
            Called when the Preview should be updated from a segment file
            </summary>
            <param name="segment"></param>
            <param name="translatedSegmentFile"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.TargetFilePath">
            <summary>
            Full path to the target language file that is overwritten when
            the preview is refreshed. This path is typically set once and stays unchanged during
            the lifetime of the preview.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.BeforeFileRefresh">
            <summary>
            Called by the host application when the preview is about to be updated,
            before the file at <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.TargetFilePath"/> is overwritten.
            </summary>
            <remarks>
            <para>
            This call allows the implementation to release
            any file locks and/or try to 'remember' the current location of the file
            before it is overwritten.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.AfterFileRefresh">
            <summary>
            Called by the host application after the preview file has been successfully
            overwritten.
            </summary>
            <remarks>
            <para>
            The implementation typically re-loads (refreshes) the file in the preview
            and (if necessary) navigates to the previously displaying content.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSingleFileRefreshablePreviewController.OnSegmentSelected(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentSelectedEventArgs)">
            <summary>
            Called to fire the SegmentSelected event
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController">
            <summary>
            Implement this class for source and target (side-by-side) previews. Override the required properties and methods
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.Control">
            <summary>
            The actual Windows Forms control for the preview display
            </summary>
            <remarks>
            <para>
            This property provides direct access to the control. It 
            is used by host applications that host the control to set
            its size and other standard properties.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.Refresh">
            <summary>
            Called when a document preview first needs to be been displayed and 
            subsequently each time the document preview needs to be been updated.
            </summary>
            <remarks>
            This preview control may also need to call the contained preview generator object's IAbstractPreviewGenerator.Refresh() method
            to ensure that a new preview file has been created or has been updated, and is ready to be viewed.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.RefreshPreview">
            <summary>
            RefreshPreview should be set to true in the controller if a full preview regeneration is needed
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.SourcePreviewFile">
            <summary>
            Full path to the source language file. This should be set by the
            application before the first call to <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewApplication.Launch"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewControl.Refresh"/>.
            </summary>
            <remarks>
            The file is passed through a temporary file manager, which means that it should 
            be deleted automatically when it is no longer needed.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.TargetPreviewFile">
            <summary>
            Full path to the target language file, which should be set by the
            application before the first call to <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewApplication.Launch"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewControl.Refresh"/>.
            </summary>
            <remarks>
            The file is passed through a temporary file manager, which means that it should automatically
            get deleted when no longer needed.
            </remarks>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.SegmentSelected">
            <summary>
            Raised when the user interacts with the preview, selecting
            a different segment than the one that is currently highlighted.
            </summary>
            <remarks>
            <para>
            The host application typically handles this event by 
            changing the active segment in the editor to the one that the
            user has selected in the preview.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.PreferredHighlightColor">
            <summary>
            Set by the host application to indicate the preferred color
            to be used for highlighting the current segment in the preview
            when <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.NavigateToSegment(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference)"/> is called.
            </summary>
            <remarks>
            <para>
            Using the highlight color is optional, but leads to an enhanced
            user experience. This will typically be the same
            color as the background color that is used for the active segment row
            in the editor, which makes it easier for the user to see that
            the two segments (i.e. from the bilingual document and the preview) relate to each other.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.NavigateToSegment(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference)">
            <summary>
            Called by the host application to request that 
            the preview should scroll to the specified segment.
            </summary>
            <param name="segment"></param>
            <remarks>
            <para>
            The implementation may specifically highlight
            the segment in the preview (if possible).
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.TargetFilePath">
            <summary>
            Full path to the target language file that is overwritten when
            the preview is refreshed. This path is typically set once and stays unchanged during
            the lifetime of the preview.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.BeforeFileRefresh">
            <summary>
            Called by the host application when the preview is about to be updated,
            before the file at <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.TargetFilePath"/> is overwritten.
            </summary>
            <remarks>
            <para>
            This call allows the implementation to release
            any file locks and/or try to 'remember' the current location of the file
            before it is overwritten.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.AfterFileRefresh">
            <summary>
            Called by the host application after the preview file has been successfully
            overwritten.
            </summary>
            <remarks>
            <para>
            The implementation typically re-loads (refreshes) the file in the preview
            and (if necessary) navigates to the previously displaying content.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.AbstractSourceAndTargetFileRefreshablePreviewController.OnSegmentSelected(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentSelectedEventArgs)">
            <summary>
            Called to fire the SegmentSelected event
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IDefaultFileTypeSettingsProvider">
            <summary>
            Interface representing a file type able to pass all its default settings to outside callers.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IDefaultFileTypeSettingsProvider.PopulateDefaultSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)">
            <summary>
            Populates a given settings bundle with all the default settings used by the file type.
            Each setting must be stored with its explicit default value.
            </summary>
            <param name="settingsBundle">The settings bundle to populate with the default values.</param>
            <param name="fileTypeConfigurationId">Id for the settings group that file type specific settings should be stored in.</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISingleFileRefreshablePreview">
            <summary>
            Interface which amalgamates all other required interfaces for single file preview
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISingleFileRefreshablePreview.RefreshPreview">
            <summary>
            RefreshPreview should be set to true in the controller if a full preview regeneration is needed
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISourceAndTargetFileRefreshablePreview">
            <summary>
            Interface which amalgamates all other required interfaces for Source and Target (SideBySide) preview
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISourceAndTargetFileRefreshablePreview.RefreshPreview">
            <summary>
            RefreshPreview should be set to true in the controller if a full preview regeneration is needed
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator">
            <summary>
            Represents a set of bilingual content processors, native content 
            processors, and a native writer, which work together to output native files
            from bilingual content.
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.Message">
            <summary>
            Raised when a message is reported by a file type component.
            </summary>
            <remarks>
            The file path property needs not be set in the event args.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.ItemFactory">
            <summary>
            The framework will set this property as part of the initialization.
            
            While building bilingual components this factory should be used to create any items
            that are inserted in the bilingual content model.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.NativeOutputProperties">
            <summary>
            Properties and settings used when writing the native file.
            If set, these properties are communicated to all file type components 
            that implement the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware"/> interface.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.Input">
            <summary>
            All content input to the converter is passed as calls on this interface.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.NativeSubContentGenerator">
            <summary>
            The components used to output native content to a file in native format in the source or target language.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.ToNativeConverter">
            <summary>
            The component used when converting bilingual content into native source or target content.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.BilingualWriter">
            <summary>
            Writer for a bilingual output format, or <c>null</c> if a native output format is used.
            </summary>
            <remarks>
            <para>
            This is intended for writers of bilingual formats representing single files (e.g. TTX, ITD, etc.). It is NOT for 
            bilingual document writers (e.g. SDL XLIFF). Those should rather be used with a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator"/>.
            </para>
            <para>
            When a bilingual writer is set, the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.ToNativeConverter"/> and the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.NativeSubContentGenerator"/>
            are not used.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.AllComponents">
            <summary>
            Called by the framework during component initialization to initialize components
            that implement special interfaces such as <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjectsAware"/> before
            processing starts.
            </summary>
            <returns>All native and bilingual file type components</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.AddFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePostTweaker)">
            <summary>
            Appends a file tweaker that will be used to modify the output file after generating.
            </summary>
            <param name="tweaker"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.FileTweakers">
            <summary>
            The file tweakers used by the generator, in the
            order in which they will be invoked.
            
            File tweakers should be added using <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.AddFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePostTweaker)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.RemoveFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePostTweaker)">
            <summary>
            Removes the tweaker from the generator.
            </summary>
            <param name="tweakerToRemove">The file tweaker to remove</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.AddNativeVerifier(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileVerifier)">
            <summary>
            Appends a native verifier that will be run on the output file after it has been generated.
            </summary>
            <param name="verifier">The native verifier to add</param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.NativeVerifiers">
            <summary>
            The native verifiers that are currently used by the generator.
            
            Verifiers should be added using <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator.AddNativeVerifier(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileVerifier)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentComponentBuilder">
            <summary>
            Interface which is implemented by sub-content component builders
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentComponentBuilder.BuildSubContentExtractor(System.String)">
            <summary>
            Gets the sub-content extractor for this component.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentComponentBuilder.BuildSubContentGenerator(System.String)">
            <summary>
            Gets the sub-content generator for this component.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor">
            <summary>
            Represents a native parser with native components (or a bilingual parser) and bilingual content
            processors used when reading native or bilingual file.
            </summary>
            <remarks>
            The output from the reading operation consists of calls that are generated on 
            the <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler"/> instance
            specified by setting the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.Output"/> property.
            </remarks>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.Progress">
            <summary>
            Fired when progress is reported from the parser.
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.ProcessSubContent">
            <summary>
            Fired when sub-content needs to be processed
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.Message">
            <summary>
            Raised when a message is reported from a file type component.
            </summary>
            <remarks>
            The file path property does not need to be set in the event args.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.ItemFactory">
            <summary>
            The framework will set this property as part of the initialization.
            
            Bilingual components should use this factory to create any items
            that are inserted in the bilingual content model.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.DocumentInfo">
            <summary>
            Common document properties communicated to all bilingual file type components
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.FileConversionProperties">
            <summary>
            This object will be passed to each of the file type components during initialization.
            Ensure that this property is configured properly before calling <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.Parse"/>.
            File type components may change these properties, e.g. to store dynamic settings. To ensure that such settings
            are preserved for future conversion operations, these properties should be retrieved after successful parsing,
            and stored for re-use e.g. by persisting them to the bilingual file format.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.Output">
            <summary>
            This object (if not null) receives calls that represent the
            output from the file reading process.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.BilingualParser">
            <summary>
            Parser for reading a bilingual input file, or <c>null</c> to read native input files.
            </summary>
            <remarks>
            <para>
            If set, the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.NativeSubContentExtractor"/> and the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.ToBilingualConverter"/> are not used.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.NativeSubContentExtractor">
            <summary>
            Used for reading a native input file.
            </summary>
            <remarks>
            <para>
            Not used if a <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.BilingualParser"/> has been set.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.Parse">
            <summary>
            Reads the entire content of the input file.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.ParseNext">
            <summary>
            Reads the next piece of content from the input file.
            </summary>
            <returns>True if there is more content in the file to be processed, false if not.</returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.ToBilingualConverter">
            <summary>
            The component used to convert native input to bilingual content
            </summary>
            <remarks>
            <para>
            Not used if a <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.BilingualParser"/> has been set.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.AllComponents">
            <summary>
            Called by the framework during component initialization to detect and initialize
            parser components that implement special interfaces such as <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjectsAware"/>.
            </summary>
            <returns>All native and bilingual file type components</returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.SettingsBundle">
            <summary>
            Settings used by processing components in the extractor
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor.GetParser">
            <summary>
            Gets the native or bilingual parser
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder">
            <summary>
            DynamicFilterComponentBuilder class allows an inheriting class to effectively create a new file type based upon an existing file type.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor that takes the base file type definition id, file type definition id, and file type name.
            </summary>
            <param name="baseFileTypeDefinitionId">base file type definition id</param>
            <param name="fileTypeDefinitionId">file type definition id</param>
            <param name="fileTypeName">file type name</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.GetFileTypeComponentBuilder(System.String)">
            <summary>
            Gets the file type component builder.
            </summary>
            <param name="fileTypeDefinitionId">file type definition id</param>
            <returns>file type component builder</returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.FileTypeManager">
            <summary>
            FileTypeManager property represents the file type manager.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.FileTypeDefinition">
            <summary>
            FileTypeDefinition property represents the file type definition.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.BuildFileTypeInformation(System.String)">
            <summary>
            Builds the file type information.
            </summary>
            <param name="name">name</param>
            <returns>file type information</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.BuildFileSniffer(System.String)">
            <summary>
            Builds the file sniffer.
            </summary>
            <param name="name">name</param>
            <returns>file sniffer</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.BuildFileExtractor(System.String)">
            <summary>
            Builds the file extractor
            </summary>
            <param name="name">name</param>
            <returns>file extractor</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.BuildFileGenerator(System.String)">
            <summary>
            Builds the file generator.
            </summary>
            <param name="name">name</param>
            <returns>file generator</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.BuildQuickTagsFactory(System.String)">
            <summary>
            Builds the quick tags factory.
            </summary>
            <param name="name">name</param>
            <returns>quick tags factory</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.BuildPreviewSetsFactory(System.String)">
            <summary>
            Builds the preview sets factory.
            </summary>
            <param name="name">name</param>
            <returns>preview sets factory</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.BuildVerifierCollection(System.String)">
            <summary>
            Builds the verifier collection.
            </summary>
            <param name="name">name</param>
            <returns>verifier collection</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.BuildPreviewApplication(System.String)">
            <summary>
            Builds the preview application.
            </summary>
            <param name="name">name</param>
            <returns>preview application</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.BuildPreviewControl(System.String)">
            <summary>
            Builds the preview control.
            </summary>
            <param name="name">name</param>
            <returns>preview control</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.BuildAbstractGenerator(System.String)">
            <summary>
            Builds the abstract generator. 
            </summary>
            <param name="name">name</param>
            <returns>abstract generator</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.BuildAdditionalGeneratorsInfo(System.String)">
            <summary>
            Builds the additional generators info. 
            </summary>
            <param name="name">name</param>
            <returns>additional generators info</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.BuildBilingualGenerator(System.String)">
            <summary>
            Builds the bilingual generator.
            </summary>
            <param name="name">name</param>
            <returns>bilingual generator</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.DynamicFilterComponentBuilder.PopulateDefaultSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)">
            <summary>
            The dynamic filter component builder has no settings to save.
            </summary>
            <param name="settingsBundle">The settings bundle to populate with the default values.</param>
            <param name="fileTypeConfigurationId">Unused.</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ExtendedMessageEventData">
            <summary>
            ExtendedMessageEventData class represents extended message event data within message event arguments.
            The extended message event data includes the message type property. It is expected that developers will
            inherit from this class to include further properties specific to the message. For example, segment verifier
            developers could inherit from ExtendedMessageEventData to include further verification message properties to
            help describe and display verification messages to the user.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ExtendedMessageEventData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ExtendedMessageEventData.MessageType">
            <summary>
            MessageType property represents the message type e.g. "Sdl.FileTypeSupport.Filters.Verifiers.QAChecker.ProcessorNumbers; Extra number in target segment."
            The message type string should be unique for each message so it should refer to specific messages and not broad classes of messages. This message type
            property is optional and can be null but it is recommended that the message type is supplied. It is important to note that the MessageType property is
            not intended to be displayed to the user and should not be localised.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.BatchProgressEventArgs">
            <summary>
            Properties of a progress event in a batch process
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.BatchProgressEventArgs.#ctor(System.String,System.Int32,System.Int32,System.Byte)">
            <summary>
            Construct with explicitly specified progress information.
            </summary>
            <param name="filePath">path to the file being processed</param>
            <param name="fileNumber">file number in the batch, 0 is the first file</param>
            <param name="totalFiles">total files in the batch</param>
            <param name="filePercentComplete">percent completed for the current file in the batch</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.BatchProgressEventArgs.ToString">
            <summary>
            For debugging purposes, shows the file number and the progress in a non-localized format.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.BatchProgressEventArgs.FilePath">
            <summary>
            Path of the file being processed
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.BatchProgressEventArgs.FileNumber">
            <summary>
            Zero-based index indicating the file number in the batch
            for the file being processed.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.BatchProgressEventArgs.TotalFiles">
            <summary>
            Total number of files in batch
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.BatchProgressEventArgs.FilePercentComplete">
            <summary>
            Value between 0 and 100 (inclusive) indicating the progress of the 
            file currently being processed.
            </summary>
            <remarks>
            <para>
            Note that this is the percent completed for the current file only, NOT the 
            percent completed for the batch.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider">
            <summary>
            This delegate is used with <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter"/> to determine the output properties
            for bilingual document files (e.g. SDL XLIFF). The implementation should set the relevant
            properties on the outputProperties object, supported by proposedFileInfo as required.
            </summary>
            <param name="outputProperties">The delegate implementation should
            set the actual output properties to be used on this object.</param>
            <param name="documentInfo"></param>
            <param name="proposedFileInfo">Proposed name, etc. for the bilingual document file, 
            as suggested by the file type components. Can be used when showing a File Save As dialog.</param>
            <remarks>
            <para>
            After successful processing in the multi-file converter, the actual bilingual output
            properties that are used can be retrieved by accessing <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.BilingualDocumentOutputProperties"/>.
            The host application requires this information to find out whether any dependency files were 
            linked (as opposed to embedded), and will therefore need to be made available when the 
            output file is opened in a different location or on a different machine.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualVerifiersProvider">
            <summary>
            Delegate that is used to supply bilingual verifiers to the file extractor in order to perform the verification
            </summary>
            <param name="fileTypeDefinitionToUse"></param>
            <returns>The list of IBilingualVerifier objects to use</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeComponentBuilderAttribute">
            <summary>
            Apply this attribute to a class implementing Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.
            </summary>
            <remarks>
            <para>
            File type component builder typically also implement <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeComponentBuilderAttribute.#ctor">
            <summary>
            Default constructor; see base class for documentation.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeComponentBuilderAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct with id, name and description. See base class for parameter documentation.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeComponentBuilderAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Construct with id, name and description and isTemplate. See base class for parameter documentation.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="isTemplate"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeComponentBuilderAttribute.IsTemplate">
            <summary>
            Indicates if this component builder is a FileTypeCreator template
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeComponentBuilderExtensionAttribute">
            <summary>
            Apply this attribute to a class implementing Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder. This should be used for extension ComponentBuilders only
            </summary>
            <remarks>
            <para>
            File type component builder typically also implement <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeComponentBuilderExtensionAttribute.OriginalFileType">
            <summary>
            The Original File Type Component Builder ID
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeComponentBuilderExtensionAttribute.#ctor">
            <summary>
            Default constructor; see base class for documentation.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeComponentBuilderExtensionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct with id, name and description. See base class for parameter documentation.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeCreatorAttribute">
            <summary>
            Attribute to mark a class as a FileTypeCreator
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeCreatorAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeCreatorAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeCreatorWizardPage">
            <summary>
            A wizard page data object. Used by the FileType Configuration implementation to hold the data required for the construction of the Wizard page
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeCreatorWizardPage.#ctor(System.String,System.String,System.String,System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionConfiguringControl)">
            <summary>
            Constructor for Wizard Page data object
            </summary>
            <param name="id">ID of Wizard Page</param>
            <param name="name">Name of Wizard Page</param>
            <param name="description">Description of Wizard Page</param>
            <param name="helpTopic">Help Topic for Wizard Page</param>
            <param name="control">Control which Wizard page will host</param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeCreatorWizardPage.Id">
            <summary>
            Id of Wizard page
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeCreatorWizardPage.Name">
            <summary>
            Name of Wizard page
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeCreatorWizardPage.Description">
            <summary>
            Description of Wizard page
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeCreatorWizardPage.HelpTopic">
            <summary>
            Help Topic for Wizard page
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeCreatorWizardPage.Control">
            <summary>
            Control which Wizard page will host
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile">
            <summary>
            This class is a collection of data that's required to build up an XML chunk for file type information override
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.FileTypeDefinitionId">
            <summary>
            Unique file type definition identifier.
            The convention is to use the following format: "[Document Type] [Document Type Version] v [File Type Definition version]",
            where the file type definition version is a four digit version number.
            Example: "SDL XLIFF 1.0 v 1.0.0.0", for version 1.0.0.0 of the file type definition for 
            the SDL XLIFF file format, version 1.0, or "Microsoft Word 2007 v 1.1.0.0", and so on.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.FileTypeName">
            <summary>
            Friendly name for the file type, which may be shown to the user.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.FileTypeDocumentName">
            <summary>
            Friendly name of the type of an individual file of this file type. This is used
            when referring to a single item, e.g. in a File Save As dialog.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.FileTypeDocumentsName">
            <summary>
            Friendly name of a set of files of this file type. This name is used when referring
            to a collection of files, e.g. in a File Open dialog.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.FileDialogWildcardExpression">
            <summary>
            The wildcard expression shows up with the file type name in File Open dialogs.
            <para>
            This is used both for displaying and for filtering file types in the file dialog.
            </para>
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile._expression">
            <summary>
            _expression is a data member used to persist the Expression property.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.Expression">
            <summary>
            This regular expression is applied to the file name to determine if it matches,
            when the file is about to be opened. It provides more control than the wildcard
            name that is used in the open dialog.
            
            If this property is null, the FileDialogWildcardExpression is used instead.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.IsStandardCustomization">
            <summary>
            Returns true when FileTypeProfile is used to override Standard File Type Definition rather than
            creating custom one.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.Description">
            <summary>
            Descriptive text for the file type definition.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.IconContent">
            <summary>
            Icon base-64 content.
            </summary>
            <remarks>
            If null then the icon from the underlying file type definition would be used.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.ExtensionData">
            <summary>
            ExtensionData stores data not in the contract and allows round tripping between different versions.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.GetFileTypeProfile(System.String)">
            <summary>
            Gets the file type profile from the given file type profile xml.
            </summary>
            <param name="fileTypeProfileXml">file type profile xml</param>
            <returns>file type profile</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.GetFileTypeProfileXml(Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)">
            <summary>
            Gets the file type profile xml from the given file type profile.
            </summary>
            <param name="fileTypeProfile">file type profile</param>
            <returns>file type profile xml</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile.ApplyProfile(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition,Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)">
            <summary>
            Applies the profile to the provided file type definition
            </summary>
            <param name="fileTypeDefinition">The file type definition to override with the profile.</param>
            <param name="fileTypeProfile">The profile to use.</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId">
            <summary>
            Type safe wrapper around an id for a native or bilingual document generator
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId.Default">
            <summary>
            Id value that can be used to represent the default generator for a file type
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId.#ctor(System.String)">
            <summary>
            Creates from a string id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId.Id">
            <summary>
            The id for this preview type as a string
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId.ToString">
            <summary>
            The id as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId.Equals(System.Object)">
            <summary>
            Returns <c>true</c> if the objects have the same id value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId.GetHashCode">
            <summary>
            Returns a hash code based on the id value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId.op_Equality(Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId,Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId)">
            <summary>
            Returns <c>true</c> if the two ids have the same <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId.Id"/> value.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId.op_Inequality(Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId,Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId)">
            <summary>
            Returns <c>true</c> if the two ids have different <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId.Id"/> values.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractGenerator">
            <summary>
            Common base interface for native and bilingual document generators
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewApplication">
            <summary>
            Common base interface for managing standalone applications
            that are used for previews.
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewApplication.PreviewClosed">
            <summary>
            The implementation may raise this event to notify the host application
            when the standalone application no longer needs to be tracked, e.g. when the
            file that is being previewed is closed, or when the preview application is closed. 
            </summary>
            <remarks>
            This signals to the host application that temp files, etc. can be
            cleaned up.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewApplication.Launch">
            <summary>
            The host application calls this to launch the preview applications.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewApplication.NotifyCanClose">
            <summary>
            The host application may call this when the external preview is no longer
            expected to be needed, e.g. when the file that is being worked on is closed
            or when a new preview is about to be launched.
            </summary>
            <remarks>
            The implementation may attempt to close the application and/or preview file at this point,
            or it may ignore this call and leave it up to the user to
            close the application manually.
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewController">
            <summary>
            Common base interface for preview controllers, currently specialized into
            IAbstractPreviewControl derivatives and IAbstractPreviewApplication derivatives.
            </summary>
            <remarks>
            <para>
            Any preview controller implementation may provide additional services by implementing
            interfaces such as <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.INavigablePreview"/>.
            </para>
            <para>
            Preview controllers may want to use persistent settings, e.g. to use the same user defined
            display settings every time the preview is shown. If so, the controller should implement
            <c>Sdl.Core.Settings.ISettingsBundleAware</c>, and use a settings group to store
            its settings. If the host application supports settings bundles, this interface will
            be tested for and used.
            </para>
            <para>
            It is recommended (but not required) that preview controllers implement 
            <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractUpdatablePreview">
            <summary>
            Base interface for previews that can be dynamically updated as
            content in the editor changes.
            </summary>
            <remarks>
            <para>
            There are two separate protocols for updating 
            previews: <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewUpdatedViaSegmentFile"/> and 
            <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewUpdatedViaRefresh"/>, both of which are derived
            from this base interface.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IApplicationPreviewType">
            <summary>
            Interface implemented by preview types that provide a mechanism
            to launch an external application to view the content.
            </summary>
            <remarks>
            <para>
            Two types of preview applications can be provided: single file and "source and
            target" (typically side-by-side). The implementation can provide either
            or both of these.
            </para>
            <para>
            Host applications can check these ids to determine which launch
            buttons/tabs should be available in the UI for a specific preview type.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IApplicationPreviewType.SingleFilePreviewApplicationId">
            <summary>
            Id for preview application implementation that can be used
            to launch a preview for a single (source or target language) file.
            </summary>
            <remarks>
            This id can be passed to <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildPreviewApplication(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId)"/> to create
            an instance of the application, which should implement <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISingleFilePreviewApplication"/>.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IApplicationPreviewType.SourceAndTargetPreviewApplicationId">
            <summary>
            Id of the preview application implementation, which can be used
            to launch a preview for both source and target files.
            </summary>
            <remarks>
            This id can be passed to <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildPreviewApplication(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId)"/> in order to create
            an instance of the application, which should implement <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISourceAndTargetFilePreviewApplication"/>.
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor">
            <summary>
            Represents an icon that is loaded from a file path, from an embedded resource, or from a base64-encoding string.
            </summary>
            <remarks>
            <para>Can also represent an empty icon (see <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.IsEmpty"/>).</para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.#ctor">
            <summary>
            Creates an empty icon descriptor.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.#ctor(System.String)">
            <summary>
            Creates an icon that is loaded from the specified location.
            </summary>
            <param name="imageLocation">
            The location of the icon; this can be an absolute file path, or a string of the form &amp;assembly://[assemblyname]/[resourceid]&amp;.
            </param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.#ctor(System.String,System.String)">
            <summary>
            Creates an icon loaded from a base64-encoded string.
            </summary>
            <param name="originalLocation">The location from which the icon was originally loaded</param>
            <param name="content">A base64-encoded string containing the icon content</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.#ctor(System.Drawing.Icon)">
            <summary>
            Creates an icon from an icon.
            </summary>
            <param name="icon">The icon</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.Create(System.String)">
            <summary>
            Factory method used by the spring framework
            </summary>
            <param name="imageLocation"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.Create(System.String,System.String)">
            <summary>
            Factory method used by the spring framework
            </summary>
            <param name="location">Path to the icon file</param>
            <param name="content">Icon file content</param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.OriginalLocation">
            <summary>
            Gets the location from which the icon was originally loaded from.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.IsEmpty">
            <summary>
            Returns true if this descriptor does not actually contain an icon.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.IsEmbedded">
            <summary>
            Returns true if the original location of this icon was an embedded resource.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.IsValid">
            <summary>
            Returns true if the icon is available.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.Content">
            <summary>
            Gets the base64-encoded content of the icon.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.GetImage">
            <summary>
            Creates an image from this icon.
            </summary>
            <returns>A new image of the default size</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.GetImage(System.Drawing.Size)">
            <summary>
            Creates an image with a specific size from this icon.
            </summary>
            <param name="size">The desired image size, or <see cref="F:System.Drawing.Size.Empty"/> for the default size.</param>
            <returns>A new image</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.GetIcon">
            <summary>
            Gets an instance of the icon.
            </summary>
            <returns>A new icon instance of the default size.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the underlying resource content is not an icon</exception>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IconDescriptor.GetIcon(System.Drawing.Size)">
            <summary>
            Gets an instance of the icon with the specified size.
            </summary>
            <param name="size">Desired icon size, or <see cref="F:System.Drawing.Size.Empty"/> for the default size</param>
            <returns>A new icon instance</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IControlPreviewType">
            <summary>
            Interface implemented by preview types that provide controls, which can be
            shown in the host application for viewing the preview content.
            </summary>
            <remarks>
            <para>
            Two types of controls can be provided: single file and source and
            target (typically side-by-side). A control preview can provide either
            or both of these.
            </para>
            <para>
            Host applications can check these preview control ids to determine which preview
            buttons/tabs should be available in the UI for a specific preview type.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IControlPreviewType.SingleFilePreviewControlId">
            <summary>
            Identifier for the preview control used to display a single source or target preview file, or <c>null</c>
            if no control has been specified for viewing single files in this preview.
            </summary>
            <remarks>
            This id can be passed to <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildPreviewControl(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId)"/> in order to create
            an instance of the preview control, which should implement <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISingleFilePreviewControl"/>.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IControlPreviewType.SourceAndTargetPreviewControlId">
            <summary>
            Identifier for the preview control used to display source and target preview files
            side-by-side, or <c>null</c> if side-by-side preview is not supported for this preview type.
            </summary>
            <remarks>
            This id can be passed to <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildPreviewControl(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId)"/> in order to create
            an instance of the preview control, which should implement <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISourceAndTargetFilePreviewControl"/>.
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo">
            <summary>
            Collection of information on the extra generators that are specified for this file type
            in addition to the default generator. These generators will be used for tasks such as
            previewing the file and generating the original document format from older bilingual formats (ITD and TTX).
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo.Generators">
            <summary>
            The list of information on the additional generators
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilderAdapter">
            <summary>
            Adapter interface for FileType extensions
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilderAdapter.Original">
            <summary>
            Original IFileTypeComponentBuider
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeCreator">
            <summary>
             Object that controls the creation of a new file type from an existing base file type definition. This object will use the 
             IFileTypeConfigurer specified in the configurer property to supply the custom settings for the 
             new file type.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeCreator.Description">
            <summary>
            A description of the file type that will be created by the IFileTypeCreator. Suitable for use in a hosting application
            to describe the new file type in the UI.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeCreator.TemplateComponentBuilder">
            <summary>
            Component builder used for creation of this new FileType
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeCreator.CreateWizardPages(Sdl.Core.Settings.ISettingsBundle)">
            <summary>
            Creates the wizard pages to configure the new file type.
            </summary>
            <param name="settingsBundle">settings bundle</param>
            <returns>wizard pages</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware">
            <summary>
            This interface is implemented by components that are instantiated
            through a file type definition. The framework sets the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware.FileTypeDefinition"/>
            property when a component is instantiated using a file type definition.
            </summary>
            <remarks>
            <para>
            API clients can use this interface to determine which file type definition
            (if any) was used to instantiate a specific component.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware.FileTypeDefinition">
            <summary>
            The framework sets this property for components that are
            instantiated from a file type definition.
            </summary>
            <remarks>
            <para>
            This property may be <c>null</c>, e.g. if the 
            component is not instantiated from a file type definition.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionFactory">
            <summary>
            Factory for file type definitions. This is typically accessed from 
            <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitionFactory"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionFactory.CreateFromFile(System.String)">
            <summary>
            Create a file type definition from an *.sdlfiletype file, transforming the
            file content if necessary to support older file type definition files.
            </summary>
            <remarks>
            <para>
            If the file is in an older format, the content will be adopted after
            it has been read, so that it can be used with this version of the framework
            (if possible).
            </para>
            </remarks>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionFactory.CreateFromResource(System.String)">
            <summary>
            Create a file type definition from the specified path or resource, without adapting the
            content to support older file type definitions.
            </summary>
            <remarks>
            <para>
            The path can be any type of path that is supported by the factory implementation. 
            The default factory implementation supports, for example:
            </para>
            <list type="bullet">
            <item>A file on disk: <c>C:\My Documents\MyFileType.sdlfiletype</c></item>
            <item>An embedded resource in an assembly: <c>assembly://MyAssembly/ResourceNamespace/ResourceId</c></item>
            <item>A URI: http://my.company.com/my-filetype-definition</item>
            </list>
            <para>
            No detection and adaptation of older file type definitions will be attempted when using this factory method.
            </para>
            </remarks>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionFactory.ApplyFileTypeInformation(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition,Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)">
            <summary>
            Modify all or parts of the file type information in the file type definition by
            applying properties defined in the file type profile.
            </summary>
            <param name="definition">the file type definition to be modified</param>
            <param name="fileTypeProfile">the file type profile</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionConfiguringControl">
            <summary>
            Used by the Configuration Wizard to save the state of a control
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionConfiguringControl.FileTypeDefintionId">
            <summary>
            Sets the FileTypeDefinitionId for use with underlying settings implementation
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionConfiguringControl.Save">
            <summary>
            Saves the control's state to the underlying settings implementation
            </summary>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo">
            <summary>
            Information on a generator component that is specified for the file type
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo.Id">
            <summary>
            The id of the generator
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo.Description">
            <summary>
            Description of the generator; this will be used in the host application UI 
            to describe the result of using this generator (e.g. 'Save as native file').
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.Implementation.FileTypeCreator">
            <summary>
            FileTypeCreator - used during the creation process of a new file type flavour
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.Implementation.FileTypeCreator.Description">
            <summary>
            A description of the file type that will be created by the IFileTypeCreator.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.Implementation.FileTypeCreator.TemplateComponentBuilder">
            <summary>
            Component builder used for creation of this new FileType
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.Implementation.FileTypeCreator.CreateWizardPages(Sdl.Core.Settings.ISettingsBundle)">
            <summary>
            Creates the wizard pages to configure the new file type.
            </summary>
            <param name="settingsBundle">settings bundle</param>
            <returns>wizard pages</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.INavigablePreview">
            <summary>
            Provides services for navigating in a preview, to
            highlight a specific segment in the preview, and to
            generate events when the user selects a segment in the 
            preview.
            </summary>
            <remarks>
            Preview implementations may choose to provide only 
            part of this functionality, e.g. they might let the host application
            highlight a segment, but may not support users selecting
            as segment in the preview. It is up to the implementation
            to choose what to support, and simply provide no implementation
            for the other parts of this interface.
            </remarks>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.INavigablePreview.SegmentSelected">
            <summary>
            Raised when the user interacts with the preview, selecting
            a different segment than the one that is currently highlighted.
            </summary>
            <remarks>
            <para>
            The host application typically handles this event by 
            changing the active segment in the editor to the one that the
            user has selected in the preview.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.INavigablePreview.PreferredHighlightColor">
            <summary>
            Set by the host application to indicate the preferred color
            to be used for highlighting the current segment in the preview
            when <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.INavigablePreview.NavigateToSegment(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference)"/> is called.
            </summary>
            <remarks>
            <para>
            Using the highlight color is optional, but leads to an enhanced
            user experience. This will typically be the same
            color as the background color that is used for the active segment row
            in the editor, which makes it easier for the user to see that
            the two segments (i.e. from the bilingual document and the preview) relate to each other.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.INavigablePreview.NavigateToSegment(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference)">
            <summary>
            Called by the host application to request that 
            the preview should scroll to the specified segment.
            </summary>
            <param name="segment"></param>
            <remarks>
            <para>
            The implementation may specifically highlight
            the segment in the preview (if possible).
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetKind">
            <summary>
            Used by the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSet.PreviewSetKind"/> property to
            indicate whether a preview set contains application or control previews.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetKind.ApplicationPreviews">
            <summary>
            The set contains only <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IApplicationPreviewType"/> instances.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetKind.ControlPreviews">
            <summary>
            The set contains only <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IControlPreviewType"/> instances.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetKind.Mix">
            <summary>
            The set contains a mix of application and control preview types.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetKind.Undefined">
            <summary>
            None of the preview types in the set are <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IApplicationPreviewType"/>
            or <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IControlPreviewType"/> instances.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSet">
            <summary>
            A group of preview types that has a common name and that can be
            assigned to a group of source/target/side-by-side preview commands
            in the user interface.
            </summary>
            <remarks>
            <para>
            This can be a set of application previews or a set of control previews,
            or a mix of these (discouraged). Check the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSet.PreviewSetKind"/> property to
            find out which one applies.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSet.Id">
            <summary>
            Unique identifier for this preview type within the file type definition.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSet.Name">
            <summary>
            Descriptive name of the preview, which may be shown to the user.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSet.Description">
            <summary>
            Description of the preview (optional)
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSet.PreviewSetKind">
            <summary>
            Convenient way of determining whether this preview set represents application
            previews or control previews (or a mix of both, which is not recommended).
            </summary>
            <remarks>
            <para>
            The implementation checks whether the source, target and side-by-side preview types
            implement <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IApplicationPreviewType"/> or <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IControlPreviewType"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSet.Source">
            <summary>
            The preview type that should be treated as a source language preview in the user interface,
            or <c>null</c> if there is no such preview in this set.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSet.SideBySide">
            <summary>
            The preview type that should be treated as a source and target language, side-by-side
            preview in the user interface, or <c>null</c> if there is no such preview in this set.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSet.Target">
            <summary>
            The preview type that should be treated as a target language preview in the user interface,
            or <c>null</c> if there is no such preview in this set.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSetsFactory">
            <summary>
            Interface used for instantiating a set of preview types available
            for a specific file. 
            </summary>
            <remarks>
            <para>Normally accessed via <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildPreviewSetsFactory"/>.</para>
            <para>
            The set of available preview types for a file type sometimes depends on 
            the actual file itself (e.g. for TTX where the underlying file
            format can vary significantly). However, for most file formats
            the set is the same for all document instances. You can check the
            <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSetsFactory.IsFileAgnostic"/> property to determine if this is the case.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSetsFactory.IsFileAgnostic">
            <summary>
            Returns <c>true</c> if the set of previews is the same for
            all files that the factory applies to, in which case passing 
            <c>null</c> to <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSetsFactory.GetPreviewSets(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)"/> will yield 
            all previews that are specifically available for this document type.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSetsFactory.GetPreviewSets(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)">
            <summary>
            Gets the set of previews that can be used with the specified file.
            </summary>
            <param name="fileProperties">Properties of the file instance
            for which previews should be specialized, or <c>null</c> to get
            previews that are available for all files of this type.</param>
            <returns>The preview sets available from this factory, or <c>null</c> if none.</returns>
            <remarks>
            <para>
            The file properties are used to determine available previews for
            file types like TTX, for which the previews depend on the underlying file format.
            </para>
            <para>
            For most file formats, the preview sets do not depend on the file
            properties.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSetsFactory.CreatePreviewSet">
            <summary>
            Provides access to the creation of a new preview set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSetsFactory.CreatePreviewType``1">
            <summary>
            Creates a preview type of type T. T can either be an <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IApplicationPreviewType"/> or
            an <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IControlPreviewType"/>.
            </summary>
            <typeparam name="T">The type of preview type to create.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewUpdatedViaRefresh">
            <summary>
            Defines the protocol used for updating real-time previews through
            a file refresh mechanism, by which the same file gets overwritten and
            re-loaded in the preview when target content changes in the editor
            (typically when a segment is confirmed by the user).
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewUpdatedViaRefresh.TargetFilePath">
            <summary>
            Full path to the target language file that is overwritten when
            the preview is refreshed. This path is typically set once and stays unchanged during
            the lifetime of the preview.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewUpdatedViaRefresh.BeforeFileRefresh">
            <summary>
            Called by the host application when the preview is about to be updated,
            before the file at <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewUpdatedViaRefresh.TargetFilePath"/> is overwritten.
            </summary>
            <remarks>
            <para>
            This call allows the implementation to release
            any file locks and/or try to 'remember' the current location of the file
            before it is overwritten.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewUpdatedViaRefresh.AfterFileRefresh">
            <summary>
            Called by the host application after the preview file has been successfully
            overwritten.
            </summary>
            <remarks>
            <para>
            The implementation typically re-loads (refreshes) the file in the preview
            and (if necessary) navigates to the previously displaying content.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewUpdatedViaSegmentFile">
            <summary>
            Implemented by the real-time preview controls and applications that can be updated using a "segment file protocol",
            i.e. via a file in the orignal document format that contains a single segment.
            </summary>
            <remarks>
            <para>
            Components that implement this interface typically also implement <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.INavigablePreview"/>.
            </para>
            <para>
            This interface is used by the real-time preview for Microsoft Word documents.
            </para>
            <para>
            The protocol works as follows:
            </para>
            <list>
            <item>
            When the translation of a segment is updated in the host application, the application
            calls <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewUpdatedViaSegmentFile.CreateSegmentFile(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference)"/> on this interface. The implementation should create a
            file in the native format containing the source language sentence for the segment. (E.g. by copying
            the sentence into a hidden document and saving it to a file.)
            </item>
            <item>
            The host application parses this single segment file using the framework,  replaces
            the source language content with the corresponding translation, and saves the resulting 
            content back to native format through the framework.
            </item>
            <item>
            The application then calls <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewUpdatedViaSegmentFile.UpdatePreviewFromSegmentFile(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference,Sdl.FileTypeSupport.Framework.TempFileManager)"/> on this interface,
            passing in the translated native file produced above. The implementation uses this file
            to update the visible preview. (E.g. by opening the file hidden, copying its content and
            by replacing the original source sentence with it.)
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewUpdatedViaSegmentFile.CreateSegmentFile(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference)">
            <summary>
            Called by the host application to create a native source document containing the source language
            content of the specified segment. The implementation returns the full path to the file created.
            </summary>
            <param name="segment">Identifies the segment to create a file for.</param>
            <returns>Temporary file that has been created. The lifetime of the file is controlled by the 
            returned manager instance. All components that need access to the file should reference this.
            The file will automatically be deleted when this instance is disposed or garbage collection takes place.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewUpdatedViaSegmentFile.UpdatePreviewFromSegmentFile(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference,Sdl.FileTypeSupport.Framework.TempFileManager)">
            <summary>
            Called by the host application to update the preview with the content of a segment file.
            The implementation should update the preview by replacing the segment content with the
            content in the segment file.
            </summary>
            <param name="translatedSegmentFile">Reference to a native file containing the updated 
            target language version of the segment. The implementation may dispose of this when it 
            is no longer needed.</param>
            <param name="segment"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTagsFactory">
            <summary>
            Inteface used to instantiate a set of QuickTags available
            for a specific file. 
            </summary>
            <remarks>
            <para>Normally accessed via <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildQuickTagsFactory"/>.</para>
            <para>
            The set of available QuickTags that are available for a file type sometimes depends on 
            the actual file itself (e.g. for TTX documents, the underlying file
            format can vary significantly). However, for most file formats,
            the set is the same for all document instances. You can check the
            <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTagsFactory.IsFileAgnostic"/> property to determine if this is the case.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTagsFactory.IsFileAgnostic">
            <summary>
            Returns <c>true</c> if the set of QuickTags is the same for
            all files that the factory applies to, in which case passing 
            <c>null</c> to <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTagsFactory.GetQuickTags(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)"/> will yield the
            full set of QuickTags for the document type.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTagsFactory.GetQuickTags(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)">
            <summary>
            Gets the set of QuickTags that can be used with the specified file.
            </summary>
            <param name="fileProperties">Properties of the file instance
            for which the QuickTags should be specialized, or <c>null</c>
            to get a list of QuickTags that are available for all files 
            of the type that the factory supports.</param>
            <returns>An instance of IQuickTags, or <c>null</c> if no QuickTags
            are available for this file.</returns>
            <remarks>
            <para>
            The file properties are used when initializing QuickTags for
            file types such as TTX, for which the actual QuickTags available
            depend on the underlying file format.
            </para>
            <para>
            For most file formats, the QuickTags do not depend on the file
            properties.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISettingsAware">
            <summary>
            This interface should be implemented by components which need to be aware of a
            particular settings group in order to read their settings from this group
            (during extraction or generation).
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.ISettingsAware.InitializeSettings(Sdl.Core.Settings.ISettingsBundle,System.String)">
            <summary>
            Provides the component with the settings information it needs to initialize its settings.
            </summary>
            <param name="settingsBundle">Used for setting the settings bundle on the component.</param>
            <param name="configurationId">The suggested configuration ID to use when retrieving the
            settings group from the <see cref="T:Sdl.Core.Settings.ISettingsBundle"/> and directly relates to the settings group ID.
            This does not have to be used if a component needs to self-manage its configuration ID and may be 
            <c>null</c> if the component does not belong in the processing chain of a specific filter.</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISingleFilePreviewController">
            <summary>
            Base interface for preview controllers that take single files as input
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISingleFilePreviewController.PreviewFile">
            <summary>
            Full path to the file that should be displayed in the preview
            </summary>
            <remarks>
            <para>
            The host application sets this path after generating the preview file before
            calling <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewControl.Refresh"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewApplication.Launch"/> in order to display the file.
            </para>
            <para>
            The file is passed through a temporary file manager, which means that it should 
            be deleted automatically when it is no longer needed.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISourceAndTargetFilePreviewController">
            <summary>
            Base interface for preview controllers that show both the a source and target language file
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISourceAndTargetFilePreviewController.SourcePreviewFile">
            <summary>
            Full path to the source language file. This should be set by the
            application before the first call to <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewApplication.Launch"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewControl.Refresh"/>.
            </summary>
            <remarks>
            The file is passed through a temporary file manager, which means that it should 
            be deleted automatically when it is no longer needed.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.ISourceAndTargetFilePreviewController.TargetPreviewFile">
            <summary>
            Full path to the target language file, which should be set by the
            application before the first call to <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewApplication.Launch"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewControl.Refresh"/>.
            </summary>
            <remarks>
            The file is passed through a temporary file manager, which means that it should automatically
            get deleted when no longer needed.
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.NotBilingualFileTypeException">
            <summary>
            Exception thrown when attempting to set a default bilingual file type
            to a file type for which <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.IsBilingualDocumentFileType"/> is not set to <c>true</c>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.NotBilingualFileTypeException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.NotBilingualFileTypeException.#ctor(System.String)">
            <summary>
            Construct from a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.NotBilingualFileTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Construct from a message and an inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.NotBilingualFileTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId">
            <summary>
            Command ids used for default QuickTags.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.Bold">
            <summary>
            Default bold formatting
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.Italic">
            <summary>
            Default italic formatting
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.Underline">
            <summary>
            Default underline formatting
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.Subscript">
            <summary>
            Default subscript formatting
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.Superscript">
            <summary>
            Default superscript formatting
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.SmallCaps">
            <summary>
            Default small caps formatting
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.SoftBreak">
            <summary>
            Default soft break character
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.LeftToRight">
            <summary>
            Default left-to-right directionality
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.RightToLeft">
            <summary>
            Default right-to-left directionality
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.EmDash">
            <summary>
            Em-dash character
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.EnDash">
            <summary>
            En-dash character
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.NonBreakingHyphen">
            <summary>
            Non-breaking hyphen character (i.e. a hyphen that should not be treated as a word break)
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.OptionalHyphen">
            <summary>
            Optional hyphen character - indicates an optional location to break a word, but that does
            not appear in the final text if the word is not hyphenated at this location.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.NonBreakingSpace">
            <summary>
            Non-breaking space character (i.e. a space that should not be treated as a word break)
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.Euro">
            <summary>
            The Euro currency symbol
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.Copyright">
            <summary>
            The copyright symbol
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.Registered">
            <summary>
            The registered trademark symbol
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.Trademark">
            <summary>
            The trademark symbol
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.Undefined">
            <summary>
            Value is invalid or has not been set.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentSelectedEventArgs">
            <summary>
            Information passed in the <see cref="E:Sdl.FileTypeSupport.Framework.IntegrationApi.INavigablePreview.SegmentSelected"/> event
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentSelectedEventArgs.#ctor">
            <summary>
            Creates an uninitialized object.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentSelectedEventArgs.#ctor(Sdl.FileTypeSupport.Framework.IntegrationApi.INavigablePreview,Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference)">
            <summary>
            Initializes with the specified preview instance and segment reference.
            </summary>
            <param name="originatingPreview">Preview the segment from which the selection originates</param>
            <param name="selectedSegment">The selected segment</param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentSelectedEventArgs.SelectedSegment">
            <summary>
            Reference to the segment the user has selected
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentSelectedEventArgs.OriginatingPreview">
            <summary>
            The preview from which the event originates
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.SubContentProcessorDoesNotExistException">
            <summary>
            This exception is thrown when a subcontent FileTypeDefinition cannot be found during processing
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.SubContentProcessorDoesNotExistException.#ctor(System.String)">
            <summary>
            Constructor taking message for exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.TemplateComponentBuilderManager">
            <summary>
            TemplateComponentBuilderManager class represents a template component builder manager.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.TemplateComponentBuilderManager.#ctor(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager)">
            <summary>
            Constructor that takes the given file type manager.
            </summary>
            <param name="fileTypeManager">file type manager</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.TemplateComponentBuilderManager.LoadAllTemplateComponentBuilders">
            <summary>
            Loads all the template component builders.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.TemplateComponentBuilderManager.TemplateComponentBuilders">
            <summary>
            Allow enumeration of template component builders
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISingleFilePreviewApplication">
            <summary>
            Manages a standalone application that can be used to preview
            a single (source or target language) file.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISingleFilePreviewControl">
            <summary>
            Implemented by preview controls that display a single file
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISourceAndTargetFilePreviewControl">
            <summary>
            Implemented by preview controls that display source 
            and target files together, e.g. side-by-side previews.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISourceAndTargetFilePreviewApplication">
            <summary>
            Implementated by components that can manage simultanous previews
            of source and target language files in standalone applications.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs">
            <summary>
            Information passed in <see cref="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message"/> events
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs.#ctor">
            <summary>
            Creates an uninitialized instance.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs.#ctor(System.String,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation,Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation)">
            <summary>
            Creates an instance initialized with the specified parameters.
            </summary>
            <param name="filePath"></param>
            <param name="origin">The description of the action/component from which this message originated.</param>
            <param name="level"></param>
            <param name="message"></param>
            <param name="fromLocation"></param>
            <param name="uptoLocation"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs.#ctor(System.String,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation,Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation,Sdl.FileTypeSupport.Framework.IntegrationApi.ExtendedMessageEventData)">
            <summary>
            Creates an instance initialized with the specified parameters.
            </summary>
            <param name="filePath"></param>
            <param name="origin">The description of the action/component from which this message originated.</param>
            <param name="level"></param>
            <param name="message"></param>
            <param name="fromLocation"></param>
            <param name="uptoLocation"></param>
            <param name="extendedData"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs.ToString">
            <summary>
            Returns a string of the form [Level]: [Message]
            with the error level and message, intended for debugging purposes.
            </summary>
            <remarks>
            <para>
            This intended is for debugging purposes only. Do not use
            this in the UI; the content is not fully localized.
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs.FilePath">
            <summary>
            Full path to the file being processed, or <c>null</c> if unknown
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs.Origin">
            <summary>
            Description of the object/action from which the message was sent
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs.Level">
            <summary>
            Severity of the reported issue
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs.Message">
            <summary>
            Actual (localized) message text that will be shown to the user
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs.FromLocation">
            <summary>
            Start location of the content the message refers to, or null if none.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs.UptoLocation">
            <summary>
            End location of the content the message refers to, or null if none
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs.ExtendedData">
            <summary>
            Extended data used to add specific message data to the message; 
            for example, it could be used for verification data.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId">
            <summary>
            Type safe wrapper around a preview application type id
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId.#ctor(System.String)">
            <summary>
            Creates from a string id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId.Id">
            <summary>
            The id for this preview type as a string
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId.ToString">
            <summary>
            The id as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId.Equals(System.Object)">
            <summary>
            Returns <c>true</c> if the objects have the same id value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId.GetHashCode">
            <summary>
            Returns a hash code based on the id value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId.op_Equality(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId,Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId)">
            <summary>
            Returns <c>true</c> if the two ids have the same <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId.Id"/> value.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId.op_Inequality(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId,Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId)">
            <summary>
            Returns <c>true</c> if the two ids have different <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId.Id"/> values.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewClosedEventArgs">
            <summary>
            Information passed in the <see cref="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewApplication.PreviewClosed"/> event
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewClosedEventArgs.#ctor(Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewApplication)">
            <summary>
            Construct with an application instance
            </summary>
            <param name="application">The preview application, which no longer
            needs to be tracked.</param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewClosedEventArgs.Application">
            <summary>
            The preview application that the event concerns. The host application
            may disconnect event handlers for this application and dispose
            of it.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId">
            <summary>
            Type safe wrapper around a preview control type id
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId.#ctor(System.String)">
            <summary>
            Creates from a string id
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId.Id">
            <summary>
            The id for this preview type as a string
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId.ToString">
            <summary>
            The id as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId.Equals(System.Object)">
            <summary>
            Returns <c>true</c> if the objects have the same id value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId.GetHashCode">
            <summary>
            Returns a hash code based on the id value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId.op_Equality(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId,Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId)">
            <summary>
            Returns <c>true</c> if the two ids have the same <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId.Id"/> value.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId.op_Inequality(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId,Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId)">
            <summary>
            Returns <c>true</c> if the two ids have different <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId.Id"/> values.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation">
            <summary>
            Used with messages that link to a document location to
            provide a mechanism to retrieve the corresponding positions
            in the bilingual content model.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation.FileId">
            <summary>
            Id of the file that the location refers to, 
            or <c>null</c> if none.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation.ParagrahUnitId">
            <summary>
            Id of the paragraph unit that the location refers to,
            or <c>null</c> if none.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation.SegmentId">
            <summary>
            Id of the segment that the location refers to, or
            <c>null</c> if none.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation.SourceOrTarget">
            <summary>
            Indicates whether the location refers to the source or target.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation.CharactersIntoParagraph">
            <summary>
            Number of characters from the start of the paragraph; used when
            translating and persisting message locations. The
            bilingual paragraph location may be calculated from this.
            </summary>
            <remarks>
            A value of -1 implies this property has not been set.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation.CharactersIntoSegment">
            <summary>
            Number of characters from the start of the segment if the
            location is inside a segment. Used when translating and
            persisting message locations. The bilingual paragraph location
            may be calculated from this.
            </summary>
            <remarks>
            This value is only valid if the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation.SegmentId"/> value
            is not <c>null</c>. A value of -1 implies that this property has not been set.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation.ParagraphLocation">
            <summary>
            Text location that the message refers to within the source
            or target paragraph, or <c>null</c> if none.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMessageLocation.LocationDescription">
            <summary>
            Textual description of the location. This is used for
            messages for which a link to the actual location in the document cannot 
            be provided (e.g. if they refer to a different file
            or if no actual document location could be determined).
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException">
            <summary>
            Used in <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException"/> to convey the details of 
            a single file that was not supported by any installed file type when using one
            of the <c>GetConverter...</c> overloads in <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager"/>.
            </summary>
            <remarks>
            <para>
            This exception is thrown and handled in the framework implementation itself, and should
            therefore not need to be handled explicitly in the application. 
            </para>
            <para>
            Applications that use the <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager"/> for file conversion should
            handle the <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException"/>, where the details
            for each unsupported file can be accessed from the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException.NotSupportedFiles"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException.FilePath">
            <summary>
            Full path to the file that is not supported
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException.#ctor(System.String,System.String)">
            <summary>
            Construction from a message
            </summary>
            <param name="message"></param>
            <param name="filePath">Full path to the unsupported file</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Construction from a message, file path, and an inner exception
            </summary>
            <param name="message"></param>
            <param name="filePath">Full path to the unsupported file</param>
            <param name="inner"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException.Equals(System.Object)">
            <summary>
            Also compares the file path.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException.GetHashCode">
            <summary>
            Returns a hash code that includes the file path.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException">
            <summary>
            Exception thrown by the <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager"/> implementation when a
            required file type definition could not be located.
            </summary>
            <remarks>
            <para>
            The id of the required file type definition can be accessed through the 
            <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException.FileTypeDefinitionId"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException.FileTypeDefinitionId">
            <summary>
            Id of the file type definition that could not be located
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException.#ctor">
            <summary>
            Default constructor - creates an uninitialized object.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException.#ctor(System.String,Sdl.FileTypeSupport.Framework.FileTypeDefinitionId)">
            <summary>
            Construct from message and file type definition id.
            </summary>
            <param name="message"></param>
            <param name="id"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException.#ctor(System.String,Sdl.FileTypeSupport.Framework.FileTypeDefinitionId,System.Exception)">
            <summary>
            Construct from inner exception and file type definition id.
            </summary>
            <param name="message"></param>
            <param name="id"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException.Equals(System.Object)">
            <summary>
            Also compares the file type definition id.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException.GetHashCode">
            <summary>
            The hash code includes the file type definition id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.NativeGeneratorProvider">
            <summary>
            Creates and initializes a file generator that can be used to write native content.
            </summary>
            <param name="fileProperties">Information on the original file being converted, including
            the id of the file type definition that is used to convert the original native file. 
            This can either be the persistent file properties that were created when reading
            the original native file, or it is provided from a bilingual parser.</param>
            <returns>
            A file generator object that can be used to create a native file.
            </returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator">
            <summary>
            A set of bilingual content processors together with a bilingual writer
            that can be used to process the entire content (all files) of a bilingual document.
            </summary>
            <remarks>
            <para>
            The content is passed to the generator in the form of calls on the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator.Input"/>
            property implementation. Each call will be further processed in turn by each bilingual content
            processor, and last by the bilingual writer.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator.Input">
            <summary>
            All content to be processed by the generator is passed through
            this interface.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator.Writer">
            <summary>
            The bilingual writer that creates the final output.
            </summary>
            <remarks>
            <para>
            This property can be <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator.AllComponents">
            <summary>
            Called by the framework during component initialization to detect and initialize
            parser components that implement special interfaces such as <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjectsAware"/>.
            </summary>
            <returns>All (bilingual) file type components</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator.AddFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePostTweaker)">
            <summary>
            Appends a file tweaker that will be used to modify the output file after generating.
            </summary>
            <param name="tweaker"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator.FileTweakers">
            <summary>
            The file tweakers used by the generator, in the
            order in which they will be invoked.
            
            File tweakers should be added using <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator.AddFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePostTweaker)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator.RemoveFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePostTweaker)">
            <summary>
            Removes the tweaker from the generator.
            </summary>
            <param name="tweakerToRemove">The file tweaker to remove</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer">
            <summary>
            Common base interface for components that hold bilingual content processors
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.AddBilingualProcessor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)">
            <summary>
            Appends a bilingual content processor to the container.
            </summary>
            <param name="processor"></param>
            <remarks>
            <para>
            To add a bilingual content handler (rather than a processor), use 
            a <c>Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.BilingualContentHandlerAdapter</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.InsertBilingualProcessor(System.Int32,Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)">
            <summary>
            Inserts a bilingual processor at a specified position in the container.
            Any item that is currently occupying that position will - after this operation - appear after the inserted processor.
            </summary>
            <param name="index">Must be a value in the range [0 - Count]</param>
            <param name="processor"></param>
            <remarks>
            <para>
            To insert a bilingual content handler (rather than a processor), use 
            a <c>Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.BilingualContentHandlerAdapter</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.RemoveBilingualProcessor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)">
            <summary>
            
            </summary>
            <param name="processor"></param>
            <returns>True if anything was removed from the collection, otherwise false</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.GetBilingualProcessors">
            <summary>
            The content processors, in the order in which they will be invoked
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.FileRestriction">
            <summary>
            This delegate will be invoked for each file to be processed.
            If the delegate returns <c>true</c>, the file
            will be processed as normal, but if it returns <c>false</c>,
            the file will be skipped.
            </summary>
            <remarks>
            <para>
            If the value is <c>null</c>, no file restrictions apply, and all files
            will be processed.
            </para>
            <para>
            This allows content processing to be restricted to individual files in
            a multi-file document.
            </para>
            <para>
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.ParagraphUnitRestriction">
            <summary>
            If set, this delegate will be invoked for each paragraph unit to be processed.
            If the delegate returns <c>true</c>, the paragraph unit will be processed as normal. If it returns <c>false</c>,
            the paragraph unit will be skipped.
            </summary>
            <remarks>
            This mechanism is used when verifying an individual part of the document.
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IDefaultQuickTagInfo">
            <summary>
            This interface represents the default QuickTag info available for the file type.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IDefaultQuickTagInfo.DefaultId">
            <summary>
            The default id of the QuickTag, or <see cref="F:Sdl.FileTypeSupport.Framework.IntegrationApi.QuickTagDefaultId.Undefined"/> if none.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IDefaultQuickTagInfo.CommandID">
            <summary>
            Gets the command id of the default QuickTag.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IDefaultQuickTagInfo.CommandName">
            <summary>
            Gets the command name of the default QuickTag.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IDefaultQuickTagInfo.ImageResource">
            <summary>
            Gets the resource file in which the image is located.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IDefaultQuickTagInfo.ImagePath">
            <summary>
            Gets the path to the image within the resource file.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IDefaultQuickTagInfo.Description">
            <summary>
            Gets the description of the default QuickTag.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IDefaultQuickTagInfo.Formatting">
            <summary>
            Default formatting for this default QuickTag.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor">
            <summary>
            Represents a native parser with native components (or a bilingual parser) and bilingual content
            processors used when reading native or bilingual file.
            </summary>
            <remarks>
            The output from the reading operation consists of calls that are generated on 
            the <see cref="T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentHandler"/> instance
            specified by setting the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.Output"/> property.
            </remarks>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.Progress">
            <summary>
            Fired when progress is reported from the parser.
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.Message">
            <summary>
            Raised when a message is reported from a file type component.
            </summary>
            <remarks>
            The file path property does not need to be set in the event args.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.ItemFactory">
            <summary>
            The framework will set this property as part of the initialization.
            
            Bilingual components should use this factory to create any items
            that are inserted in the bilingual content model.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.DocumentInfo">
            <summary>
            Common document properties communicated to all bilingual file type components
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.FileConversionProperties">
            <summary>
            This object will be passed to each of the file type components during initialization.
            Ensure that this property is configured properly before calling <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.Parse"/>.
            File type components may change these properties, e.g. to store dynamic settings. To ensure that such settings
            are preserved for future conversion operations, these properties should be retrieved after successful parsing,
            and stored for re-use e.g. by persisting them to the bilingual file format.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.Output">
            <summary>
            This object (if not null) receives calls that represent the
            output from the file reading process.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.BilingualParser">
            <summary>
            Parser for reading a bilingual input file, or <c>null</c> to read native input files.
            </summary>
            <remarks>
            <para>
            If set, the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.NativeExtractor"/> and the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.ToBilingualConverter"/> are not used.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.NativeExtractor">
            <summary>
            Used for reading a native input file.
            </summary>
            <remarks>
            <para>
            Not used if a <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.BilingualParser"/> has been set.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.Parse">
            <summary>
            Reads the entire content of the input file.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.ParseNext">
            <summary>
            Reads the next piece of content from the input file.
            </summary>
            <returns>True if there is more content in the file to be processed, false if not.</returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.ToBilingualConverter">
            <summary>
            The component used to convert native input to bilingual content
            </summary>
            <remarks>
            <para>
            Not used if a <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.BilingualParser"/> has been set.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.AllComponents">
            <summary>
            Called by the framework during component initialization to detect and initialize
            parser components that implement special interfaces such as <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjectsAware"/>.
            </summary>
            <returns>All native and bilingual file type components</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.AddFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePreTweaker)">
            <summary>
            Append a file tweaker to modify the input file before parsing.
            </summary>
            <remarks>
            File tweakers can be removed using <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.RemoveFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePreTweaker)"/>.
            </remarks>
            <param name="tweaker"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.FileTweakers">
            <summary>
            The file tweakers that are currently used by the extractor, in the
            order in which they will be invoked.
            </summary>
            <remarks>
            File tweakers can be added or removed using <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.AddFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePreTweaker)"/>
            and <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.RemoveFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePreTweaker)"/>.
            </remarks>
            <returns>An iterator for file tweaker objects</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.RemoveFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePreTweaker)">
            <summary>
            Remove the specified file tweaker from the extractor.
            </summary>
            <remarks>
            File tweakers can be added using <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.AddFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePreTweaker)"/>.
            </remarks>
            <param name="tweakerToRemove">The tweaker to remove</param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.SettingsBundle">
            <summary>
            Settings used by processing components in the extractor
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator">
            <summary>
            Represents a set of bilingual content processors, native content 
            processors, and a native writer, which work together to output native files
            from bilingual content.
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.Message">
            <summary>
            Raised when a message is reported by a file type component.
            </summary>
            <remarks>
            The file path property needs not be set in the event args.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.ItemFactory">
            <summary>
            The framework will set this property as part of the initialization.
            
            While building bilingual components this factory should be used to create any items
            that are inserted in the bilingual content model.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.NativeOutputProperties">
            <summary>
            Properties and settings used when writing the native file.
            If set, these properties are communicated to all file type components 
            that implement the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware"/> interface.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.Input">
            <summary>
            All content input to the converter is passed as calls on this interface.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.NativeGenerator">
            <summary>
            The components used to output native content to a file in native format in the source or target language.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.ToNativeConverter">
            <summary>
            The component used when converting bilingual content into native source or target content.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.BilingualWriter">
            <summary>
            Writer for a bilingual output format, or <c>null</c> if a native output format is used.
            </summary>
            <remarks>
            <para>
            This is intended for writers of bilingual formats representing single files (e.g. TTX, ITD, etc.). It is NOT for 
            bilingual document writers (e.g. SDL XLIFF). Those should rather be used with a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator"/>.
            </para>
            <para>
            When a bilingual writer is set, the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.ToNativeConverter"/> and the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.NativeGenerator"/>
            are not used.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.AllComponents">
            <summary>
            Called by the framework during component initialization to initialize components
            that implement special interfaces such as <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjectsAware"/> before
            processing starts.
            </summary>
            <returns>All native and bilingual file type components</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.AddFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePostTweaker)">
            <summary>
            Appends a file tweaker that will be used to modify the output file after generating.
            </summary>
            <param name="tweaker"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.FileTweakers">
            <summary>
            The file tweakers used by the generator, in the
            order in which they will be invoked.
            
            File tweakers should be added using <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.AddFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePostTweaker)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.RemoveFileTweaker(Sdl.FileTypeSupport.Framework.NativeApi.IFilePostTweaker)">
            <summary>
            Removes the tweaker from the generator.
            </summary>
            <param name="tweakerToRemove">The file tweaker to remove</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.AddNativeVerifier(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileVerifier)">
            <summary>
            Appends a native verifier that will be run on the output file after it has been generated.
            </summary>
            <param name="verifier">The native verifier to add</param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.NativeVerifiers">
            <summary>
            The native verifiers that are currently used by the generator.
            
            Verifiers should be added using <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator.AddNativeVerifier(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileVerifier)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation">
            <summary>
            Information that a host application may need to 'know' about a file type, such as the 
            localized name of the file type, the wildcard expression (file extensions) for the file dialog, 
            and which settings pages are available.
            </summary>
            <remarks>
            <para>
            The file type information can also contain additional metadata, in the form of key/value pairs,
            which are accessible through the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer"/> implementation.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileTypeDefinitionId">
            <summary>
            Unique file type definition identifier.
            The convention is to use the following format: "[Document Type] [Document Type Version] v [File Type Definition version]",
            where the file type definition version is a four digit version number.
            Example: "SDL XLIFF 1.0 v 1.0.0.0", for version 1.0.0.0 of the file type definition for 
            the SDL XLIFF file format, version 1.0, or "Microsoft Word 2007 v 1.1.0.0", and so on.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileTypeName">
            <summary>
            Friendly name for the file type, which may be shown to the user.
            <para>
            This is the short version of the file type name that is used in settings dialogs, 
            messages etc.
            </para>
            <para>
            There are two additional versions of the file type name, <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileTypeDocumentName"/>
            and <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileTypeDocumentsName"/>, which are used to denote individual documents
            and sets of documents of this file type (e.g. in File Open and Save As dialogs).
            </para>
            <para>
            This is stored in a LocalizableString, which contains either a plain text value or
            an embedded resource identifier.
            </para>
            </summary>
            <remarks>
            <para>
            The file type name is the core name of the file type; it normally 
            does not end on "documents" or "files".
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileTypeDocumentName">
            <summary>
            Friendly name of the type of an individual file of this file type. This is used
            when referring to a single item, e.g. in a File Save As dialog.
            </summary>
            <remarks>
            <para>
            By convention, this is often the file type name followed by "Document" or "File".
            </para>
            </remarks>
            <seealso cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileTypeName"/>
            <seealso cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileTypeDocumentsName"/>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileTypeDocumentsName">
            <summary>
            Friendly name of a set of files of this file type. This name is used when referring
            to a collection of files, e.g. in a File Open dialog.
            </summary>
            <remarks>
            <para>
            By convention, this is often the file type name, followed by "Documents" or "Files".
            </para>
            </remarks>
            <seealso cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileTypeName"/>
            <seealso cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileTypeDocumentName"/>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileDialogWildcardExpression">
            <summary>
            The wildcard expression shows up with the file type name in File Open dialogs.
            <para>
            This is used both for displaying and for filtering file types in the file dialog.
            </para>
            </summary>
            <example>
            In the following string from the open dialog:
            Microsoft Word Documents (*.doc;*.dot)
            the FileDialogWildcardExpression would be '*.doc;*.dot'
            </example>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.Expression">
            <summary>
            This regular expression is applied to the file name to determine if it matches,
            when the file is about to be opened. This expression is created from the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileDialogWildcardExpression"/>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.DefaultFileExtension">
            <summary>
            The default file extension to use in a Save As dialog and automatically
            append to the file name if it does not match the file dialog wildcard expression.
            </summary>
            <remarks>
            <para>
            Typically used for intermediate bilingual file formats like SDL XLIFF.
            </para>
            <para>
            The file extension should not contain a leading '.' character.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.Description">
            <summary>
            Descriptive text for the file type definition.
            This is stored in a LocalizableString, which contains either a plain text value or
            an embedded resource identifier.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.IsBilingualDocumentFileType">
            <summary>
            <c>True</c> for file types that can be used as intermediate bilingual documents
            to store all information available in the bilingual content model.
            </summary>
            <remarks>
            <para>
            The first file type definition in the file type manager for which this property is
            <c>true</c>, becomes the default bilingual file type.
            </para>
            <para>
            An example of a bilingual document file type is SDL XLIFF.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.Enabled">
            <summary>
            Determines whether the file type is considered as a candidate for processing a file. 
            This allows us to have filters present in the 
            file type manager that won't be used for processing.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.Hidden">
            <summary>
            Determines whether the file type will be displayed in the UI of the host application. 
            If a file type is hidden, then it would normally also be 
            disabled.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.Removed">
            <summary>
            Determines whether the file type should be removed from the list of File Types shown by a given host
            e.g. not used by the host - this is different from enabled, where the File Type might still be shown in the list
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.Icon">
            <summary>
            The icon representing this particular file type
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.FileTypeFrameworkVersion">
            <summary>
            The version of the File Type Framework the file type definition was
            designed for.
            </summary>
            <remarks>
            <para>
            This is used during a system upgrade to determine
            how the definition content should be adapted to work with a different version
            of the framework.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.SilverlightSettingsPageIds">
            <summary>
            List of IDs for settings UI pages for this file type, implemented in Silverlight.
            </summary>
            <remarks>
            <para>
            Each settings page is implemented as a Silverlight plug-in. The settings page
            ID is the ID of the plug-in that implements the settings page.
            </para>
            <para>
            The settings page implementation class must be decorated with the 
            <c>Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsPageAttribute</c>
            attribute, and the assembly must be built and deployed as a plug-in.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.WinFormSettingsPageIds">
            <summary>
            List of IDs for settings UI pages for this file type, implemented in Windows Forms.
            </summary>
            <remarks>
            <para>
            Settings pages are implemented in desktop plug-ins. The settings page
            ID is the ID of the plug-in component that implements the settings page.
            </para>
            <para>
            The settings page implementation class must be decorated with the 
            <c>Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsPageAttribute</c>
            attribute, and the assembly must be built and deployed as a plug-in.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IVerifierCollection">
            <summary>
            Represents a set of bilingual content verifiers that work together to send
            non-critical messages to the client application through the verifier plug-ins.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IVerifierCollection.NativeVerifiers">
            <summary>
            The native verifiers that are available for this file type
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IVerifierCollection.BilingualVerifiers">
            <summary>
            The bilingual verifiers that are available for this file type
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder">
            <summary>
            Interface implemented by anything that can create the components that make up a file type.
            This may be achieved by reading from a configuration file, or by directly instantiating the objects (in an implementation specific to a file type).
            
            The SpringFileTypeComponentBuilder implements this interface and uses the
            spring framework to do this.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.FileTypeManager">
            <summary>
            Current File Type Manager instance which will be set by the framework.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.BuildFileTypeInformation(System.String)">
            <summary>
            Returns a file type information object.
            </summary>
            <param name="name">The <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition"/> will pass "" as the name for this parameter</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.BuildQuickTagsFactory(System.String)">
            <summary>
            Gets the QuickTags object for this component.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.BuildFileSniffer(System.String)">
            <summary>
            Gets the file sniffer for this component.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.BuildFileExtractor(System.String)">
            <summary>
            Gets the file extractor for this component.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.BuildFileGenerator(System.String)">
            <summary>
            Gets the file generator for this component.
            </summary>
            <param name="name"></param>
            <returns><c>Null</c> if no file generator is defined</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.BuildAdditionalGeneratorsInfo(System.String)">
            <summary>
            The the additional generator information for this file type
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.BuildAbstractGenerator(System.String)">
            <summary>
            Gets a native or bilingual document generator of the type
            defined for the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.BuildPreviewSetsFactory(System.String)">
            <summary>
            Gets the different sets of previews supported for this component.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.BuildPreviewControl(System.String)">
            <summary>
            Creates a new instance of the preview control with the specified name.
            </summary>
            <remarks>
            <para>
            Should only be called from the main thread, as controls must always be
            instantiated on the same thread as the application message pump.
            </para>
            </remarks>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.BuildPreviewApplication(System.String)">
            <summary>
            Creates a new instance of the preview application with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.BuildBilingualGenerator(System.String)">
            <summary>
            Gets the bilingual writer components for this component (if any).
            </summary>
            <param name="name"></param>
            <returns><c>null</c> if no bilingual generator is defined</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder.BuildVerifierCollection(System.String)">
            <summary>
            Gets the verifier list of this component.
            </summary>
            <param name="name"></param>
            <returns></returns>
            <remarks> The verifier list is an optional component for a file type.</remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionCustomizationLevel">
            <summary>
            Used by the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.CustomizationLevel"/> property to
            indicate level of File Type Definition customization.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionCustomizationLevel.Standard">
            <summary>
            Standard file type definition - no customization
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionCustomizationLevel.CustomizedStandard">
            <summary>
            Standard file type definition with some properties customized,
            for example custom FileDialogWildcardExpression
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionCustomizationLevel.FullyCustomized">
            <summary>
            Fully customized file type definition.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition">
            <summary>
            Represents the functionality of a file type definition as a read-only
            object, which can be used to instantiate the file type support components.
            
            The file type definition includes all information on the support
            for a specific file type.
            
            The file type definition uses a IFileTypeComponentBuilder to retrieve the
            relevant information from persistent storage, e.g. file type definition
            XML files or database tables.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.FileTypeInformation">
            <summary>
            Everything you want to know about the file type this particular
            file type definition represents.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildQuickTagsFactory">
            <summary>
            Creates the factory for QuickTags available for this file type (if any).
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.GetQuickInserts(Sdl.Core.Settings.ISettingsBundle,Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)">
            <summary>
            Gets a collection of QuickInserts. This consists of any Default QuickInserts plus any
            custom ones as well...
            </summary>
            <param name="fileProperties">fileProperties</param>
            <param name="settingsBundle">settingsBundle</param>
            <returns>IQuickTags object</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildPreviewSetsFactory">
            <summary>
            Creates the factory for preview sets available for this file type (if any).
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildExtractor">
            <summary>
            Called by the file type manager to instantiate an extractor for the supported file type.
            </summary>
            <returns></returns>
            <remarks>
            Unlike the file generator, the extractor can be used to parse bilingual documents
            as well as native files.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildSubContentExtractor">
            <summary>
            Called by the FileExtractor to instantiate a sub-content extractor for the supported file type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildSubContentGenerator">
            <summary>
            Called by the FileGenerator to instantiate a sub-content generator for the supported file type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildNativeGenerator">
            <summary>
            Called by the file type manager to create an instance of the default generator for this particular file type.
            </summary>
            <returns>A file generator, or <c>null</c> if the file type only supports bilingual
            document output, in which case <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildBilingualDocumentGenerator"/> should be used instead.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildBilingualDocumentGenerator">
            <summary>
            Called by the file type manager to create an instance of the default intermediate bilingual 
            document generator for this particular file type.
            </summary>
            <returns><c>Null</c> if the file type definition does not represent a bilingual file format that
            can be used as intermediate storage for bilingual documents (e.g. SDL XLIFF), in which
            case <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildNativeGenerator"/> should be used instead.</returns>
            <remarks>
            <para>
            This is only intended for file types that can be used to fully serialize the content of
            the bilingual object model (e.g. SDL XLIFF).
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildGenerator(Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId)">
            <summary>
            Called to create an instance of the generator of the specified type.
            </summary>
            <param name="generatorId">Must be a generator type defined in the file type definition, or 
            <c>GenertorId.Default</c>, which returns the default native or bilingual document generator
            for the file type.</param>
            <returns>A native or bilingual document generator</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildAdditionalGeneratorsInfo">
            <summary>
            Called to create an instance of the additional generator information specified for this particular file type.
            </summary>
            <returns>An additional generators info object</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildPreviewControl(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlId)">
            <summary>
            Instantiates a preview control of the specified type.
            </summary>
            <param name="previewControlId">Must be a preview control defined in the file type definition</param>
            <para>
            Should only be called from the main thread, as controls must always be
            instantiated on the same thread as the application message pump.
            </para>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildPreviewApplication(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewApplicationId)">
            <summary>
            Instantiate a preview application of the specified type.
            </summary>
            <param name="previewApplicationId">Must be a preview application defined in the 
            file type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.BuildVerifierCollection">
            <summary>
            Called by the file type manager to instantiate a set of verifiers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.IsSupportedFilename(System.String)">
            <summary>
            Called by the file type manager to evaluate whether the file may be 
            of a type supported by this file type definition (based on its file name).
            </summary>
            <param name="nativeFilePath">The file to evaluate</param>
            <returns>True if the file name can be supported by this file type</returns>
            <remarks>
            <para>
            The file type manager calls this method before calling <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.SniffFile(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter,Sdl.Core.Settings.ISettingsBundle)"/> in order to perform a quick filtering
            to avoid having to sniff files unnecessarily.</para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.SniffFile(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter,Sdl.Core.Settings.ISettingsBundle)">
            <summary>
            Called by the file type manager to perform file sniffing in order to determine whether
            the file can be supported by this file type definition.
            </summary>
            <param name="nativeFilePath"></param>
            <param name="suggestedSourceLanguage"></param>
            <param name="suggestedCodepage"></param>
            <param name="messageReporter">Optional message reporter; if specified, it may be used
            by the file sniffer to report peculiarities detected in the file</param>
            <param name="settingsBundle">This settings bundle may be used by the file type Definition implementation
            to retrieve a settings group, and pass it to the file sniffer through the ISettingsAware implementation.</param>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.ComponentBuilder">
            <summary>
            The factory that is used to instantiate actual components for this file type.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition.CustomizationLevel">
            <summary>
            Determines if the file type definition is standard, customized standard or has been overridden by a file type profile.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFilterFramework1FilterDefinitionFile">
            <summary>
            A public interface for holding a spring .net framework created
            by a filter framework 1 filter definition file.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFilterFramework1FilterDefinitionFile.FilterFramework1FilterDefinitionFilePath">
            <summary>
            A string for holding the path or filename for the FF1 filter definition file
            if a permanent file needs to be created.  NB: normally only a temporary file
            will need to be created when adapting FF1 filter plug-ins.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFilterFramework1FilterDefinitionFile.FilterFramework1FilterDefinitionFileContent">
            <summary>
            The actual XML file content of the FF1 filter definition file. This is normally
            copied to a temporary file when calling FF1 filter plug-ins.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager">
            <summary>
            <para>
            This is the main access point for file conversion operations.
            </para>
            <para>
            The file type manager holds a prioritized list of file type definitions.
            The order of file type definitions is important, as it determines
            which file types take precedence over others in case multiple file type
            definitions could be used to process the same file.
            The most significant file type definition appears first in the list.
            </para>
            <para>
            In implementations, the file type manager is often pre-configured with a 
            set of file type definitions in the host application. However, the list can also 
            be explicitly manipulated by calling <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)"/>,
            <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition(System.Int32,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.RemoveFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)"/>.
            File type definitions can be instantiated from existing files or resources 
            using the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitionFactory"/>.
            </para>
            <para>
            Call one of the overloaded <c>GetConverter...()</c> methods to use the file type definitions to
            automatically detect file types and initialize a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter"/> to process the content.
            </para>
            </summary>
            <remarks>
            <para>
            Actual file type manager instances are often provided by the application that hosts the
            framework, in which case they are often pre-configured from some configuration (e.g.
            through the spring framework).
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ConfigurationVersionInformation">
            <summary>
            <para>
            Provides information on the version of the configuration information that is used to instantiate the current
            instance of the IFileTypeManager. This can be used to determine whether the instance is working with the 
            latest version of configuration information that the host application requires.
            </para>
            <para>
            For instance, applications may transfer their file type manager configuration information from one system to another.
            By checking this property the application can determine the state of the configuration, and perform additional
            tasks to ensure the configuration is in the format that the application requires (e.g. deploy additional filters
            that have only been released in the latest version of the application).
            </para>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitionFactory">
            <summary>
            Provides access to the implementation used to instantiate file type
            definitions. Can be used to explicitly create a file type definition
            that can be added to the manager by calling <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)"/>
            or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition(System.Int32,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)"/>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitions">
            <summary>
            <para>
            The file type definitions that are currently known to this instance of the file type manager.
            </para>
            <para>
            The order of the file type definitions defines their relative priority, with 
            the most significant file type definition appearing first.
            </para>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AutoLoadedFileTypes">
            <summary>
            Gets a list of filetypes which should be auto-loaded by the Host. This is used to indicate
            new file types in this particular version of the FileTypeManager
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.SettingsBundle">
            <summary>
            The settings bundle containing the settings used by components of the
            FileTypeManager. This property should be set before any operations
            requiring the use of settings are invoked (for example, <c>GetConverterToBilingual</c>
            implementations) or the operation may not work as expected.
            This property can return <c>null</c> if no settings bundle has been set.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FindFileTypeDefinition(Sdl.FileTypeSupport.Framework.FileTypeDefinitionId)">
            <summary>
            Locates a file type definition from the collection using ids.
            </summary>
            <param name="id"></param>
            <returns>The corresponding file type definition, or <c>null</c> if none</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})">
            <summary>
            <para>Returns the file type definitions that can operate on the specified file.</para>
            <para>Each file type definition is evaluated in order to determine if it can process the file,
            which may involve invoking the corresponding file sniffer.</para>
            <para>Only file type definitions that are enabled and not hidden are evaluated.</para>
            </summary>
            <remarks>
            <para>
            If more than one file type definition is returned, the order corresponds to the order 
            in which the definitions appear in the manager.
            </para>
            <para>
            If all file types are enabled, the first file type definition 
            returned is the one that is used if calling one of the <c>GetConverter</c> overloads.
            </para>
            <para>
            Any messages generated during file sniffing are reported to the optional <paramref name="messageHandler"/>.
            </para>
            </remarks>
            <param name="nativeFilePath">The path to the file which is 'sniffed' in order to determine applicable file type definitions.</param>
            <param name="messageHandler">Optional handler for messages reported by any file sniffers invoked in the process. 
            You may pass <c>null</c> for this parameter.</param>
            <returns>File type definitions that can operate on the file specified, and the information
            from their file sniffers</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})">
            <summary>
            <para>Returns the file type definitions that can operate on the specified file.</para>
            <para>Each file type definition is evaluated in order to determine if it can process the file,
            which may involve invoking the corresponding file sniffer.</para>
            <para>Only file type definitions that are enabled and not hidden are evaluated.</para>
            </summary>
            <remarks>
            <para>
            If more than one file type definition is returned, the order corresponds to the order 
            in which the definitions appear in the manager.
            </para>
            <para>
            If all file types are enabled, the first file type definition 
            returned is the one that is used if calling one of the <c>GetConverter</c> overloads.
            </para>
            <para>
            Any messages generated during file sniffing are reported to the optional <paramref name="messageHandler"/>.
            </para>
            </remarks>
            <param name="nativeFilePath">The path to the file which is 'sniffed' in order to determine applicable file type definitions.</param>
            <param name="messageHandler">Optional handler for messages reported by any file sniffers invoked in the process. 
            <param name="suggestedSourceLanguage"></param>
            <param name="suggestedCodepage"></param>
            You may pass <c>null</c> for this parameter.</param>
            <returns>File type definitions that can operate on the file specified, and the information
            from their file sniffers</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})">
            <summary>
            <para>Returns the first file type definition that can operate on the specified file.</para>
            </summary>
            <param name="nativeFilePath"></param>
            <param name="messageHandler"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})">
            <summary>
            <para>Returns the first file type definition that can operate on the specified file.</para>
            </summary>
            <param name="nativeFilePath"></param>
            <param name="suggestedSourceLanguage"></param>
            <param name="suggestedCodepage"></param>
            <param name="messageHandler"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)">
            <summary>
            Appends a file type definition to the collection.
            </summary>
            <remarks>
            The file type definition is added last in the list of known file type definitions.
            </remarks>
            <param name="fileTypeDefinition"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)">
            <summary>
            Creates a file type definition based on the Id and a profile override.
            The FilterManager must discover the actual component builder associated with this definition and create a new definition based on it.
            If a profileOverride has been supplied, then this should override the FileTypeInformation for that definition.
            </summary>
            <param name="fileTypeDefinitionId">ID of component builder which should be used to create this filter</param>
            <param name="profileOverride">profile used to override the FileTypeInformation</param>
            <returns>The created IFileTypeDefinitionInstance</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder,Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)">
            <summary>
            Creates a file type definition based on component builder and overrides the FileTypeInformation with the supplied profile override.
            </summary>
            <param name="componentBuilder">The component builder used to initialize the FileTypeDefinition</param>
            <param name="profileOverride">profile used to override the FileTypeInformation</param>
            <returns>The created IFileTypeDefinitionInstance</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(System.String)">
            <summary>
            Creates a file type definition based on the filter definition ID of component builder which should be used
             to create this filter.
            </summary>
            <param name="fileTypeDefinitionId">ID of component builder which should be used to create this filter</param>
            <returns>The created IFileTypeDefinitionInstance</returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition">
            <summary>
            The file type definitions that should be used as the default bilingual file type, or <c>null</c> if none.
            </summary>
            <remarks>
            <para>
            By default, this property returns the first file type definition in the list for which the 
            <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.IsBilingualDocumentFileType"/> is true.
            </para>
            <para>
            The default bilingual file type can be explicitly changed by setting this property to another
            file type definition in the list that is also a bilingual document file type.
            </para>
            <para>
            Attempting to set this property to a file type definition that is not in the list will yield 
            a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException"/>.
            </para>
            <para>
            Attempting to set this property to a file type definition that is not a bilingual document file type will
            yield a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.NotBilingualFileTypeException"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition(System.Int32,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)">
            <summary>
            Inserts a file type definition into the collection at a specific priority position. 
            </summary>
            <param name="index">0-based index indicating the file type definition's priority in relation to the
            other currently known file type definitions.</param>
            <param name="filterDefinition"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.RemoveFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)">
            <summary>
            Removes a file type definition from the collection.
            If no such file type definition exists in the collection, nothing happens.
            </summary>
            <param name="filterDefinition"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ClearFileTypeDefinitions">
            <summary>
            Removes all file type definitions from the collection.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(System.String[],Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})">
            <summary>
            Creates and initializes a file converter using the filters that best match a set of native files.
            The file converter can then be used to process all of the files as one document. The specified
            bilingual writer will be used for output.
            
            The file type definitions are tested in sequence, and the first file type definition that
            matches a file is used for each file. The following steps are used to determine if 
            a file type definition matches a file:
            <list type="number">
            <item><description>The regular expression is evaluated against the name of the file to be converted. If it does not match,
            the file type definition is not used.</description></item>
            <item><description>If a file sniffer is defined for the file type definition, it gets applied to the file. If the file sniffer
            does not indicate that the file is supported, the file type definition is not used.</description></item>
            </list>
            If no matching file type definition is found, a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException"/> is thrown.
            </summary>
            <param name="nativeFilePaths">The native files to be converted</param>
            <param name="writer">Bilingual writer to use as output with the converter</param>
            <param name="outputSettingsProvider">Implementation of the output settings provider for bilingual
            document files. Will be passed to the multi-file converter and used for writing bilingual document files.
            If the bilingual document generator does not have a bilingual document file writer, you can pass <c>null</c>
            as parameter.</param>
            <param name="sourceLanguage">Expected source language of the files. 
            <para>The same source (and target) language must be used for all the files processed with a single converter instance.</para>
            <para>If the language can be determined automatically
            from the content of the file (e.g. when reading a bilingual format such as TTX), this parameter may be ignored by the parser.
            If this parameter is left undefined, it is up to the file sniffer and/or parser to try to determine the
            language. Parser components may report an error or a warning if they cannot reliably identify the language.</para>
            </param>
            <param name="suggestedCodepage">A rough guess on what encoding the files use. This is normally set to the default code page
            for the language, but can also be <c>null</c>. This serves only as a hint. A file sniffer can be used to determine the actual encoding for each file. An 
            undefined codepage object can be used if no encoding can be guessed. It is then up to the file sniffer and/or parser 
            to best determine the encoding, and report an error if they fail or a warning if the result is not definite.
            </param>
            <param name="messageHandler">An (optional) message handler implementation that will receive any messages reported
            from file sniffers invoked in the process. If a converter is returned, this message handler will also 
            be connected to the <see cref="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message"/> event on the converter. You may specify <c>null</c> for this parameter.</param>
            <returns>A file converter object initialized to read the files, based on information from the best matching file type definitions.
            To use the file converter, add your own bilingual processors to the converter and call
            <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext"/> to process the native files.</returns>
            <exception cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException"> thrown if there are files for which no file type definition in the file type manager can be used.</exception>
            <remarks>
            To convert bilingual files to native, you would typically rather use <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})"/>.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String[],System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})">
            <summary>
            Creates and initializes a file converter in order to create a bilingual file in the default format.
            <para>
            The converter will automatically use the filters that best match the native files to be converted.
            These converters are selected as described below.
            </para>
            <para>
            The file type definitions are each tested in sequence, and the first file type definition that
            matches a file is used for each file. The following steps are used to determine if 
            a file type definition matches a file:
            </para>
            <list type="number">
            <item><description>The regular expression is evaluated against the name of the file to be converted. If it does not match,
            the file type definition is not used.</description></item>
            <item><description>If a file sniffer is defined for the file type definition, it is applied to the file. If the file sniffer
            does not indicate that the file is supported, the file type definition is not used.</description></item>
            </list>
            If no matching file type definition is found, a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException"/> is thrown.
            </summary>
            <param name="nativeFilePaths">The native files to be converted.</param>
            <param name="bilingualOutputFilePath">Full path to the bilingual file to be created.</param>
            <param name="sourceLanguage">Expected source language of the files. 
            <para>The same source (and target) language must be used for all the files processed with a single converter instance.</para>
            <para>If the language can be determined automatically
            from the content of the file (e.g. when reading a bilingual format such as TTX), this parameter may be ignored by the parser.
            If this parameter is left undefined, it is up to the file sniffer and/or parser to try to determine the
            language. Parser components may report an error or a warning if they cannot reliably identify the language.</para>
            </param>
            <param name="suggestedCodepage">A rough guess of what encoding the files use. This is normally set to the default codepage
            for the language, but can also be <c>null</c>. This serves only as a hint. A file sniffer can be used to determine the actual encoding for each file. An 
            undefined codepage object can be used if no encoding can be guessed. It is then  up to the file sniffer and/or parser 
            to best determine the encoding and report an error if they fail, or a warning if the result is not definite.
            </param>
            <param name="messageHandler">An (optional) message handler implementation that will receive any messages reported
            from file sniffers invoked in the process. If a converter is returned, this message handler will also have
            been connected to the <see cref="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message"/> event on the converter. You may specify <c>null</c> for this parameter.</param>
            <returns>A file converter object initialized to read the files, based on information from the best matching file type definitions.
            To use the file converter, add your own bilingual processors to the converter and call
            <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext"/> to process the native files.</returns>
            <exception cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException"> thrown if there are files for which no file type definition in the file type manager can be used.</exception>
            <remarks>
            To convert bilingual files to native you would typically use <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})"/>.
            </remarks>
            <example>
            This example shows how this method could be used convert a bunch of native files into a single SDL XLIFF document.
            <code>
            void ConvertFilesToXliff(IFileTypeManager manager, string[] nativeFiles, CultureInfo language, Codepage suggestedCodepage, string xliffFilePath)
            {
            	IMultiFileConverter converter = manager.GetConverterToDefaultBilingual(nativeFiles[], xliffFilePath, language, suggestedCodepage, null, settingsBundle);
            	converter.Parse();
            }
            </code>
            </example>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String[],Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})">
            <summary>
            Creates and initializes a file converter for reading native files, doing processing on them and
            creating native files as output in one single pass.
            <para>
            The file type definitions are tested in sequence, and the first file type definition that
            matches a file is used for each file. The following steps are used to determine if 
            a file type definition matches a file:
            </para>
            <list type="number">
            <item><description>The regular expression is evaluated against the name of the file to be converted. If it does not match,
            the file type definition is not used.</description></item>
            <item><description>If a file sniffer is defined for the file type definition, it is applied to the file. If the file sniffer
            does not indicate that the file is supported, the file type definition is not used.</description></item>
            </list>
            If no matching file type definition is found, a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException"/> is thrown.
            </summary>
            <param name="nativeFilePaths">The native files to be converted</param>
            <param name="outputSettingsProvider">Implementation of the output settings provider
            that will be passed to the multi-file converter and used for writing files as native.
            
            <para>The returned converter will be 
            initialized to use this file type manager to create native file generators, and the specified
            output settings provider will be used to determine the output properties for the native files
            when they are created.</para>
            </param>
            <param name="sourceLanguage">Expected source language of the files.
            <para>The same source (and target) language must be used for all the files processed with a single converter instance.</para>
            <para>If the language can be determined automatically
            from the content of the file (e.g. when reading a bilingual format such as TTX), this parameter may be ignored by the parser.
            If this parameter is left undefined, it is up to the file sniffer and/or parser to try to determine the
            language. Parser components may report an error or a warning if they cannot reliably identify the language.</para>
            </param>
            <param name="suggestedCodepage">A rough guess of what encoding the files use. This is normally set to the default codepage
            for the language, but can also be <c>null</c>. This serves only as a hint. A file sniffer can be used to determine the actual encoding for each file. An 
            undefined codepage object can be used if no encoding can be guessed. It is then up to the file sniffer and/or parser 
            to best determine the encoding, and report an error if they fail or a warning if the result is not definite.
            </param>
            <param name="messageHandler">An (optional) message handler implementation that will receive any messages reported
            from file sniffers invoked in the process. If a converter is returned, this message handler will also be
            connected to the <see cref="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message"/> event on the converter. You may specify <c>null</c> for this parameter.</param>
            <returns>A file converter object initialized to read the files and write corresponding output files based on the 
            output settings provider.
            To use the file converter, add your own bilingual processors to the converter and call
            <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext"/> to process the native files.</returns>
            <exception cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException">thrown if there are files for which no file type definition in the file type manager can be used.</exception>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String[],System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})">
            <summary>
            Creates and initializes a file converter for reading native files, without passing the output to anything.
            </summary>
            <param name="nativeFilePaths">The native files to be converted</param>
            <param name="sourceLanguage">Expected source language of the files. 
            <para>The same source (and target) language must be used for all the files processed with a single converter instance.</para>
            <para>If the language can be determined automatically
            from the content of the file (e.g. when reading a bilingual format such as TTX), this parameter may be ignored by the parser.
            If this parameter is left undefined, it is up to the file sniffer and/or parser to try to determine the
            language. Parser components may report an error or a warning if they cannot reliably identify the language.</para>
            </param>
            <param name="suggestedCodepage">A rough guess of what encoding the files use. This is normally set to the default codepage
            for the language, but can also be <c>null</c>. This serves only as a hint. A file sniffer can be used to determine the actual encoding for each file. An 
            undefined codepage object can be used if no encoding can be guessed. It is then up to the file sniffer and/or parser 
            to best determine the encoding and report an error if they fail or a warning if the result is not definite.
            </param>
            <param name="messageHandler">An (optional) message handler implementation that will receive any messages reported
            from file sniffers invoked in the process. If a converter is returned, this message handler will also be
            connected to the <see cref="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message"/> event on the converter. You may specify <c>null</c> for this parameter.</param>
            <returns>A file converter object initialized to read the files, based on information from the best matching file type definitions.</returns>
            <exception cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException">Thrown if there are files for which no file type definition in the file type manager can be used.</exception>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})">
            <summary>
            Creates and initializes a file converter for a single file, typically of the default bilingual file type.
            The specified bilingual document generator will be used for output.
            
            The file type definitions are tested in order, and the first file type definition that
            matches the input file is used. The following steps are used to determine if 
            a file type definition matches the file:
            <list type="number">
            <item><description>The regular expression is evaluated against the name of the file to be converted. If it does not match,
            the file type definition is not used.</description></item>
            <item><description>If a file sniffer is defined for the file type definition, it gets applied to the file. If the file sniffer
            does not indicate that the file is supported, the file type definition is not used.</description></item>
            </list>
            If no matching file type definition is found, a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException"/> is thrown.
            </summary>
            <param name="bilingualInputFilePath">The file to be converted. The language and code page of this file is expected
            to be automatically detected by the file sniffer, no external hints should be necessary.</param>
            <param name="writer">Bilingual writer to use as output with the converter</param>
            <param name="outputSettingsProvider">Implementation of the output settings provider for bilingual
            document files. Will be passed to the multi-file converter and used for writing bilingual document files.
            If the bilingual document generator does not have a bilingual document file writer, you can pass <c>null</c>
            for this parameter.</param>
            <param name="messageHandler">An (optional) message handler implementation that will receive any messages reported
            from file sniffers invoked in the process. If a converter is returned, this message handler will also be
            connected to the <see cref="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message"/> event on the converter. You may specify <c>null</c> for this parameter.</param>
            <returns>A file converter object initialized to read the file, based on information from the best matching file type definition.
            To use the file converter, add your own bilingual processors to the converter, and call
            <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext"/> to process the file.</returns>
            <exception cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException">Thrown if no file type definition in the file type manager can be used.</exception>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String,System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})">
            <summary>
            Creates and initializes a file converter in order to read a single (typically bilingual) input file and
            write a bilingual output file in the default format.
            <para>
            The converter will automatically use the file type that best matches the file to be converted.
            </para>
            <para>
            The file type definitions are each tested in sequence, and the first file type definition that
            matches the input file is used. The following steps are used to determine if 
            a file type definition matches:
            </para>
            <list type="number">
            <item><description>The regular expression is evaluated against the name of the file to be converted. If it does not match,
            the file type definition is not used.</description></item>
            <item><description>If a file sniffer is defined for the file type definition, it is applied to the file. If the file sniffer
            does not indicate that the file is supported, the file type definition is not used.</description></item>
            </list>
            If no matching file type definition is found, a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException"/> is thrown.
            </summary>
            <param name="bilingualInputFilePath">The native files to be converted</param>
            <param name="bilingualOutputFilePath">Full path to the bilingual file to be created</param>
            <param name="messageHandler">(optional) A message handler implementation that will receive any messages reported
            from file sniffers invoked in the process. If a converter is returned, this message handler will also be
            connected to the <see cref="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message"/> event on the converter. You may specify <c>null</c> for this parameter.</param>
            <returns>A file converter object initialized to read the file, based on information from the best matching file type definition
            that will create an output file in the default bilingual format with the specified name.
            To use the file converter, add your own bilingual processors to the converter and call
            <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext"/>.</returns>
            <exception cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException">Thrown if no file type definition in the file type manager can be used.</exception>
            <remarks>
            To convert bilingual files to native you would typically use <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})"/>.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})">
            <summary>
            Creates a converter for parsing a single file and writing native output files.
            <para>This is intended for bilingual file types, in which the languages and codepage can be deducted
            automatically from the file content.</para>
            
            <para>This version is typically used for parsing SDL XLIFF documents (where support for these
            have been installed as another bilingual file type). However, it could also be used
            for processing individual native files in which source language (and codepage) can be deducted from 
            the file content.</para>
            </summary>
            <remarks>
            If language (and/or codepage) cannot be successfully determined by the file type components, an exception
            should be thrown.</remarks>
            <param name="bilingualInputFilePath">Full path to a bilingual (typically SDL XLIFF) file</param>
            <param name="outputSettingsProvider">(Optional) implementation of the output settings provider
            that will be passed to the multi-file converter and used for writing files as native.
            
            <para>If this parameter is provided (i.e. not null), the returned converter will be 
            initialized to use this file type manager to create native file generators, and the specified
            output settings provider will be used to determine output properties for the native files
            when they are created.</para>
            </param>
            <param name="messageHandler">An (optional) message handler implementation that will receive any messages reported
            from file sniffers invoked in the process. If a converter is returned, this message handler will also 
            be connected to the <see cref="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message"/> event on the converter. You may specify <c>null</c> for this parameter.</param>
            <returns>A file converter that may be used to convert bilingual files to native output files</returns>
            <example>
            The following code example shows how to convert an SDL XLIFF file into native target language files.
            <code>
            void SaveAsTarget(IFileTypeManager manager, string xliffFilePath, string outputFolder)
            {
               FolderPathProvider pathProvider = new FolderPathProvider(outputFolder);
               IMultiFileConverter converter = manager.GetConverterToNative(xliffFilePath, pathProvider.Provider, settingsBundle);
               converter.AddBilingualProcessor(new SourceToTargetCopier(ExistingContentHandling.Preserve));
               converter.Parse();
            }
            </code>
            Note that a SourceToTargetCopier object is used to ensure that ParagraphUnits without target content are output as source
            (they would otherwise be emitted as nothing, which could lead to unexpected results).
            </example>
            <remarks>
            To process native files you would typically rather use <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String[],Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})"/>.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})">
            <summary>
            Creates and initializes a file converter that can be used to read a single bilingual file, without
            outputting content to anything in particular.
            </summary>
            <param name="bilingualInputFilePath">Name of the bilingual file to read</param>
            <param name="messageHandler">An (optional) message handler implementation that will receive any messages reported
            from file sniffers invoked in the process. If a converter is returned, this message handler will also have
            been connected to the <see cref="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message"/> event on the converter. You may specify <c>null</c> for this parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider)">
            <summary>
            Creates and initializes a file converter for an existing bilingual parser and writer.
            </summary>
            <param name="bilingualParser">Bilingual parser to be used for input with the converter</param>
            <param name="writer">Bilingual writer to use as output with the converter</param>
            <param name="outputSettingsProvider">Implementation of the output settings provider for bilingual
            document files. Will be passed to the multi-file converter and used for writing bilingual document files.
            If the bilingual document generator does not have a bilingual document file writer, you can pass <c>null</c>
            for this parameter.</param>
            <returns>A file converter object initialized to read content using the specified parser and output
            to the specified writer.
            To use the file converter, add your own bilingual processors to the converter, and call
            <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext"/> to process the content.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,System.String)">
            <summary>
            Creates and initializes a file converter to write a bilingual output file in the default format, reading
            input from a specified bilingual parser.
            </summary>
            <param name="bilingualParser">The parser to be used for input</param>
            <param name="bilingualOutputFilePath">Full path to the bilingual file to be created</param>
            <returns>A file converter object initialized to read content using the bilingual parser and write
            an output file in the default bilingual format with the specified name.
            To use the file converter, add your own bilingual processors to the converter and call
            <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext"/>.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider)">
            <summary>
            Creates a converter for writing native output files for content read by a specified bilingual parser.
            </summary>
            <param name="bilingualParser">The parser that will be used for input</param>
            <param name="outputSettingsProvider">(Optional) implementation of the output settings provider
            that will be passed to the multi-file converter and used for writing files as native
            
            <para>If this parameter is provided (i.e. not <c>null</c>), the returned converter will be 
            initialized to use this file type manager to create native file generators, and the specified
            output settings provider will be used to determine output properties for the native files
            when they are created.</para>
            </param>
            <returns>A file converter that may be used to convert bilingual content to native output files</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser)">
            <summary>
            Creates and initializes a file converter to use a specific bilingual parser, and not output to anything in particular.
            </summary>
            <param name="bilingualParser"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractor(System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter)">
            <summary>
            Helper function used by the file type manager implementation and other components that need to 
            create components that are normally used through the file converters objects.
            <para>Determines the best matching file type for the specified file according to the rules
            described in the documentation of <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String[],System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})"/> and returns an initialized 
            file extractor that can be used to process the file.</para>
            </summary>
            <param name="filePath"></param>
            <param name="cultureInfo">Source CultureInfo of the file</param>
            <param name="suggestedCodepage">Suggested codepage of the file</param>
            <param name="messageReporter">(Optional) message reporter implementation that will be passed to file sniffers</param>
            <returns></returns>
            <exception cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException">Thrown if none of the file type definitions can be used to process the file</exception>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)">
            <summary>
            Helper function used by the file type manager implementation and other components that need to
            create a file generator component from a specific file type definition.
            <para>
            Creates and initializes a file generator that can be used to write native output files.
            </para>
            </summary>
            <param name="fileConversionProperties">Properties with information on the file being generated,
            including the id of the file type definition used to convert the original native file. 
            This can either be the persistent file properties that were created when reading
            the original native file, or they can be retrieved from the bilingual parser.</param>
            <returns>
            A file generator object that can be used to create a single native file.
            </returns>
            <remarks>
            This method may be used as a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.NativeGeneratorProvider"/> delegate in the <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter"/>.
            <example>
            The following example shows how to use this method with a multi file converter:
            <code>
            void SetNativeGeneratorProvider(IFileTypeManager manager, IMultiFileConverter converter)
            {
               converter.NativeGeneratorProvider = new NativeGeneratorProvider(manager.BuildFileGenerator);
            }
            </code>
            </example>
            </remarks>
            <exception cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException">thrown if the specified file type definition ID is not 
            one of the file type definitions in the file type manager</exception>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGeneratorWithVerifiers(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)">
            <summary>
            This is an alternative implementation of the <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)"/> method, which creates a generator with
            objects that will perform native verification of the generated file.
            </summary>
            <param name="fileConversionProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)">
            <summary>
            Helper function used by the file type manager implementation and other components that need to
            instantiate a bilingual generator for a specific file type.
            </summary>
            <remarks>
            </remarks>
            <param name="filterDefinitionToUse"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildDefaultBilingualGenerator">
            <summary>
            Helper function that constructs an instance of a generator for the default bilingual file format,
            if set.
            </summary>
            <remarks></remarks>
            <seealso cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition"/>
            <returns><c>null</c> if no default bilingual file type has been set</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter)">
            <summary>
            Helper function to create a bilingual generator for a bilingual document writer, so that
            it can be used with relevant overloads to <c>GetConverter</c>.
            </summary>
            <param name="bilingualWriter">a bilingual document writer, capable of serializing the
            bilingual content model</param>
            <returns>a bilingual document generator instance where the bilingual writer is assigned
            to the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator.Writer"/> property.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)">
            <summary>
            Helper method to create a file extractor so that it can be used by filter component builders.
            </summary>
            <param name="fileReader"></param>
            <param name="componentBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)">
            <summary>
            Helper method to create a sub-content extractor so that it can be used by filter component builders.
            </summary>
            <param name="fileReader"></param>
            <param name="componentBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)">
            <summary>
            Helper method to create a sub-content file extractor so that it can be used by filter component builders.
            </summary>
            <param name="subContentReader"></param>
            <param name="componentBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)">
            <summary>
            Helper method to create a file extractor so that it can be used by filter component builders.
            </summary>
            <param name="fileReader"></param>
            <param name="componentBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser)">
            <summary>
            Helper method to create a native extractor so that it can be used by filter component builders.
            </summary>
            <param name="nativeFileParser"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser)">
            <summary>
            Helper method to create a native sub-content extractor so that it can be used by filter component builders.
            </summary>
            <param name="nativeFileParser"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileTypeInformation">
            <summary>
            Helper method to create file type information so that it can be used by filter component builders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter)">
            <summary>
            Helper method to create a file generator so that it can be used by filter component builders.
            </summary>
            <param name="bilingualWriter"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter)">
            <summary>
            Helper method to create a native generator so that it can be used by filter component builders.
            </summary>
            <param name="nativeFileWriter"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator)">
            <summary>
            Helper method to create a file generator so that it can be used by filter component builders.
            </summary>
            <param name="nativeGenerator"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter)">
            <summary>
            Helper method to create a sub content generator so that it can be used by filter component builders. 
            </summary>
            <param name="bilingualWriter"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter)">
            <summary>
            Helper method to create a native sub content generator so that it can be used by filter component builders.
            </summary>
            <param name="nativeFileWriter"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator)">
            <summary>
            Helper method to create a sub content generator so that it can be used by filter component builders.
            </summary>
            <param name="nativeSubContentGenerator"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildPreviewSetsFactory">
            <summary>
            Helper method to create a preview sets factory so that it can be used by filter compnent builders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildQuickTagsFactory">
            <summary>
            Helper method to create a QuickTags factory so that it can be used by filter component builders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildVerifierCollection">
            <summary>
            Helper method to create a verifier collection so that it can be used by filter component builders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildGeneratorInfo">
            <summary>
            Helper method to create generator information so that it can be used by filter component builders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildAdditionalGeneratorsInfo(Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo[])">
            <summary>
            Helper method to create additional generator information so that it can be used by filter component builders.
            </summary>
            <param name="generators"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewControlHandler">
            <summary>
            Delegate type to allow specific implementations of IInteractivePreviewControl
            to send events in a standardised way
            </summary>
            <param name="component"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualParserFactory">
            <summary>
            Used to allow the component to retrieve a bilingual parser whenever it needs one
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IInteractivePreviewComponent">
            <summary>
            A control representing the native type of a document with methods
            to allow scrolling, searching and replacement of text within the
            native document.
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IInteractivePreviewComponent.WindowSelectionChanged">
            <summary>
            Notifies listeners that the selection is now different
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IInteractivePreviewComponent.GetControl">
            <summary>
            Gets the control to embed into the view
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IInteractivePreviewComponent.Generate(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualParserFactory)">
            <summary>
            Generates the native preview using the filter manager
            and bilingual parser provided. Populates the control
            with the resulting document.
            </summary>
            <remarks>
            If you call this method before GetControl, it will
            fail silently. This method is intended to be thread-
            safe, and will refuse to create any UI controls.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IInteractivePreviewComponent.Close">
            <summary>
            Closes the document in whatever way is necessary, and
            cleans up any left-over resources.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IInteractivePreviewComponent.ScrollToSegment(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference)">
            <summary>
            Scrolls the native document window so that the segment
            becomes visible.
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IInteractivePreviewComponent.CreateScratchDocument(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference)">
            <summary>
            Creates a scratch document containing just the specified segment and returns the file name.
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IInteractivePreviewComponent.UpdateSegment(Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference,System.String)">
            <summary>
            Updates the text in the native document to match the new text of
            the specified segment.
            </summary>
            <param name="segment">The segment to update</param>
            <param name="filename">The filename of the native document to update</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IInteractivePreviewComponent.GetSelectedSegment">
            <summary>
            Returns an identifier for the currently selected segment in the preview document
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IInteractivePreviewComponentFactory">
            <summary>
            Simple class for creating generator classes used for generating
            and populating native document previews.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IInteractivePreviewComponentFactory.CreateComponent">
            <summary>
            Creates and return the relevant type of generator
            for the file type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter">
            <summary>
            Used for converting and processing content from one or more files as a single bilingual document.
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message">
            <summary>
            Raised when a message is reported from a file type component.
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Progress">
            <summary>
            This event is fired when any of the the native or bilingual parser fires progress events.
            <para>The reported progress constitutes the computed total progress for all files being processed.</para>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.PropertiesFactory">
            <summary>
            Convenience getter for the properties factory that will be used by the converters and file type components.
            The implementation should return the properties factory from the document item factory, or <c>null</c> if none.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ItemFactory">
            <summary>
            The bilingual content model item factory that will be used by the converters and bilingual file type components
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DocumentInfo">
            <summary>
            Common properties communicated to all bilingual processing components
            </summary>
            <remarks>
            <para>
            Note that changing the document properties by accessing this property will not automatically update
            language settings for any of the extractors. Call <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.SetDocumentInfo(Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties,System.Boolean)"/> or <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ApplyDocumentPropertiesToExtractors"/> to do that.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.SharedObjects">
            <summary>
            The shared objects that will be communicated across all components
            that are used in content processing. Components that implement <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjectsAware"/> will
            receive this interface via the <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjectsAware.SetSharedObjects(Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects)"/> method before
            they are used for content processing.
            </summary>
            <remarks>
            <para>
            Applications may publish objects to be used by file type components during the conversion process
            by calling <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.PublishSharedObject(System.String,System.Object,Sdl.FileTypeSupport.Framework.NativeApi.IdConflictResolution)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Extractors">
            <summary>
            Read-only access to the file extractors used for reading files.
            </summary>
            <remarks>The order of the extractors reflects the order in which they will be used.
            <para>You must use <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.AddExtractor(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor)"/> and <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.RemoveExtractor(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor)"/>
            if you want to modify the collection.</para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.BilingualDocumentGenerator">
            <summary>
            The purpose of a bilingual generator is to serialize all bilingual content (potentially
            from different native files) into a single bilingual output (e.g. an XLIFF file) that will act as 
            a persistent storage for the bilingual content, from which it can be fully de-serialized.
            </summary>
            <remarks>
            <para>
            If set, the input of the bilingual generator is used as the last bilingual content processor.
            </para>
            <para>
            When a bilingual generator is specified, the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.NativeGeneratorProvider"/> and 
            <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.OutputPropertiesProvider"/> are not used, even if they are set.
            </para>
            <para>
            Set this to <c>null</c> if you are not writing to an intermediate bilingual file format.
            </para>
            <para>
            When set, the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.BilingualDocumentOutputPropertiesProvider"/> is used.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.NativeGeneratorProvider">
            <summary>
            When converting to native format, this property represents the 
            provider that will attempt to create IFileGenerator instances,
            and provide output settings when needed by the framework.
            
            This property should be null if not converting to native format.
            </summary>
            <remarks>
            <para>
            The <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)"/> method can be used
            as an implementation for this delegate.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.BilingualVerifiersProvider">
            <summary>
            In order to add the file specific verifiers into the processing chain, 
            we can specify a BilingualVerifiersProvider. A default implementation
            is provided by the FileTypeManager. If no bilingual 
            verification is required, this property should be left null.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.OutputPropertiesProvider">
            <summary>
            When converting to native format, this property must be set.
            This delegate is called by the converter to set the output
            filename, encoding, language, etc. for each native file produced.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DependencyFileLocator">
            <summary>
            When parsing intermediate bilingual documents this property may be set
            to provide assistance in locating missing linked dependency files.
            The provided delegate will be passed to any bilingual document parsers 
            before they are used for processing.
            </summary>
            <remarks>
            <para>
            If not provided, and a dependency file cannot be located, a warning message
            the parser may still attempt to process the file, but it is recommended
            to generate a warning message.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.BilingualDocumentOutputPropertiesProvider">
            <summary>
            When writing bilingual document files (e.g. SDL XLIFF), this property must be set.
            The delegate is called by the converter to determine the 
            file name of the bilingual document to be created.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.BilingualDocumentOutputProperties">
            <summary>
            After saving a bilingual document, this property provides access to the output 
            properties that were used. This can be used to find the file name of the created
            output file and to determine which dependency files are referenced (linked) to
            the file rather than embedded inside the file.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DetectedLanguagesCorrespondToDocumentProperties">
            <summary>
            <c>True</c> if the source and target languages in the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DocumentInfo"/> correspond
            to the languages detected by the file sniffers for each of the extractors.
            <c>False</c> if any of the extractors is certain that its file is using a different source or target language.
            </summary>
            <remarks>
            <para>
            The method <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.UpdateDocumentPropertiesFromExtractors"/> can be called to set the current document
            properties from the detected languages. However, if there are multiple extractors that detect with certainty different languages,
            this will not work.
            </para>
            <para>
            You can ensure that specific languages get applied to all extractors by updating the document properties and by calling <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ApplyDocumentPropertiesToExtractors"/>.
            </para>
            <para>
            The <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DetectedSourceLanguage"/> and <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DetectedTargetLanguage"/> properties can be used to retrieve the 
            source and target language detected by the extractors if a common language is detected and can be used. You can also access the detected
            source and target languages explicitly for each extractor by looking at <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.FileConversionProperties"/> and 
            checking the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.FileSnifferInfo"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DetectedSourceLanguage">
            <summary>
            The source language for all extractors, or <c>null</c> if conflicting source languages have been determined with certainty. The detection level
            that is returned is the highest detection level for the source language provided by the extractors.
            </summary>
            <remarks>
            <para>
            You can also access the detected source and target languages explicitly for each extractor 
            by looking at <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo"/> in the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.FileConversionProperties"/>.
            </para>		
            </remarks>
            <seealso cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DetectedLanguagesCorrespondToDocumentProperties"/>
            <seealso cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DetectedTargetLanguage"/>
            <seealso cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.UpdateDocumentPropertiesFromExtractors"/>
            <seealso cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ApplyDocumentPropertiesToExtractors"/>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DetectedTargetLanguage">
            <summary>
            The target language for all extractors, or <c>null</c> if conflicting target languages have been determined with certainty. The detection level
            that is returned is the highest detection level for the target language provided by the extractors.
            </summary>
            <remarks>
            <para>
            You can also access the detected source and target languages explicitly for each extractor 
            by looking at <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo"/> in the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor.FileConversionProperties"/>.
            </para>		
            </remarks>
            <seealso cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DetectedLanguagesCorrespondToDocumentProperties"/>
            <seealso cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DetectedTargetLanguage"/>
            <seealso cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.UpdateDocumentPropertiesFromExtractors"/>
            <seealso cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ApplyDocumentPropertiesToExtractors"/>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.SetDocumentInfo(Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties,System.Boolean)">
            <summary>
            Set document properties, optionally updating source and target languages for each of the extractors.
            </summary>
            <param name="newDocumentInfo"></param>
            <param name="applyToAllExtractors"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.UpdateDocumentPropertiesFromExtractors">
            <summary>
            Set source and target languages of the document properties from the properties detected by the file sniffers
            associated with the extractors. If different extractors have detected differing languages with certainty, this method does not change
            the document properties and returns <c>false</c>. If different languages are detected with a detection level less then certain, the language with 
            the highest detection level will be used. If there is more than one language, the first one will take precedence.
            <para>
            If a target language has been set in the document properties, but no target language has been detected in the extractors,
            the target language of the document properties will be set to an uninitialized value.
            </para>
            </summary>
            <returns>
            <c>True</c> if there were no conflicting languages and the document properties have been updated.
            </returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ApplyDocumentPropertiesToExtractors">
            <summary>
            Updates the file properties for each of the extractors to use the source and target languages specified in the document
            properties.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.SynchronizeDocumentProperties">
            <summary>
            Properly synchronizes document properties between the converter and its extractors.
            If document properties are available from a bilingual parser, they will be used. Otherwise,
            the document properties will be deducted by querying existing extractors for languages.
            </summary>
            <remarks>
            <para>
            If the first extractor has a bilingual parser, use its document properties if available (by 
            calling <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.SetDocumentInfo(Sdl.FileTypeSupport.Framework.BilingualApi.IDocumentProperties,System.Boolean)"/>).
            Otherwise, call <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.UpdateDocumentPropertiesFromExtractors"/> to retrieve the properties from
            the extractors, and if they are valid (<see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.DetectedLanguagesCorrespondToDocumentProperties"/> returns true),
            communicate them to all the extractors (by calling <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ApplyDocumentPropertiesToExtractors"/>).		
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse">
            <summary>
            Initializes the file type components and repeatedly invokes the ParseNext method on the parser until all content has been processed.
            
            If there is a native parser, it will be used. Otherwise ,if there is a bilingual parser, that parser will be used.
            If no parser has been specified, an exception will be thrown.
            </summary>
            <remarks>Always call this or the ParseNext method on the converter, never directly on the parser, since this will not
            initialize the file type components properly.</remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext">
            <summary>
            Invokes the ParseNext() method on the appropriate parser, causing a chunk of content to be processed.
            Ensures that the the parser components are initialized before parsing commences for the first time.
            </summary>
            <returns>True if there is more content to be parsed</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.AddExtractor(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor)">
            <summary>
            Adds another file converter to be used. The converter should be initialized properly.
            </summary>
            <param name="extractor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.InsertExtractor(System.Int32,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor)">
            <summary>
            Inserts a file converter to be used at a specific index. The converter should be
            initialized properly.
            </summary>
            <param name="index"></param>
            <param name="extractor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.RemoveExtractor(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor)">
            <summary>
            Removes the specified converter.
            </summary>
            <param name="extractor">Converter to be removed</param>
            <returns>True if the converter was part of the collection, false if no change was made</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewControl">
            <summary>
            Interface implemented by file type components that can be used
            for displaying a preview in a .NET control that can be hosted
            in the application.
            </summary>
            <remarks>
            <para>
            Any preview may provide additional services by implementing
            interfaces such as <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.INavigablePreview"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewControl.Control">
            <summary>
            The actual Windows Forms control for the preview display
            </summary>
            <remarks>
            <para>
            This property provides direct access to the control. It 
            is used by host applications that host the control to set
            its size and other standard properties.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IAbstractPreviewControl.Refresh">
            <summary>
            Called when a document preview first needs to be been displayed and 
            subsequently each time the document preview needs to be been updated.
            </summary>
            <remarks>
            This preview control may also need to call the contained preview generator object's IAbstractPreviewGenerator.Refresh() method
            to ensure that a new preview file has been created or has been updated, and is ready to be viewed.
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewType">
            <summary>
            Describes a type of preview that is available for a file type
            through its file type definition. This interface is further specialized
            into <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IControlPreviewType"/> and <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IApplicationPreviewType"/>
            for previews that can be hosted in controls or launch standalone
            applications. The preview type is normally defined as part of a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSet"/>.
            The preview set determines whether the preview type is used as a source, target, or side-by-side
            preview in the user interface.
            </summary>
            <remarks>
            <para>
            The preview type determines which preview file generators should be used
            for generating the preview files.
            </para>
            <para>
            Different generator types can be defined for source and target files. However,
            very often the same generator is used for both. By setting the generator id
            to <see cref="F:Sdl.FileTypeSupport.Framework.IntegrationApi.GeneratorId.Default"/> (which is the equivalent to <c>default(GeneratorId)</c> 
            or <c>new GenertorId(null)</c>) the default generator type defined for the file
            type will be used. (This is the default value. It will be used in case it is not explicitly set.)
            </para>
            <para>
            Generators can be either of the type <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator"/> or <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator"/>.
            It is up to the host application to determine which one, and set up the 
            file conversion (and the output properties) accordingly.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewType.SourceGeneratorId">
            <summary>
            Identifier for the generator that can generate the source language
            file to be displayed using the preview.
            </summary>
            <remarks>
            If <c>null</c>, the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewType.TargetGeneratorId"/> will be used also
            to generate the source file (if applicable).
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewType.TargetGeneratorId">
            <summary>
            Identifier for the generator that can generate the target language
            file to be displayed in the preview.
            </summary>
            <remarks>
            <para>
            To use the default generator associated with the file type, set this
            value to <c>GeneratorId.Default</c>.
            </para>
            <para>
            
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSets">
            <summary>
            Collection of preview types for this file type, with accessors to get
            a specified preview by id and the ability to define a 
            default preview type.
            </summary>
            <remarks>
            If no default preview type is defined, the host application may choose
            to use the first defined preview type as the default.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSets.FindFromId(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId)">
            <summary>
            Returns the preview type with the specified id, or <c>null</c> if no preview type
            with that id is defined in this collection.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSets.DefaultControlPreview">
            <summary>
            The id of the preview type that should be used as default for control
            previews for this file type.
            </summary>
            <remarks>
            <para>
            It is possible to assign a default preview type id that
            is not defined in this collection. This is intentional, in order
            to allow a preview type defined for the default bilingual file type
            to be used as the default for the file format without having to explicitly
            define it in the file type definition.
            </para>
            <para>
            The id can be passed to <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSets.FindFromId(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId)"/> in order to get the corresponding
            preview type, or <c>null</c> if the preview type is not defined in this
            file type definition.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSets.DefaultApplicationPreview">
            <summary>
            The id of the preview type that should be used by default for application
            previews for this file type.
            </summary>
            <remarks>
            <para>
            It is possible to assign a default preview type id that
            is not defined in this collection. This is intentional, in order
            to allow a preview type defined for the default bilingual file type
            to be used as the default for the file format without having to explicitly
            define it in this file type definition.
            </para>
            <para>
            The id can be passed to <see cref="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSets.FindFromId(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId)"/> to get the corresponding
            preview type, or <c>null</c> if the preview type is not defined in this
            file type definition.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSets.GetControlPreviews">
            <summary>
            Returns all preview sets that provide controls that can be hosted in a
            window of the host application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSets.GetApplicationPreviews">
            <summary>
            Returns all "View In" preview sets, i.e. previews that can launch a standalone application
            instance for viewing the content. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTag">
            <summary>
            This interface represents an individual QuickTag. You can retrieve the markup data
            for this QuickTag by reading the MarkupDataContent property.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTag.MarkupDataContent">
            <summary>
            The markup data for the QuickTag can be read through this property.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTag.CommandId">
            <summary>
            The QuickTag command id e.g.: "ItalicBold"
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTag.CommandName">
            <summary>
            The QuickTag command name.
            This will be used for tooltips, menu commands, undo buffer entries, etc.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTag.Description">
            <summary>
            A description for this QuickTag
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTag.Icon">
            <summary>
            The icon representing this QuickTag
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTag.DisplayOnToolBar">
            <summary>
            This property indicates whether or not this QuickTag should be displayed on the editor QT toolbar.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTag.IsDefaultQuickTag">
            <summary>
            This property indicates whether or not this QuickTag is a default QT.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTagContent">
            <summary>
            Template for the document content that the QuickTag represents
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTags">
            <summary>
            This interface represents the QuickTags in a file type definition file.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTags.Item(System.String)">
            <summary>
            Indexer that returns the IQuickTag based on the given command id.
            Returns null if no such command id exists in the collection
            </summary>
            <param name="commandId"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTags.AllDisplayItems">
            <summary>
            Enumerator that returns all QuickTag items which are meant to be displayed
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTags.AllDefaultItems">
            <summary>
            Enumerator that returns all Default QuickTag items
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTags.AllNonDefaultItems">
            <summary>
            Enumerator that returns all non-default QuickTag items
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTags.SetStandardQuickTags(System.Collections.Generic.IList{Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTag})">
            <summary>
            Adds the list of standard QuickTag items to the list of available tags. Used by filter component builders.
            </summary>
            <param name="standardQuickTags"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.NoDefaultBilingualFileTypeException">
            <summary>
            Thrown by <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager"/> when attempting to create a converter for the
            default bilingual file type, but when no default bilingual file type has been set.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.NoDefaultBilingualFileTypeException.#ctor">
            <summary>
            Default construction
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.NoDefaultBilingualFileTypeException.#ctor(System.String)">
            <summary>
            Construct from message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.NoDefaultBilingualFileTypeException.#ctor(System.String,System.Exception)">
            <summary>
            construct from message and inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.NoDefaultBilingualFileTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException">
            <summary>
            Exception thrown by the <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager"/> implementation
            for operations that may involve multiple files if one or more of the files
            are not supported by any file type definition in the file type manager.
            </summary>
            <remarks>
            <para>
            The names of each file that is not supported and the corresponding error message
            can be retrieved from the list of <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException"/> exceptions
            that are exposed through the <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException.NotSupportedFiles"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException.NotSupportedFiles">
            <summary>
            List of individual exceptions for each file that is not supported
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException.#ctor">
            <summary>
            Default constructor, creates an uninitialized exception
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException.#ctor(System.String,System.Collections.Generic.List{Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException})">
            <summary>
            Creates with a message and a list of unsupported files.
            </summary>
            <param name="message"></param>
            <param name="notSupportedFiles"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException.Equals(System.Object)">
            <summary>
            Also compares the list of unsupported files.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException.GetHashCode">
            <summary>
            Return a hash code that includes the files that are not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider">
            <summary>
            Called by the framework when native output settings for a file
            need to be determined.
            
            The implementation should set the output file name, codepage, etc.
            of the output properties based on the file conversion info.
            </summary>
            <param name="outputProperties"></param>
            <param name="conversionProperties"></param>
            <param name="suggestedFileInfo">File name and other output properties as 
            proposed by file type components' implementation of
            <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputSettingsAware.GetProposedOutputFileInfo(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties,Sdl.FileTypeSupport.Framework.NativeApi.IOutputFileInfo)"/>, 
            or <c>null</c> if none.</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId">
            <summary>
            Type safe wrapper around a unique id for a preview set
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId.#ctor(System.String)">
            <summary>
            Creates from a string id
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId.Id">
            <summary>
            The id of this preview type as a string
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId.ToString">
            <summary>
            The id as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId.Equals(System.Object)">
            <summary>
            Returns <c>true</c> if the objects have the same id value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId.GetHashCode">
            <summary>
            Returns a hash code based on the id value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId.op_Equality(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId,Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId)">
            <summary>
            Returns <c>true</c> if the two ids have the same <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId.Id"/> value.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId.op_Inequality(Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId,Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId)">
            <summary>
            Returns <c>true</c> if the two ids have different <see cref="P:Sdl.FileTypeSupport.Framework.IntegrationApi.PreviewSetId.Id"/> values.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference">
            <summary>
            Serializable reference to a segment that can be used
            to reference a specific segment in a paragraph and file
            e.g. when processing content for preview.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference.#ctor(Sdl.FileTypeSupport.Framework.NativeApi.FileId,Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId,Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)">
            <summary>
            Construction from file, paragraph and segment ids
            </summary>
            <param name="fileId"></param>
            <param name="paraId"></param>
            <param name="segId"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference.Equals(System.Object)">
            <summary>
            Considered equal if file, paragraph and segment ids match.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference.GetHashCode">
            <summary>
            Hash code is computed by combining file, paragraph unit and segment ids.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference.FileId">
            <summary>
            File id for the file that the segment reference applies to
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference.ParagraphUnitId">
            <summary>
            Id of the paragraph unit that the segment reference applies to
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.IntegrationApi.SegmentReference.SegmentId">
            <summary>
            Id of the segment that the reference applies to
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.IntegrationApi.UnknownFileTypeDefinitionException">
            <summary>
            Thrown by the <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager"/> implementation when attempting to use
            a file type definition id that is not part of the file type manager file type definitions.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.UnknownFileTypeDefinitionException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.UnknownFileTypeDefinitionException.#ctor(System.String)">
            <summary>
            Constructs from a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.UnknownFileTypeDefinitionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs from a message and an inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.IntegrationApi.UnknownFileTypeDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used in serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator">
            <summary>
            <para>
            Manages the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator.Writer"/> used to create the native file as well as a set
            of <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor"/> components that process the
            input before it is passed to the writer.
            </para>
            <para>
            The input is received on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator.Input"/> content handler.
            </para>
            </summary>
            <remarks>
            <para>
            Used with other components in a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor"/> to 
            write a native file.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator.Input">
            <summary>
            This is the content handler that is used to drive the native file writer
            with its content processors.
            </summary>
            <remarks>
            <para>
            Usually, it is the first content processor,
            or the actual file writer instance if no content processors exist.
            </para>
            <para>
            If no content processors or file writer have been defined, this property
            may be <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator.AddProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor)">
            <summary>
            Appends a native processor that will be invoked before the writer.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator.InsertProcessor(System.Int32,Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor)">
            <summary>
            Inserts a native processor at the specified index in the list of 
            native processors.
            </summary>
            <param name="index"></param>
            <param name="processor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator.RemoveProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor)">
            <summary>
            Removes a native processor from the list.
            </summary>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator.ContentProcessors">
            <summary>
            <para>
            The content processors that act on the input content before it is
            passed to the writer, in the order in which they will be invoked.
            </para>
            <para>
            Use <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator.AddProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor)"/>, <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator.InsertProcessor(System.Int32,Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor)"/>, and <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator.RemoveProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor)"/>
            to modify the collection.
            </para>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator.Writer">
            <summary>
            The file writer that creates the final output.
            </summary>
            <remarks>
            This property can be <c>null</c>, in which case content will still
            be processed, but no output should be generated.
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor">
            <summary>
            <para>
            Manages the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor.Parser"/> used to process the native file as well as a set
            of <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor"/> components that processes the
            output of the parser.
            </para>
            <para>
            The result of the processing consists of calls to the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor.Output"/>.
            </para>
            </summary>
            <remarks>
            <para>
            Used together with other components in a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor"/> to 
            extract content from a native file.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor.Parser">
            <summary>
            The file parser that will read the input file
            </summary>
            <remarks>
            <para>
            The output from the parser is processed in sequence by each native content processor 
            before being passed to the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor.Output"/>.</para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor.AddProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor)">
            <summary>
            Appends a content processor that will be invoked to process the output of the parser.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor.InsertProcessor(System.Int32,Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor)">
            <summary>
            Inserts a content processor at the specified index in the list of content processors
            that will be invoked to process the output from the parser. The processors are invoked
            in the order in which they appear in the list.
            </summary>
            <param name="index"></param>
            <param name="processor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor.RemoveProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor)">
            <summary>
            Removes a content processor from the list. Does not do anything if the processor is not in the list.
            </summary>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor.ContentProcessors">
            <summary>
            <para>
            The content processors currently in use, in the order in which they will be invoked.
            </para>
            <para>
            Use <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor.AddProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor)"/>, <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor.InsertProcessor(System.Int32,Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor)"/> and <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor.RemoveProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor)"/>
            to modify the collection.
            </para>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor.Output">
            <summary>
            The output from the extractor (i.e. the parser and the native processors) will be
            passed to this component.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ISubContentAware">
            <summary>
            Implemented by parent writers which must insert sub-content into their output stream
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ISubContentAware.AddSubContent(System.IO.Stream)">
            <summary>
            Called by the framework on the parent writer to insert the sub-content into its output stream.
            </summary>
            <param name="subContentStream">Stream containing sub-content to be inserted into the parent writer's output stream.</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ISubContentParser">
            <summary>
            Interface implemented by sub-content parsers
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ISubContentParser.InitializeSubContentParser(System.IO.Stream)">
            <summary>
            Called to initialize the sub-content parser with the stream referencing the sub-content
            </summary>
            <param name="subContentStream">Stream containing the sub-content to be parsed</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ISubContentPublisher">
            <summary>
            Interface which should be implemented by parsers which need to publish sub-content
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.NativeApi.ISubContentPublisher.ProcessSubContent">
            <summary>
            The parser fires this event when it wishes to pass sub-content for processing
            to the framework.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ConflictingIdException">
            <summary>
            Exception thrown from <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.PublishSharedObject(System.String,System.Object,Sdl.FileTypeSupport.Framework.NativeApi.IdConflictResolution)"/> if an object with
            the same id is already part of the collection, and the conflict resolution parameter is set to
            cause exceptions to be thrown.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ConflictingIdException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ConflictingIdException.#ctor(System.String)">
            <summary>
            Construction from a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ConflictingIdException.#ctor(System.String,System.Exception)">
            <summary>
            Construction from a message and an originating inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ConflictingIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ConflictingIdException.Id">
            <summary>
            The conflicting id
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ContextPurpose">
            <summary>
            Purpose for a context, originally from the XLIFF specification
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.ContextPurpose.Information">
            <summary>
            For informational purposes only, i.e. should not affect matching.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.ContextPurpose.Location">
            <summary>
            The context represents a location. This type of context is used e.g. for
            localizable tag content that has been externalized into separate ParagraphUnits.
            Such ParagraphUnits contain a location context that indicates the original ParagraphUnit
            that the tag with localizable content appears in.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.ContextPurpose.Match">
            <summary>
            May be used for context-sensitive matching.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ISupportsUniqueId">
            <summary>
            Provides access to an ID that can be used 
            by implementations e.g. to keep the item in a separate structure
            </summary>
            <remarks>
            This interface is used for now by the segmentation engine
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ISupportsUniqueId.UniqueId">
            <summary>
            The Unique ID associated with an object may be used
            by implementations during operations such as segmentation
            </summary>
            <remarks>
            <para>
            The persistence ID is an internal ID that may be used temporarily. 
            It is not guaranteed to be preserved during regular
            processing by other components, and it is explicitly ignored in the 
            object implementations of <see cref="M:System.Object.Equals(System.Object)"/> and <see cref="M:System.Object.GetHashCode"/>.
            </para>
            <para>
            The initial value of this ID is 0 for all objects. It is up to implementations
            to ensure uniqueness, if that is desired.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.EncodingCategory">
            <summary>
            Used by the file sniffer (<see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo"/>) to indicate a suggested type of encoding for the 
            target language file, without knowing what the target language will be.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.EncodingCategory.NotSpecified">
            <summary>
            The value has not yet been specified.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.EncodingCategory.Unicode">
            <summary>
            Any Unicode encoding, e.g. UTF-8, UCS-2, UTF-16, UTF-32, etc.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.EncodingCategory.LanguageDefaultAnsiCodePage">
            <summary>
            The default ANSI (Windows) codepage for the language
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.EncodingCategory.LanguageDefaultOemCodePage">
            <summary>
            The default OEM (DOS) codepage for the language
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.EncodingCategory.LanguageDefaultMacCodePage">
            <summary>
            The default Macintosh codepage for the language
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.EncodingCategory.LanguageDefaultEbcdicCodePage">
            <summary>
            The default EBCDIC (IBM) codepage for the language
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.EncodingCategory.NotApplicable">
            <summary>
            The codepage does not need to be specified.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IBasicMessageReporterWithExtendedData">
            <summary>
            IBasicMessageReporterWithExtendedData interface is almost exactly the same as the IBasicMessageReporter
            except that the ReportMessage method includes an extended data parameter.
            </summary>
            <remarks>
            This interface has been included to allow messages to be reported with extended data without breaking 
            backwards compatibility with the released API.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IBasicMessageReporterWithExtendedData.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.ExtendedMessageEventData)">
            <summary>
            Reports the message with the given message arguments.
            </summary>
            <param name="source">source</param>
            <param name="origin">origin</param>
            <param name="level">level</param>
            <param name="message">message</param>
            <param name="locationDescription">location description</param>
            <param name="extendedData">extended data</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer">
            <summary>
            Common interface implemented by objects that have the capability
            to hold metadata in the form of string key/value pairs.
            </summary>
            <remarks>
            <para>
            Similar to a dictionary&lt;String, String&gt;. 
            </para>
            <para>
            Enumerate existing values through the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaData"/> property. Add
            new values, or overwrite existing ones by calling <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String,System.String)"/>.
            Removes values by calling <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.RemoveMetaData(System.String)"/> or <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.ClearMetaData"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaData">
            <summary>
            Enumerator for the metadata key/value pairs.
            </summary>
            <remarks>
            <para>
            The returned key value pair should not be modified.
            Use <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String,System.String)"/> and <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.RemoveMetaData(System.String)"/>
            to modify the meta data content.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.HasMetaData">
            <summary>
            <c>True</c> if there is any metadata in the container
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataCount">
            <summary>
            The number of meta data key/value pairs in the container
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataContainsKey(System.String)">
            <summary>
            <c>True</c> if a metadata value with the specified key exists
            </summary>
            <param name="key">Must not be empty or <c>null</c></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData(System.String)">
            <summary>
            Returns the metadata value associated with the specified key,
            or <c>null</c> if no such key exists in the collection.
            </summary>
            <param name="key">Must not be empty or <c>null</c></param>
            <returns>The corresponding value, or <c>null</c> if none</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String,System.String)">
            <summary>
            <para>
            Sets the value of the specified metadata key.
            </para>
            <para>
            If the key already exists in the collection, its value
            gets overwritten.
            </para>
            </summary>
            <param name="key">Must not be empty or <c>null</c></param>
            <param name="value">Must not be <c>null</c></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.RemoveMetaData(System.String)">
            <summary>
            Removes the metadata key/value pair with the specified key
            from the collection. No changes are made if the collection 
            does not contain such a key.
            </summary>
            <param name="key">Must not be <c>null</c></param>
            <returns><c>True</c> if the collection was modified</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.ClearMetaData">
            <summary>
            Removes all key/value pairs from the meta data collection.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IOutputFileInfo">
            <summary>
            Simple data class designed to hold information on the file to output, which may be required by the 
            host application. This is used by <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputSettingsAware.GetProposedOutputFileInfo(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties,Sdl.FileTypeSupport.Framework.NativeApi.IOutputFileInfo)"/>
            to allow file type components to supply alternative information if the component is causing 
            the output file type to differ from the default (e.g. alternative generators for previewing).
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IOutputFileInfo.Filename">
            <summary>
            The name of the file, no need to supply any path information
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IOutputFileInfo.FileDialogWildcardExpression">
            <summary>
            The file wildcard information; can be used by the host application when displaying a 'Save As...' dialog.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IOutputFileInfo.FileTypeName">
            <summary>
            The name of the file type (e.g. "Microsoft Word 2003"); can be used by the host application when displaying a 'Save As...' dialog.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IOutputFileInfo.Encoding">
            <summary>
             The suggested encoding to be used when outputting the file
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IOutputFileInfo.ContentRestriction">
            <summary>
            Indicates whether the output is in the source or target language.
            This is for information purposes only.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects">
            <summary>
            Implemented by the framework to provide access to objects that have been published in order to be shared across components 
            used for content processing. Components that are 'interested' in shared objects receive an instance
            of this interface by implementing <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjectsAware"/>.
            </summary>
            <remarks>
            <para>
            Shared objects can be accessed directly using a key (an id), or by iterating over the
            collection. The <see cref="E:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.SharedObjectPublished"/> event is raised if additional
            shared objects are published. Any component can publish shared objects by calling
            <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.PublishSharedObject(System.String,System.Object,Sdl.FileTypeSupport.Framework.NativeApi.IdConflictResolution)"/>.
            </para>
            <para>
            Shared objects can be used for a number of purposes. Below are some examples:
            </para>
            <para>
            The host application may pass a translation memory interface as a shared object to the
            components used for processing a file. A file type supporting 3rd party XLIFF may look for such
            an object, and if found, use it to populate the translation memory with embedded translation
            suggestions from &gt;alt-trans&lt; elements in the XLIFF file.
            </para>
            <para>
            SDL Trados Studio may want to pass settings bundles to file processing components.
            Publishing the settings bundle as a shared object will make it available to any file type
            components that implement this interface. Components can query for the settings bundle,
            and if found, they can then use it.
            </para>
            <para>
            A native content processor may communicate information to a native parser via a shared object.
            </para>
            </remarks>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.SharedObjectPublished">
            <summary>
            Raised if an additional object is published by some component.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.SharedObjects">
            <summary>
            Iterator for all currently published shared objects
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.SharedObjectIds">
            <summary>
            Iterator for the ids of all currently published shared objects
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.SharedObjectsWithIds">
            <summary>
            Iterator for all currently published shared objects and their associated ids
            as key/value pairs, in which the id acts as the key.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.GetSharedObject``1(System.String)">
            <summary>
            Gets the shared object with the specified id; cast to the specified type.
            If no object with this id is shared, the method returns null. If an object
            with the specified id exists, but is not of the specified type, an exception
            is thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.PublishSharedObject(System.String,System.Object,Sdl.FileTypeSupport.Framework.NativeApi.IdConflictResolution)">
            <summary>
            Any component may publish objects to be shared by calling this method.
            The object will be added to the available shared objects, and the <see cref="E:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.SharedObjectPublished"/>
            event will be raised.
            </summary>
            <param name="id">Unique identifier for the object to be shared. If an object with this id is already
            shared, the conflict resolution parameter determines what happens.</param>
            <param name="toBeShared">May be <c>null</c>, which can be used to "remove" a shared object from the
            collection. (Note that the component may still hold a reference to the old instance.)</param>
            <param name="conflictingIdResolution">Indicates what should happen if an object with the
            same id is already shared.</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IdConflictResolution">
            <summary>
            Indicates how conflicting ids should be handled in calls to <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.PublishSharedObject(System.String,System.Object,Sdl.FileTypeSupport.Framework.NativeApi.IdConflictResolution)"/>.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.IdConflictResolution.ReplaceExisting">
            <summary>
            The object being published replaces the existing object with the same id.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.IdConflictResolution.ThrowException">
            <summary>
            A <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.ConflictingIdException"/> is thrown if an object with the same
            id already is shared.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor">
            <summary>
            Base class for components that are intended to be used as native content processors,
            either for extraction or generation. Implements both interfaces, and stores
            the output variable as an <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler"/>. The
            strongly typed handlers can be set and accessed through the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.ExtractionOutput"/>
            and <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.GenerationOutput"/> properties, which both reference the
            same field as the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/> property.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.#ctor">
            <summary>
            Protected constructor used by derived classes
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output">
            <summary>
            Agnostic access to the output handler; accesses the
            very same object instance as the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.ExtractionOutput"/>
            and the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.GenerationOutput"/> properties.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.ExtractionOutput">
            <summary>
            Strongly typed output content handler that can be used
            when the buffer is used for extraction.
            </summary>
            <remarks>
            Accesses the very same object instance as the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/>
            and the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.GenerationOutput"/> properties.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.GenerationOutput">
            <summary>
            Strongly typed output content handler that can be used
            when the buffer is used for generation.
            </summary>
            <remarks>
            Accesses the very same object instance as the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/>
            and the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.GenerationOutput"/> properties.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Sdl#FileTypeSupport#Framework#NativeApi#INativeExtractionContentProcessor#Output">
            <summary>
            Redirected to <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.ExtractionOutput"/>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Sdl#FileTypeSupport#Framework#NativeApi#INativeGenerationContentProcessor#Output">
            <summary>
            Redirected to <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.GenerationOutput"/>
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.StructureTag(Sdl.FileTypeSupport.Framework.NativeApi.IStructureTagProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.StructureTag(Sdl.FileTypeSupport.Framework.NativeApi.IStructureTagProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.InlineStartTag(Sdl.FileTypeSupport.Framework.NativeApi.IStartTagProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.InlineStartTag(Sdl.FileTypeSupport.Framework.NativeApi.IStartTagProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.InlineEndTag(Sdl.FileTypeSupport.Framework.NativeApi.IEndTagProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.InlineEndTag(Sdl.FileTypeSupport.Framework.NativeApi.IEndTagProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.InlinePlaceholderTag(Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.InlinePlaceholderTag(Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Text(Sdl.FileTypeSupport.Framework.NativeApi.ITextProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.Text(Sdl.FileTypeSupport.Framework.NativeApi.ITextProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="textInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.CustomInfo(Sdl.FileTypeSupport.Framework.NativeApi.ICustomInfoProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.CustomInfo(Sdl.FileTypeSupport.Framework.NativeApi.ICustomInfoProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.LocationMark(Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.LocationMark(Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="markerId"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.ChangeContext(Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.ChangeContext(Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="contexts"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.LockedContentStart(Sdl.FileTypeSupport.Framework.NativeApi.ILockedContentProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.LockedContentStart(Sdl.FileTypeSupport.Framework.NativeApi.ILockedContentProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/>.
            </summary>
            <param name="lockedContentInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.LockedContentEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.LockedContentEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.RevisionStart(Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.RevisionStart(Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/>.
            </summary>
            <param name="revisionInfo">The revision properties.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.RevisionEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.RevisionEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.CommentStart(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.CommentStart(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/>.
            </summary>
            <param name="commentInfo">The comment properties.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.CommentEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.CommentEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.ParagraphComments(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.ParagraphComments(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.Output"/>.
            </summary>
            <param name="commentInfo">The commnet properties.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.ParagraphUnitStart(Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentHandler.ParagraphUnitStart(Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.GenerationOutput"/> (if set).
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.ParagraphUnitEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentHandler.ParagraphUnitEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.GenerationOutput"/> (if set).
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.SegmentStart(Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentHandler.SegmentStart(Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.GenerationOutput"/> (if set).
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.SegmentEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentHandler.SegmentEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionGenerationContentProcessor.GenerationOutput"/> (if set).
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ContentRestriction">
            <summary>
            Enumeration that indicates to file type components whether the
            source or target should be used in the output.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.ContentRestriction.NoContent">
            <summary>
            No native file is being created.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.ContentRestriction.Source">
            <summary>
            Source output file is being created.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.ContentRestriction.Target">
            <summary>
            Target output file is being created.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.ContentRestriction.Bilingual">
            <summary>
            Both source and target content is being output.
            Only used when writing to an intermediate bilingual format such as SDL XLIFF.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor">
            <summary>
            Abstract base class that can be used to build native content
            generation processors.
            
            The default implementation provides a transparent "do nothing"
            content processor that simply forwards the calls that it receives on
            its <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentHandler"/> implementation to the output.
            
            Your implementation can simply override the content handler methods
            for the type of content it is interested in, and rely on the default 
            implementations for anything else.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.#ctor">
            <summary>
            Protected constructor used by derived classes
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output">
            <summary>
            Stores the output property in a field.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.ParagraphUnitStart(Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.ParagraphUnitStart(Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.ParagraphUnitEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.ParagraphUnitEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/> (if set).
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.SegmentStart(Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.SegmentStart(Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.SegmentEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.SegmentEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/> (if set).
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.StructureTag(Sdl.FileTypeSupport.Framework.NativeApi.IStructureTagProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.StructureTag(Sdl.FileTypeSupport.Framework.NativeApi.IStructureTagProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.InlineStartTag(Sdl.FileTypeSupport.Framework.NativeApi.IStartTagProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.InlineStartTag(Sdl.FileTypeSupport.Framework.NativeApi.IStartTagProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.InlineEndTag(Sdl.FileTypeSupport.Framework.NativeApi.IEndTagProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.InlineEndTag(Sdl.FileTypeSupport.Framework.NativeApi.IEndTagProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.InlinePlaceholderTag(Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.InlinePlaceholderTag(Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Text(Sdl.FileTypeSupport.Framework.NativeApi.ITextProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Text(Sdl.FileTypeSupport.Framework.NativeApi.ITextProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="textInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.CustomInfo(Sdl.FileTypeSupport.Framework.NativeApi.ICustomInfoProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.CustomInfo(Sdl.FileTypeSupport.Framework.NativeApi.ICustomInfoProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.LocationMark(Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.LocationMark(Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="markerId"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.ChangeContext(Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.ChangeContext(Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/> (if set).
            </summary>
            <param name="contexts"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.LockedContentStart(Sdl.FileTypeSupport.Framework.NativeApi.ILockedContentProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.LockedContentStart(Sdl.FileTypeSupport.Framework.NativeApi.ILockedContentProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/>.
            </summary>
            <param name="lockedContentInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.LockedContentEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.LockedContentEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.RevisionStart(Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.RevisionStart(Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/>.
            </summary>
            <param name="revisionInfo">The revision properties.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.RevisionEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.RevisionEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.CommentStart(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.CommentStart(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/>.
            </summary>
            <param name="commentInfo">The commnet properties.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.CommentEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.CommentEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.ParagraphComments(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.ParagraphComments(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeGenerationContentProcessor.Output"/>.
            </summary>
            <param name="commentInfo">The commnet properties.</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IFilePostTweaker">
            <summary>
            Implemented by components that modify the file that is generated after it has been written by the generator.
            </summary>
            <remarks>
            <para>
            File tweaker implementations typically derive from <c>Sdl.FileTypeSupport.Framework.Core.Utiltites.NativeApi.AbstractFilePostTweaker</c>
            rather than implementing this interface explicitly.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IFilePostTweaker.TweakFilePostWriting(Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputFileProperties)">
            <summary>
            The method called by the framework for each file after generation is complete. It is the responsibility of the class implementing
            this method to process the file completely.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IFileTweaker">
            <summary>
            Base interface that contains common functions for the file tweakers. Extended by 
            <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IFilePreTweaker">IFilePreTweaker</see> and <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IFilePostTweaker">IFilePostTweaker</see>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IFileTweaker.MessageReporter">
            <summary>
            The framework will set this property as part of initialization for the 
            component. The component can use this instance to report potential issues
            and non-fatal error conditions.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IFileTweaker.Enabled">
            <summary>
            Controls whether the tweaker is run during parsing.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IFilePreTweaker">
            <summary>
            This interface should be implemented by any objects that can be used to modify the contents of a native
            file before being processed through an extractor or after being written by a generator.
            </summary>
            <remarks>
            <para>
            File tweaker implementations typically derive from <c>Sdl.FileTypeSupport.Framework.Core.Utiltites.NativeApi.AbstractFilePreTweaker</c>
            rather than implementing this interface explicitly.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IFilePreTweaker.TweakFilePreParsing(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties,Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory)">
            <summary>
            The method called by the framework for each file before parsing begins. It is the responsibility of the class implementing
            this method to process the file completely.
            </summary>
            <param name="properties">Information on the file to be tweaked; can be modified by the implementation, e.g. to add
            additional dependency files.</param>
            <param name="propertiesFactory">Can be used by the implementation to create dependency file properties, etc.</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IBasicMessageReporter">
            <summary>
            Basic mechanism for components to report non-fatal issues
            to the framework. (Fatal errors should yield exceptions.)
            </summary>
            <remarks>
            <para>
            This is the most basic interface for message reporting. It contains no explicit means
            of associating explicit locations with the error messages. Some more advanced
            message reporters are derived from this interface, and it provides methods that
            allow locations and ranges to be associated with the messages in a manner to 
            support automated navigation such as click-on error messages.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IBasicMessageReporter.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,System.String)">
            <summary>
            Used by any component to report a non-critical issue, not explicitly associated 
            with a content location.
            </summary>
            <param name="source">The component from which the message originates. Components typically pass <c>this</c> for this parameter.</param>
            <param name="origin">The description of the action/component from which this message originates.</param>
            <param name="level">Severity of the message</param>
            <param name="message">The actual message text</param>
            <param name="locationDescription">Optional (may be <c>null</c> or <c>String.Empty</c>).
            <para>
            Clear text description of the location that the message refers to. Can be used to communicate
            in clear text how the user can find the corresponding location in the content being processed.
            </para>
            </param>
            <remarks>
            <para>
            This overload is used when the message cannot be associated with an explicit content location,
            e.g. for issues concerning the whole file/document, or for situations in which an explicit location
            is difficult to specify.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IComment">
            <summary>
            All available information on a comment:
            The comment text, the severity level, the author and time stamp, and
            for comment threads the comment version.
            </summary>
            <remarks>
            <para>
            The comment properties have been explicitly designed to match the 
            commenting features available for TTX and ITD.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IComment.Text">
            <summary>
            The text associated with this comment
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IComment.Author">
            <summary>
            Name of person or system that entered the comment
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IComment.Version">
            <summary>
            Comments in a <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties"/> collection are assigned
            incremented version numbers to better be able to track comment threads.
            The version number should be of the form "1.0", "2.0" etc. for 
            compatibility with TRADOS and SDLX.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IComment.Date">
            <summary>
            Time at which the comment was created or last edited
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IComment.DateSpecified">
            <summary>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IComment.Severity">
            <summary>
            Indication of severity of the issue for which the comment has been added
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties">
            <summary>
            Thread of comments
            </summary>
            <remarks>
            <para>
            This interface was designed to correspond to the
            commenting features available in TTX and ITD files.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties.Count">
            <summary>
            The number of comments in this thread
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties.Add(Sdl.FileTypeSupport.Framework.NativeApi.IComment)">
            <summary>
            Appends a comment to this thread
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties.AddComments(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)">
            <summary>
            Appends all comments from another thread to this one
            </summary>
            <param name="comments"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties.GetItem(System.Int32)">
            <summary>
            Gets the comment with the specified index. The index is 0-based.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties.Comments">
            <summary>
            Iterator for accessing comments sequentially
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties.Delete(Sdl.FileTypeSupport.Framework.NativeApi.IComment)">
            <summary>
            Removes a comment from the collection.
            </summary>
            <param name="comment"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties.Xml">
            <summary>
            An XML string that is meant for serializing the comment thread.
            </summary>
            <remarks>
            <para>
            The XML format of this string is the same as the comments XML format used
            in ITD and TTX files.
            </para>
            <para>
            Setting this property changes the entire content of the comment properties object.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileVerifier">
            <summary>
            A native file verifier performs the task of checking the target file produced by the a generator for potential issues.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileVerifier.Verify">
            <summary>
            Performs the task of verifying the file
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileVerifier.MessageReporter">
            <summary>
            The framework will set this property as part of initialization for the 
            component. The component can use this instance to report potential issues
            and non-fatal error conditions.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeLocationTracker">
            <summary>
            Provided by the framework to the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter"/> in order to 
            help generate locations for any messages that are reported through the
            <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter"/> interface.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeLocationTracker.GetLocationBeforeCurrentContent">
            <summary>
            Returns a text location that corresponds to the start of the content that has
            just been passed to the native file writer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeLocationTracker.GetLocationAfterCurrentContent">
            <summary>
            Returns a text location that corresponds to the end of the content that has
            just been passed to the native file writer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties">
            <summary>
            Properties of a (structure or localizable) paragraph unit
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties.ParagraphUnitId">
            <summary>
            Globally unique identifier of the paragraph unit
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties.Contexts">
            <summary>
            Context associated with the paragraph unit
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties.LockType">
            <summary>
            Indicates the lock type(s) for this paragraph unit.
            For a structure paragraph unit, the Structure flag is set.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties.Comments">
            <summary>
            Comments associated with the paragraph unit; may be <c>null</c>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties.SourceCount">
            <summary>
            Word/character count for the source content in this paragraph unit
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties">
            <summary>
            Common properties for a source and target segment pair
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties.Id">
            <summary>
            Identifier for the segment pair. 
            <para>
            The paragraph unit offers methods for easily locating specific segments in the source and target
            from their ids.
            </para>
            </summary>
            <remarks>
            <para>
            The segment id is also used to link matches with a specific segment.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties.TranslationOrigin">
            <summary>
            Indicates the origin of the translation for the segment pair.
            </summary>
            <remarks>
            <para>
            If no target segment exists for a segment pair, this property is null.
            </para>
            <para>
            If a translation exists, the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties.ConfirmationLevel"/> is used to indicate its current status in the document.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties.ConfirmationLevel">
            <summary>
            The approval level of the translation for the segment pair
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties.IsLocked">
            <summary>
            Indicates whether the segment pair is locked to prevent editing.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ISubContentWriter">
            <summary>
            Interface implemented by sub-content writers
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ISubContentWriter.InitializeSubContentWriter(System.IO.Stream)">
            <summary>
            called by the framework to initialize the SubContent Writer
            </summary>
            <param name="originalSubContent">Stream containing the original source sub-content for writers which need this when regenerating</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ISubContentWriter.GetSubContentStream">
            <summary>
            called by the framework to get the final sub-content stream
            </summary>
            <returns>Stream containing regenerated sub-content</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ISupportsPersistenceId">
            <summary>
            Provides access to an internal ID that can be used 
            temporarily by implementations e.g. to persist an 
            object graph.
            </summary>
            <remarks>
            Objects acting as data containers in the framework may
            implement this interface, even if it is not declared as
            part of the API. Implementations can cast to this interface
            to determine if an implementation object supports it.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ISupportsPersistenceId.PersistenceId">
            <summary>
            The persistence ID associated with an object may be used
            by implementations during operations such as serialization 
            and de-serialization of the object model. 
            </summary>
            <remarks>
            <para>
            The persistence ID is an internal ID that may be used temporarily. 
            It is not guaranteed to be preserved during regular
            processing by other components, and it is explicitly ignored in the 
            object implementations of <see cref="M:System.Object.Equals(System.Object)"/> and <see cref="M:System.Object.GetHashCode"/>.
            </para>
            <para>
            The initial value of this ID is 0 for all objects. It is up to implementations
            to ensure uniqueness, if that is desired.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin">
            <summary>
            Information on the origin of a translation.
            </summary>
            <remarks>
            <para>
            Custom metadata can be stored and accessed through the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer"/> implementation.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.OriginType">
            <summary>
            The origin of the translation for the segment pair.
            </summary>
            <remarks>
            <para>
            Use the pre-defined constant values in <c>Sdl.FileTypeSupport.Framework.Core.Utilitites.NativeApi.DefaultTranslationOrigin</c> 
            if possible.
            </para>
            <para>
            If the translation origin is <c>Sdl.FileTypeSupport.Framework.Core.Utilitites.NativeApi.DefaultTranslationOrigin.Interactive</c>, the
            <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.OriginBeforeAdaptation"/> may contain information on the originally adapted content.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.OriginSystem">
            <summary>
            The translation memory, machine translation system, or a similar source from which the translation originates,
            or <c>null</c> if unknown or not applicable.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.OriginBeforeAdaptation">
            <summary>
            <c>Null</c> or the origin information for the originally adapted target content
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.MatchPercent">
            <summary>
            The match value for a translation memory match, or the confidence level for a machine translation.
            Should be a percentage value from 0 - 100%
            </summary>
            <remarks>
            <para>
            When a match gets adapted by interactive translation, the original match value can be read from
            this property on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.OriginBeforeAdaptation"/> properties.
            </para>
            <para>
            A typical use case for this value is when editing or proof-reading translations. Here, proofreaders or
            editors may want to pay special attention to fuzzy matches to ensure that they were 
            correctly adopted when used in translation.
            </para>
            <para>
            It may also be possible to directly access the actual translation proposal used as part of the
            bilingual object model for the paragraph unit. In that case, this value should correspond to the 
            match quality for that translation.
            </para>
            <para>
            This value should typically not change during editing of the segment content, as it is
            meant to capture information on the original interaction with the translation memory.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.IsStructureContextMatch">
            <summary>
            If <c>true</c>, indicates that the translation originates from a system that takes 
            structural context information into account, and that the structure context matches.
            </summary>
            <remarks>
            <para>
            This is used when a document has context information with 
            at least one <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo.Purpose"/> set to 
            <see cref="F:Sdl.FileTypeSupport.Framework.NativeApi.ContextPurpose.Match"/> in order to
            indicate when a match has a corresponding <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo.ContextType"/>.
            </para>
            <para>
            When a match gets adapted by interactive translation, the original structure match value can be read from
            this property on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.OriginBeforeAdaptation"/> properties.
            </para>
            <para>
            Typical usage for this value is when editing or proofreading translations. Here, proofreaders or
            editors may want to pay special attention to certain matches to ensure that they were 
            correctly adopted when used in translation.
            </para>
            <para>
            It may also be possible to directly access the actual translation proposal used as part of the
            bilingual object model for the paragraph unit. In that case, this value should convey the 
            structure match quality for that translation.
            </para>
            <para>
            This value should typically not change during editing of the segment content, as it is
            meant to capture information on the original interaction with the translation memory.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.TextContextMatchLevel">
            <summary>
            Indicates whether the match originates from a source where the textual surrounding content 
            corresponds to the text surrounding this segment.
            </summary>
            <remarks>
            <para>
            This is used with the new translation memory for textual context matches.
            </para>
            <para>
            When a match gets adapted by interactive translation, the original text context match level 
            can be read from this property on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.OriginBeforeAdaptation"/> properties.
            </para>
            <para>
            A typical use case for this value is when editing or proofreading translations. Here, proofreaders or
            editors may want to pay special attention to certain matches to ensure that they were 
            correctly adopted when used in translation.
            </para>
            <para>
            It may also be possible to directly access the actual translation proposal used as part of the
            bilingual object model for the paragraph unit. In that case, this value should convey the 
            textual match quality for that translation.
            </para>
            <para>
            This value should typically not change during editing of the segment content, as it is
            meant to capture information on the original interaction with the translation memory.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.IsSIDContextMatch">
            <summary>
            If <c>true</c>, indicates that the translation originates from a system that takes 
            ID context information into account, and that the ID context matches.
            </summary>
            <remarks>
            <para>
            This is used when a document has context information with 
            at least one <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo.Purpose"/> set to 
            <see cref="F:Sdl.FileTypeSupport.Framework.NativeApi.ContextPurpose.Match"/> with <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo.ContextType"/>
            set to sdl:sid, in order to indicate when a match has a corresponding <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo.Description"/> that holds the SID value.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.RepetitionTableId">
            <summary>
            The id of this segment in the repetitions table that holds all the repetitions matching this segment
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.IsRepeated">
            <summary>
            Indicates whether this segment pair exists in the repetitions table
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.OriginalTranslationHash">
            <summary>
            A hash value that identifies the entry in the TM that provided the translation. This is used 
            to update the correct TM entry if a translator provides an updated version of the translation.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ITranslationOrigin.Item(System.String)">
            <summary>
            <para>
            Convenience getter and setter for metadata using indexer syntax. 
            </para>
            <para>
            The getter functionality is equivalent to calling <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String,System.String)"/>,
            and the setter functionality is equivalent to <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData(System.String)"/>.
            </para>
            </summary>
            <param name="key">Must not be <c>null</c> or empty</param>
            <returns>The corresponding value, or <c>null</c> if none</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation">
            <summary>
            Reference to a location inside a plain text file,
            specified through line and offset numbers.
            </summary>
            <remarks>
            Line and offset numbers are 1-based, i.e. line number 1 is the first
            line in a file, and offset number 1 is the first character on the line.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation.#ctor">
            <summary>
            Creates an uninitialized instance, where line and offset are both 0.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes with the specified line and offset numbers.
            </summary>
            <param name="line"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation.#ctor(Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation)">
            <summary>
            Protected constructor used in cloning
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation.ToString">
            <summary>
            Returns a string in the format "(line, offset)" that
            is intended for ease of use in debugging
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation.Equals(System.Object)">
            <summary>
            True if both line and offset numbers are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation.GetHashCode">
            <summary>
            The hash code is computed by shifting and combining the line and offset numbers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation.Line">
            <summary>
            Line number in the text. The first line in a file
            is line number 1. A value of 0 indicates that
            the line number has not been set. Negative values
            are not allowed.
            </summary>
            <remarks>
            A new line starts when one of the following character
            combinations are encountered:
            <list type="bullet">
            <item>CR + LF (0x0c 0x0a) (treated as a single line break)</item>
            <item>Standalone CR (without a following LF)</item>
            <item>Standalone LF</item>
            </list>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation.Offset">
            <summary>
            Character offset on the current line. The first character
            on the line is offset 1. A value of 0 indicates that the
            offset has not be specified. Negative values are not allowed.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation.IsBefore(Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation)">
            <summary>
            <c>True</c> if this instance has line and offset numbers
            that indicate that it appears earlier in the content than the
            other instance.
            </summary>
            <param name="other">must not be null</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation.IsAfter(Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation)">
            <summary>
            <c>True</c> if this instance has line and offset numbers
            that indicate that it appears later in the content than the
            other instance.
            </summary>
            <param name="other">Must not be null</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation.Clone">
            <summary>
            Returns a deep clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation.CompareTo(Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation)">
            <summary>
            Returns 1 if this is after the other, -1 if this is before the other,
            and 0 if equal to the other.
            </summary>
            <param name="other">Must not be null</param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId">
            <summary>
            Type safe wrapper around a unique identifier for paragraph units, used
            in <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId.#ctor(System.String)">
            <summary>
            Construction from a string representation of the paragraph unit id.
            </summary>
            <param name="id">The id as a string</param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId.Id">
            <summary>
            Trans-unit id as a string
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId.ToString">
            <summary>
            The id as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId.Equals(System.Object)">
            <summary>
            Compare the ids
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId.GetHashCode">
            <summary>
            The hash code is based on the id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId.op_Equality(Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId,Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId)">
            <summary>
            Compares the ids.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId.op_Inequality(Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId,Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId)">
            <summary>
            Compares the ids.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId.CompareTo(Sdl.FileTypeSupport.Framework.NativeApi.ParagraphUnitId)">
            <summary>
            Compares the ids.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ProcessSubContentEventArgs">
            <summary>
            Event args which are used by the ProcessSubContent event
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ProcessSubContentEventArgs.FileTypeDefinitionId">
            <summary>
            FileTypeDefinitionId - used to define the sub-content parser to use for this particular sub-content stream
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ProcessSubContentEventArgs.SubContentStream">
            <summary>
            SubContentStream - stream referencing the sub-content to be parsed
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ProcessSubContentEventArgs.#ctor(System.String,System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="fileTypeDefinitionId"></param>
            <param name="subContentStream"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ProgressEventArgs">
            <summary>
            Progress event for progress indicators.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ProgressEventArgs.#ctor(System.Byte)">
            <summary>
            Progress is a percentage values from 0 (start) up to and including 100 (complete).
            </summary>
            <exception cref="T:System.OverflowException">thown if the percentag value is larger than 100.</exception>
            <param name="value">Values 0 - 100 (inclusive) are accepted.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ProgressEventArgs.ToString">
            <summary>
            For debugging, shows the percentage value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ProgressEventArgs.ProgressValue">
            <summary>
            A progress value between 0 and 100
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId">
            <summary>
            Type safe wrapper around a repetition id unique identifier (GUID).
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId.#ctor(System.String)">
            <summary>
            Construction from a string representation of the repetition id
            </summary>
            <param name="id">The id as a string</param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId.Id">
            <summary>
            Repetition id as a string
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId.ToString">
            <summary>
            The id as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId.Equals(System.Object)">
            <summary>
            Compares the id to the id of the other object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId.GetHashCode">
            <summary>
            The has code is based on the id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId.op_Equality(Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId,Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId)">
            <summary>
            Compares the ids of the two items.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId.op_Inequality(Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId,Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId)">
            <summary>
            Compares the ids of the two items.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.RepetitionId.CompareTo(System.Object)">
            <summary>
            Compares the two ids.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.RevisionTypeNotSupportedException">
            <summary>
            Exception thrown when the wrong RevisionType is set on RevisionProperties or FeedbackProperties
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.RevisionTypeNotSupportedException.#ctor(System.String)">
            <summary>
            Constructor for RevisionTypeNotSupportedException
            </summary>
            <param name="message">Message of exception</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.SegmentationHint">
            <summary>
            Used in <c>TagProperties</c> to indicate how the tag should be handled during segmentation.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.SegmentationHint.Undefined">
            <summary>
            The value has not been explicitly specified, or the default segmentation behavior
            is implied. 
            </summary>
            <remarks>
            <para>
            A segmentation engine may examine the value of the 
            <c>IPlaceholderTagProperties.TextEquivalent</c> property in order to 
            determine whether the tag should be included in a segment when it
            appears at the segment boundary.
            </para>
            </remarks>
            
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.SegmentationHint.Include">
            <summary>
            If possible, the segmentation engine should always include this tag inside a segment.
            </summary>
            <remarks>
            <para>
            Tags with this property should be treated similar to tags with "TagHandlingAlwaysInclude"
            in Filter Framework 1 and "placeholder" Trados tools.
            </para>
            </remarks>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.SegmentationHint.MayExclude">
            <summary>
            The tag may be left outside of the segment, e.g. if it
            appears at a segment boundary.
            </summary>
            <remarks>
            <para>
            There should be no need for a segmentation engine to check the 
            <c>IPlaceholderTagProperties.TextEquivalent</c> property, as this value
            explicitly states that the tag can be excluded from segments.
            </para>
            </remarks>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.SegmentationHint.IncludeWithText">
            <summary>
            The tag will be included in a segment if the segment also contains text content,
            otherwise it will not be included in a segment (in order to prevent segment-only tags). 
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.SegmentationHint.Exclude">
            <summary>
            The tag will be excluded from a segment, even if this means changing the segmentation. This
            is used for sub-content processing.
            </summary>
            <remarks>
            There are two circumstances where a tag with SegmentationHint set to Exclude will not be excluded from a segment; 
            where the tag is inside a tag pair with SegmentationHint NOT set to Exclude or where the tag is inside a review marker.
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.SegmentId">
            <summary>
            Type-safe wrapper around a segment identifier
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SegmentId.#ctor(System.String)">
            <summary>
            Construction from a string representation of the id
            </summary>
            <param name="id">The segment id as a string</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SegmentId.#ctor(System.Int64)">
            <summary>
            Convenience construction from a number.
            The string id is generated by calling ToString() on the number.
            </summary>
            <param name="number">The segment id as a number</param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SegmentId.Id">
            <summary>
            The actual id as a string
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SegmentId.ToString">
            <summary>
            The id as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SegmentId.Equals(System.Object)">
            <summary>
            Compares the id values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SegmentId.GetHashCode">
            <summary>
            Hash code for the id value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SegmentId.op_Equality(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId,Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)">
            <summary>
            Compares the id values.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SegmentId.op_Inequality(Sdl.FileTypeSupport.Framework.NativeApi.SegmentId,Sdl.FileTypeSupport.Framework.NativeApi.SegmentId)">
            <summary>
            Compares the id values.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentHandler">
            <summary>
            Specialization of the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler"/> for components
            used during extraction (parsing).
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentHandler">
            <summary>
            Extension of the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler"/> with additional methods
            used to communicate information that is only available during generation (i.e.
            when writing native output files from content that originates from the bilingual
            content model).
            </summary>
            <remarks>
            <para>
            The additional information, which is communicated, includes start and end of paragraph
            units and segments as they appear in the bilingual content model.
            </para>
            <para>
            This information is useful for determining whether any content has been left in 
            original source language or whether it has been translated. It is also used by the framework
            when mapping locations in the native content stream to locations in the bilingual 
            content model, during message reporting.
            </para>
            <para>
            Note that the locations of the segment boundaries may have to be approximated, e.g. if
            tag pairs that were split due to the presence of the segments in the native
            content model have been re-combined when converting from bilingual to native.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentHandler.ParagraphUnitStart(Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties)">
            <summary>
            Indicates the location of a paragraph unit boundary in the bilingual
            content model.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentHandler.ParagraphUnitEnd">
            <summary>
            Indicates the location of a paragraph unit boundary in the bilingual
            content model.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentHandler.SegmentStart(Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties)">
            <summary>
            Indicates the location of a segment boundary in the bilingual
            content model.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentHandler.SegmentEnd">
            <summary>
            Indicates the location of a segment boundary in the bilingual
            content model.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor">
            <summary>
            Implemented by native content processors used during generation (i.e. writing) of 
            native files. 
            </summary>
            <remarks>
            During native file extraction (parsing) the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor"/>
            fulfills the corresponding function.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor.Output">
            <summary>
            The interface on which the output is generated by this processor
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter">
            <summary>
            Message reporter specialization that allows line and offset
            numbers to be associated with messages to relate to locations
            in plain text files.
            </summary>
            <remarks>
            <para>
            This interface is used by any components that want to report issues 
            relating to the native file format, where the file format is interpreted
            as plain text and locations are referenced by line and offset numbers. The 
            framework will attempt to map the locations in the bilingual content for those cases
            in which users should be able to navigate to the corresponding document location by clicking a message.
            </para>
            <para>
            Native file writers must use this mechanism to associate locations with
            error messages, as they have no output content stream in which to insert location markers.
            File sniffers and pre- and post-processors are other components that may want to
            report issues with associated locations, but do not have access to the native content stream.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation,Sdl.FileTypeSupport.Framework.NativeApi.NativeTextLocation)">
            <summary>
            Used by file writers etc. in order to report a non-critical issue with an associated content range or location expressed in line and
            character offset numbers in the original native file format.
            </summary>
            <param name="source"></param>
            <param name="origin">The description of the action/component from which this message originated.</param>
            <param name="level"></param>
            <param name="message"></param>
            <param name="fromLocation">Start location in the native text file</param>
            <param name="uptoLocation">(Optional) end location in the native text file. You can pass <c>null</c> for this parameter.</param>
            <remarks>
            <para>
            When converting the locations to bilingual or native content the line and offset numbers will 
            be interpreted by the framework as referring to the textual content of the content that is processed
            through the native API. The framework will count the number of characters and line breaks 
            that appear inside text and tags in an attempt to reference the corresponding location in the native content stream
            or in the bilingual content model (as needed). That means that if the tags and text in the native content
            fully correspond to the original file format, the locations will map well. If this is not the case,
            it is recommended that you use the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IBasicMessageReporter"/> interface, and refer to
            locations in an explanatory manner instead (e.g. through a message box).
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.Severity">
            <summary>
            Severity level associated with a comment.
            A higher severity level can make the comment more prominent in the user interface.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.Severity.Undefined">
            <summary>
            The severity level has not been specified
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.Severity.Low">
            <summary>
            Informational purpose
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.Severity.Medium">
            <summary>
            Warning, likely an important issue
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.Severity.High">
            <summary>
            Error, a severe issue
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.Severity.Invalid">
            <summary>
            Sentinel, not used
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.SharedObjectPublishedEventArgs">
            <summary>
            Information passed in the <see cref="E:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.SharedObjectPublished"/> event.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SharedObjectPublishedEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Creates with the id and the object instance.
            </summary>
            <param name="id"></param>
            <param name="sharedObject"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SharedObjectPublishedEventArgs.Id">
            <summary>
            Id used to publish the object
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SharedObjectPublishedEventArgs.SharedObject">
            <summary>
            Instance of the published object
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.SourceCount">
            <summary>
            A word or character count value
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.SourceCount.CountUnit">
            <summary>
            The type of count, i.e. word or character
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.SourceCount.CountUnit.word">
            <summary>
            Count value representing the number of words
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.SourceCount.CountUnit.character">
            <summary>
            Count value representing the number of characters
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SourceCount.#ctor">
            <summary>
            Default constructor - creates an uninitialized object.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SourceCount.#ctor(Sdl.FileTypeSupport.Framework.NativeApi.SourceCount)">
            <summary>
            Protected copy constructor used during cloning
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SourceCount.Equals(System.Object)">
            <summary>
            Objects are considered equal if they have the same unit and value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SourceCount.GetHashCode">
            <summary>
            The hash code is computed from the unit and value. Same unit and value yields same hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SourceCount.Unit">
            <summary>
            The type of items that the value represents
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SourceCount.Value">
            <summary>
            The value that the count represents
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SourceCount.Clone">
            <summary>
            Returns a deep clone of the object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.TextContextMatchLevel">
            <summary>
            Used with textual context matches to indicate the level of 
            matching.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.TextContextMatchLevel.None">
            <summary>
            The textual context does not match.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.TextContextMatchLevel.Source">
            <summary>
            Source content matches with surrounding source content.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.TextContextMatchLevel.SourceAndTarget">
            <summary>
            Source and target matches surrounding source and target content.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor">
            <summary>
            Abstract base class that can be used to build native content
            extraction processors.
            
            The default implementation provides a transparent "do nothing"
            content processor that simply forwards the calls that it receives on
            its <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentHandler"/> implementation to the output.
            
            Your implementation can simply override the content handler methods
            for the type of content that it is interested in, and rely on the default 
            implementations for anything else.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.#ctor">
            <summary>
            Protected constructor used by derived classes
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output">
            <summary>
            Default implementation of the Output property
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.StructureTag(Sdl.FileTypeSupport.Framework.NativeApi.IStructureTagProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.StructureTag(Sdl.FileTypeSupport.Framework.NativeApi.IStructureTagProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/> (if set).
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.InlineStartTag(Sdl.FileTypeSupport.Framework.NativeApi.IStartTagProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.InlineStartTag(Sdl.FileTypeSupport.Framework.NativeApi.IStartTagProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/> (if set).
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.InlineEndTag(Sdl.FileTypeSupport.Framework.NativeApi.IEndTagProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.InlineEndTag(Sdl.FileTypeSupport.Framework.NativeApi.IEndTagProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/> if set.
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.InlinePlaceholderTag(Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.InlinePlaceholderTag(Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/> (if set).
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Text(Sdl.FileTypeSupport.Framework.NativeApi.ITextProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Text(Sdl.FileTypeSupport.Framework.NativeApi.ITextProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/> (if set).
            </summary>
            <param name="textInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.CustomInfo(Sdl.FileTypeSupport.Framework.NativeApi.ICustomInfoProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.CustomInfo(Sdl.FileTypeSupport.Framework.NativeApi.ICustomInfoProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/> (if set).
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.LocationMark(Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.LocationMark(Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/> (if set).
            </summary>
            <param name="markerId"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.ChangeContext(Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.ChangeContext(Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/> (if set).
            </summary>
            <param name="contexts"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.LockedContentStart(Sdl.FileTypeSupport.Framework.NativeApi.ILockedContentProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.LockedContentStart(Sdl.FileTypeSupport.Framework.NativeApi.ILockedContentProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/>.
            </summary>
            <param name="lockedContentInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.LockedContentEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.LockedContentEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.RevisionStart(Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.RevisionStart(Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/>.
            </summary>
            <param name="revisionInfo">The revision properties.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.RevisionEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.RevisionEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.CommentStart(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.CommentStart(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/>.
            </summary>
            <param name="commentInfo">The comment properties.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.CommentEnd">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.CommentEnd"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.ParagraphComments(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)">
            <summary>
            Calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.ParagraphComments(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)"/> on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeExtractionContentProcessor.Output"/>.
            </summary>
            <param name="commentInfo">The commnet properties.</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser">
            <summary>
            Abstract base class that provides boilerplate implementation
            for native file parsers.
            
            Deriving your file parser from this class will save you some
            implementation work. Provides a default implementation of the
            <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.ParseNext"/> method. You can override the <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.BeforeParsing"/>,
            <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.DuringParsing"/> and <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.AfterParsing"/> in
            your parser implementation in order to separate initialization and
            clean-up code from the core parsing code.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.Stage">
            <summary>
            Internal state of the parser
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.Stage.Initial">
            <summary>
            Parsing has not yet commenced.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.Stage.InProgress">
            <summary>
            Parsing has commenced, and is in progress.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.Stage.Completed">
            <summary>
            Parsing has completed.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.#ctor">
            <summary>
            Protected constructor that should only be called by derived classes
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.CurrentStage">
            <summary>
            The stage of processing that the parser has reached
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.OnProgress(System.Object,Sdl.FileTypeSupport.Framework.NativeApi.ProgressEventArgs)">
            <summary>
            Helper method to fire the Progress event
            </summary>
            <param name="sender">the event source</param>
            <param name="args">progress value between 0 and 100</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.OnProgress(System.Byte)">
            <summary>
            Helper method to set up the Progress event
            </summary>
            <param name="percent"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.OutputText(System.String)">
            <summary>
            Helper method to output plain text
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.BeforeParsing">
            <summary>
            The implementation of <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.ParseNext"/> will call this method
            the very first time that ParseNext is called.
            
            Override this method to perform setup work for the parsing such as
            initializing the state, opening the file to be parsed, etc.
            
            The default implementation of this method does nothing.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.DuringParsing">
            <summary>
            The implementation of <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.ParseNext"/> will call this method
            to perform actual parsing of the file.
            
            <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.BeforeParsing"/> will always be called before this method.
            
            Override this method to perform the parsing in suitably small chunks.
            
            Returns <c>true</c> as long as there is more content to be parsed.
            
            Once this function returns <c>false</c>, the <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.AfterParsing"/> method
            will be called once.
            
            During parsing the implementation may call <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.OnProgress(System.Object,Sdl.FileTypeSupport.Framework.NativeApi.ProgressEventArgs)"/> to report the current progress.
            
            The default implementation returns false.
            </summary>
            <returns>True if there is more content to be parsed, false when parsing has been completed</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.AfterParsing">
            <summary>
            The implementation of <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.ParseNext"/> will call this method once, after parsing
            has been completed (which is indicated by <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.DuringParsing"/> returning false).
            
            Override this method to do clean-up work such as closing the file etc. once parsing is complete.
            
            The default implementation does nothing.
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.Progress">
            <summary>
            Progress reporting events, typically attached to when a progress reporter is used
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.Output">
            <summary>
            Default implementation of the Output property
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.ParseNext">
            <summary>
            Default implementation that takes care of dividing the parsing into 
            three stages, before parsing, during parsing, and after parsing, by calling
            the methods <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.BeforeParsing"/>, <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.DuringParsing"/>, and <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.AfterParsing"/>
            that derived classes should normally override to do the setup, parsing, and clean-up work.
            
            Derived classes do not need to override this method unless they need to add additional functionality
            outside of the three parsing implementation methods.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.Dispose">
            <summary>
            Implements IDisposable. Just calls Dispose saying that this is an explicit disposal and 
            tells the GC not to call the Finalizer.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.Dispose(System.Boolean)">
            <summary>
            Last change for the Parser to dispose manage and unmanged objects.
            It can be overriden by subclases.
            </summary>
            <param name="disposing">indicates if the dispose is explicit or implicit (from GC)</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileParser.Finalize">
            <summary>
            The distructor just calls Dispose with false parameter specifying this is a cakl from GC.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter">
            <summary>
            Abstract base class that can be used to build native file writers.
            
            Deriving your file writer from this class takes care of 
            some of the basics of implementing file writer interfaces.
            
            This class possesses a default implementation of the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentHandler"/> interface,
            which does nothing. Simply override the methods that are useful for your implementation to process the
            relevant content in your derived class.
            
            <para>
            This class also implements the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputSettingsAware"/>, and provides
            access to the output properties through the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.OutputProperties"/> property.
            </para>
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.OutputProperties">
            <summary>
            The output properties that were passed to <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.SetOutputProperties(Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputFileProperties)"/> by the framework.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.SetOutputProperties(Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputFileProperties)">
            <summary>
            Default implementation, stores the output properties
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.GetProposedOutputFileInfo(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties,Sdl.FileTypeSupport.Framework.NativeApi.IOutputFileInfo)">
            <summary>
            Default implementation, does nothing
            </summary>
            <param name="fileProperties"></param>
            <param name="proposedFileInfo"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.MessageReporter">
            <summary>
            Accessor to the message reporter set by the framework
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.LocationTracker">
            <summary>
            Default implementation, stores this information in a field
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.StructureTag(Sdl.FileTypeSupport.Framework.NativeApi.IStructureTagProperties)">
            <summary>
            Default implementation, does nothing
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.InlineStartTag(Sdl.FileTypeSupport.Framework.NativeApi.IStartTagProperties)">
            <summary>
            Default implementation, does nothing
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.InlineEndTag(Sdl.FileTypeSupport.Framework.NativeApi.IEndTagProperties)">
            <summary>
            Default implementation, does nothing
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.InlinePlaceholderTag(Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties)">
            <summary>
            Default implementation, does nothing
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.Text(Sdl.FileTypeSupport.Framework.NativeApi.ITextProperties)">
            <summary>
            Default implementation, does nothing
            </summary>
            <param name="textInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.CustomInfo(Sdl.FileTypeSupport.Framework.NativeApi.ICustomInfoProperties)">
            <summary>
            Default implementation, does nothing
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.LocationMark(Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)">
            <summary>
            Default implementation, does nothing
            </summary>
            <param name="markerId"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.ChangeContext(Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties)">
            <summary>
            Default implementation, does nothing
            </summary>
            <param name="contexts"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.LockedContentStart(Sdl.FileTypeSupport.Framework.NativeApi.ILockedContentProperties)">
            <summary>
            Default implementation, does nothing
            </summary>
            <param name="lockedContentInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.LockedContentEnd">
            <summary>
            Default implementation, does nothing
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.RevisionStart(Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties)">
            <summary>
            Default implementation, does nothing.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.RevisionEnd">
            <summary>
            Default implementation, does nothing.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.CommentStart(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)">
            <summary>
            Default implementation, does nothing.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.CommentEnd">
            <summary>
            Default implementation, does nothing.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.ParagraphComments(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)">
            <summary>
            Default implementation, does nothing.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.ParagraphUnitStart(Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties)">
            <summary>
            Default implementation, does nothing
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.ParagraphUnitEnd">
            <summary>
            Default implementation, does nothing
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.SegmentStart(Sdl.FileTypeSupport.Framework.NativeApi.ISegmentPairProperties)">
            <summary>
            Default implementation, does nothing
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.SegmentEnd">
            <summary>
            Default implementation, does nothing
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.Dispose">
            <summary>
            Implements IDisposable. Just calls Dispose saying that this is an explicit disposal and 
            tells the GC not to call the Finalizer.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.Dispose(System.Boolean)">
            <summary>
            Last change for the Parser to dispose manage and unmanged objects.
            It can be overriden by subclases.
            </summary>
            <param name="disposing">indicates if the dispose is explicit or implicit (from GC)</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileWriter.Finalize">
            <summary>
            The distructor just calls Dispose with false parameter specifying this is a cakl from GC.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileTypeComponent">
            <summary>
            Convenient base class for implementing file type components.
            
            Holds data members that are supplied by the framework during initialization.
            </summary>
            <remarks>
            <para>
            For convenience, implements <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentStreamMessageReporter"/>, the implementation relays
            calls to the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileTypeComponent.MessageReporter"/> property if it is not <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileTypeComponent.#ctor">
            <summary>
            Protected default constructor, should only be called by derived classes.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileTypeComponent.PropertiesFactory">
            <summary>
            The factory used to create native properties objects
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileTypeComponent.MessageReporter">
            <summary>
            The message reporter to be used for reporting non-critical issues.
            </summary>
            <remarks>Critical issues should throw exceptions.</remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileTypeComponent.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId,Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)">
            <summary>
            Calls the corresponding method on the message reporter property.
            </summary>
            <param name="source"></param>
            <param name="origin">The description of the action/component from which this message originates.</param>
            <param name="level"></param>
            <param name="message"></param>
            <param name="fromLocation"></param>
            <param name="uptoLocation"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.AbstractNativeFileTypeComponent.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,System.String)">
            <summary>
            Calls the corresponding method on the message reporter property.
            </summary>
            <param name="source"></param>
            <param name="origin">The description of the action/component from which this message originates.</param>
            <param name="level"></param>
            <param name="message"></param>
            <param name="locationDescription"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileLinkOption">
            <summary>
            Used in the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PreferredLinkage"/> property to
            indicate how a dependency file may be handled when writing to an intermediate
            bilingual file format (such as SDL XLIFF).
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileLinkOption.None">
            <summary>
            Unknown or not specified
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileLinkOption.Ignore">
            <summary>
            The file or its reference should not be persisted to the intermediate format.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileLinkOption.ReferenceRelative">
            <summary>
            The file is stored as a separate file, and will be located through 
            a relative path to the intermediate file.
            </summary>
            <remarks>
            <para>
            The relative path may or may not be stored explicitly in the intermediate
            file. (If not stored explicitly, the file may be located through conventions, e.g.
            by looking for it in the same folder or in a sub-folder with a specific name.)
            </para>
            </remarks>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileLinkOption.ReferenceAbsolute">
            <summary>
            The file is stored as a separate file, which is explicitly referenced 
            through an absolute path. (The absolute path is stored in the intermediate file.)
            </summary>
            <remarks>
            <para>
            The absolute path is typically stored in the intermediate file (though it could
            also be a "well known" path, which is always checked).
            </para>
            <para>
            Use this option carefully, as it may not work if the intermediate file is moved to a different
            system on which the absolute path is no longer valid.
            </para>
            </remarks>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileLinkOption.Embed">
            <summary>
            The file is embedded inside the intermediate file.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileUsage">
            <summary>
            Values combined as flags for the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ExpectedUsage"/> property
            to indicate expected use cases for a dependency file
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileUsage.None">
            <summary>
            Unknown or not specified
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileUsage.Extraction">
            <summary>
            Used during the extraction phase
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileUsage.Generation">
            <summary>
            Used during the generate phase
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileUsage.Final">
            <summary>
            Used or required for correct operation of the final (localized) file
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel">
            <summary>
            Indicates the level of confidence with which a property has been determined.
            </summary>
            <remarks>
            <para>
            This is used, for example, for codepage and language detection in a file sniffer
            to indicate how likely it is that the codepage and languages have been identified correctly.
            </para>
            </remarks>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel.Unknown">
            <summary>
            The property value could not be determined.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel.Guess">
            <summary>
            A possible suggestion for the property value has been determined.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel.Likely">
            <summary>
            A likely value for the property has been determined.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel.Certain">
            <summary>
            The property value was determined beyond doubt.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel">
            <summary>
            Severity level for messages
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel.Unspecified">
            <summary>
            No explicit severity level has been set.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel.Note">
            <summary>
            For informational purposes only
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel.Warning">
            <summary>
            A potential problem or an issue that should be corrected
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel.Error">
            <summary>
            A problem that must be addressed
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.FileId">
            <summary>
            Typesafe wrapper for a file identifier string.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.FileId.#ctor(System.String)">
            <summary>
            Construction from a string id
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.FileId.Id">
            <summary>
            The id as a string
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.FileId.ToString">
            <summary>
            The id as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.FileId.Equals(System.Object)">
            <summary>
            True if string id values are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.FileId.GetHashCode">
            <summary>
            The string id hash
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.FileId.op_Equality(Sdl.FileTypeSupport.Framework.NativeApi.FileId,Sdl.FileTypeSupport.Framework.NativeApi.FileId)">
            <summary>
            True if string id values are equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.FileId.op_Inequality(Sdl.FileTypeSupport.Framework.NativeApi.FileId,Sdl.FileTypeSupport.Framework.NativeApi.FileId)">
            <summary>
            True if string id values are not equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractBasicTagProperties">
            <summary>
            Common interface for properties supported by all tags.
            </summary>
            <remarks>
            <para>
            Contains basic tag properties such as <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractBasicTagProperties.TagContent"/> and <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractBasicTagProperties.DisplayText"/>.
            </para>
            <para>
            Custom tag properties can be stored as metadata using the methods in the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer"/> interface.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractBasicTagProperties.DisplayText">
            <summary>
            A shortened version of a tag that can be used in translation editors
            that implement full and abbreviated tag views. Often the GI without attributes.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractBasicTagProperties.TagContent">
            <summary>
            This property usually holds the whole tag with delimiters and all attributes during 
            the entire forward and backward conversion process.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties">
            <summary>
            Common tag properties specific to inline tags, i.e. tags that can be found inside (translatable) text.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsWordStop">
            <summary>
            Determines whether the tag is considered to be a new word during segmentation. It also affects the way that the 
            caret moves when using word movement keyboard actions such as CTRL+LEFT ARROW and CTRL+RIGHT ARROW in editors. 
            </summary>
            <example>
            During segmentation, if a tag has IsWordStop false then "hello[tag]world[/tag]" is considered to be one word - "hello[tag]world[/tag]" and
            if a tag has IsWordStop true then "hello[tag]world[/tag]" is considered to be two words - "hello" and "[tag]world[/tag]".
            </example>
            <para>This is <c>true</c> by default for placeholder tags, and <c>false</c> by default
            for start and end tags.</para>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsSoftBreak">
            <summary>
            Indicates whether it is valid to break the line in front of this tag during word wrap. 
            </summary>
            <remarks>
            <para>
            May be used by word wrapping algorithms in editors.
            </para>
            <para>This is <c>true</c> by default for all tag types.</para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.CanHide">
            <summary>
            Indicates whether the tag is allowed to be hidden during editing operations.
            </summary>
            <remarks>
            <para>
            Hidden tags can easily get deleted by mistake during editing operations.
            Always set this to <c>false</c> for tags that represent important content that the
            user should not delete unknowingly.
            </para>
            <para>
            Typically this is set to <c>true</c> for elements like tag pairs that represent pure
            character formatting, without any other associated functionality - and only if the relevant
            <see cref="N:Sdl.FileTypeSupport.Framework.Formatting"/> properties have been set for the tag, so that the user
            can see what the character formatting actually looks like in the editor without any need to see the tags.
            </para>
            <para>
            Setting this to <c>true</c> does not necessarily mean that the tag will always be hidden.
            This will be determined by the editor (i.e. the user may change this at runtime through a setting).
            </para>
            <para>This is <c>false</c> by default for all tag types.</para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties">
            <summary>
            Common information on start tags, placeholder tags and structure tags (but not end tags).
            </summary>
            <remarks>These types of tags can have localizable content and unique tag identifiers.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.LocalizableContent">
            <summary>
            Translatable content inside the tag, in the order in which it appears. An example of such content may 
            be localizable attribute values in HTML or XML.
            </summary>
            <remarks>
            <para>
            For convenience, 
            test the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.HasLocalizableContent"/> to determine if there is any localizable content for the tag.
            </para>
            <para>
            To add or remove localizable content, call <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.AddSubSegment(Sdl.FileTypeSupport.Framework.NativeApi.ISubSegmentProperties)"/> or
            <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.RemoveSubSegment(Sdl.FileTypeSupport.Framework.NativeApi.ISubSegmentProperties)"/>.
            </para>
            <para>
            The sub-segments are ordered, with the lowest offset being listed first.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.HasLocalizableContent">
            <summary>
            <c>True</c> if <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.LocalizableContent"/> is not <c>null</c>, and has at least one sub-segment.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.TagId">
            <summary>
            Identifier for a tag. 
            <para>Tags originating from the native parser typically have unique ids.</para>
            <para>In the bilingual content model, corresponding tags between source and target can be identified
            by their ids.</para>
            <para> If a tag is cloned, it will have the same id as its clone. It may therefore happen during conversion
            from bilingual to native format that multiple tags have the same id. In such cases the native
            content handler may assume that the tags have been cloned for localization purposes.</para>
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.AddSubSegment(Sdl.FileTypeSupport.Framework.NativeApi.ISubSegmentProperties)">
            <summary>
            Adds localizable content as a sub-segment for this tag. 
            </summary>
            <remarks>
            <para>
            The sub-segments can be accessed through <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.LocalizableContent"/>,
            where they are sorted in the order in which they appear.
            </para>
            </remarks>
            <param name="localizableContent"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.AddSubSegments(System.Collections.Generic.IEnumerable{Sdl.FileTypeSupport.Framework.NativeApi.ISubSegmentProperties})">
            <summary>
            Adds a collection of localizable sub-segments for this tag.
            </summary>
            <param name="localizableContent"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.RemoveSubSegment(Sdl.FileTypeSupport.Framework.NativeApi.ISubSegmentProperties)">
            <summary>
            Removes localizable content for this tag.
            </summary>
            <remarks>
            If the specified object is not part of the localizable content
            for this tag, nothing happens.
            </remarks>
            <param name="localizableContent">Localizable sub-segment to be removed</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.ClearSubSegments">
            <summary>
            Removes all localizable content for this tag.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.SortSubSegments">
            <summary>
            Sorts the localizable sub-segments by start offset.
            </summary>
            <remarks>
            <para>
            The collection is automatically sorted when calling <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractTagProperties.AddSubSegment(Sdl.FileTypeSupport.Framework.NativeApi.ISubSegmentProperties)"/>.
            You should only need to call this method if the start offsets of segments are
            explicitly changed after they have been added to the tag.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjectsAware">
            <summary>
            Implemented by any file type components (native or bilingual) that require access to shared objects
            used during processing.
            The framework will call the <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjectsAware.SetSharedObjects(Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects)"/> method
            before the component is used for the first time.
            </summary>
            <remarks>
            <para>
            This interface can be used to establish communication across components or between components
            and the host application during conversion.
            </para>
            <para>
            Communication between components during conversion is normally handled by embedding
            information in the actual content, e.g. by calling <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.CustomInfo(Sdl.FileTypeSupport.Framework.NativeApi.ICustomInfoProperties)"/>,
            by setting custom properties on tags or contexts, or by adding actual content such as tags or
            contexts to the output. That is often the preferred method for content processing components to communicate,
            since the information will travel with the data it relates to, and is therefore not affected
            by buffering, etc. However, it is sometimes useful to establish communication of unrelated properties
            or to communicate 'upstream', in which case shared objects constitute the preferred mechanism.
            </para>
            <para>
            An example of the use of shared objects are verification settings, which are passed from SDL Trados
            Studio to the verifier components.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjectsAware.SetSharedObjects(Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects)">
            <summary>
            The framework calls this method before the component is used for content processing
            in order to communicate with the interface used for accessing shared objects.
            </summary>
            <param name="sharedObjects"></param>
            <remarks>
            <para>
            Note that not all shared objects may  have been published at the time of this call.
            Handle the <see cref="E:Sdl.FileTypeSupport.Framework.NativeApi.ISharedObjects.SharedObjectPublished"/> event to get notifications
            when new object instances are shared.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo">
            <summary>
            One piece of context information, with a type, purpose and description, as
            stored in <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties.Contexts"/>.
            </summary>
            <remarks>
            <para>
            Custom metadata can be stored and accessed by using the methods in <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo.ContextType">
            <summary>
            A short string that identifies the type of context.
            Use pre-defined constants defined in <c>Sdl.FileTypeSupport.Framework.Core.Utilities.NativeApi.TMMatchContextTypes</c> 
            for TM match contexts, and constants defined in 
            <c>Sdl.FileTypeSupport.Framework.Core.Utilities.NativeApi.StandardContextTypes</c> for other context types, as far as possible.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo.DisplayName">
            <summary>
            A short string to be used as the default display text for the context
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo.DisplayCode">
            <summary>
            A very short string (usually one or two letters) to identify the context
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo.Purpose">
            <summary>
            A value that indicates how this context is to be used:
            <list>
            <item>Match: for contexts that are used when looking up in a TM</item>
            <item>Informational: for contexts that provide translators with information</item>
            <item>Location: for contexts that are used to mark a document location</item>
            </list>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo.Description">
            <summary>
            Additional, more descriptive information on the context
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo.DisplayColor">
            <summary>
            The display color associated with the context (background color, etc.)
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo.DefaultFormatting">
            <summary>
            Display formatting associated with this context, or <c>null</c> if none.
            </summary>
            <remarks>
            <para>
            When specified, this will be the "base formatting" used in paragraph
            units appearing inside the context, which can be overridden locally
            inside the paragraph unit for individual tag pairs.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties">
            <summary>
            Context information passed through the <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.ChangeContext(Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties)"/> method
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties.Contexts">
            <summary>
            List of <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo"/> objects, with the most relevant
            context being first in the list.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties.StructureInfo">
            <summary>
            The context that relates specifically to the document structure. This has
            been separated out from the contexts list, because translation context priorities
            may not be the same as document structure priority.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties.EffectiveDefaultFormatting">
            <summary>
            The sum of all formatting provided by contexts, or <c>null</c> if
            no contexts in the list have associated formatting.
            </summary>
            <remarks>
            <para>
            This is computed by overlaying the formatting from each context in the
            order in which they appear, with the first context being the most significant.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ICustomInfoProperties">
            <summary>
            Data container for all kinds of custom information
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ICustomInfoProperties.NamespaceUri">
            <summary>
            Uniquely identifies the type of info this represents.
            </summary>
            <remarks>
            To avoid universal name clashes we strongly recommend that you use a string
            that resembles a URI for your company. (This does not need to be a functional URI,
            it is used only to uniquely identify global categories of information.)
            </remarks>
            <example>http://www.sdl.com/FileTypeSupport/Framework/2.0/MyCategoryOfInformation</example>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ICustomInfoProperties.ValueXml">
            <summary>
            Value that this custom information represents. This should be valid in XML form.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties">
            <summary>
            Information on a dependency file used during file conversion.
            </summary>
            <remarks>
            <para>
            Some examples of dependency files include: 
            <list type="bullet">
            <item>The original native file, if needed for generation of translated native file.</item>
            <item>The Filter Framework 1 filter definition file, if required by Filter Framework 1 filter and adapter.</item>
            <item>Image files required to correctly display an HTML file during preview.</item>
            <item>An XML schema required for validation of the output.</item>
            <item>A translation memory that may be used during translation.</item>
            </list>
            </para>
            <para>
            Dependency files are not processed for localizable content.
            </para>
            <para>
            Information on dependency files is particularly important when moving bilingual
            documents between systems (or even between different locations on the same system). After
            saving a bilingual document <see cref="P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.LinkedDependencyFiles"/>, 
            this contains information on which dependency files (if any) were explicitly linked rather than 
            embedded in the bilingual file.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Id">
            <summary>
            Id associated with this dependency file. (optional)
            </summary>
            <remarks>
            <para>
            Can be used by related file type components to ensure that they pick the right
            file to use for the right purpose.
            </para>
            <para>
            To avoid interference between unrelated components working together it is 
            recommended to use a URI as the id.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.FileExists">
            <summary>
            <c>True</c> if the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath"/> references a file
            that exists.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath">
            <summary>
            The current path to the dependency file
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ZippedCurrentFile">
            <summary>
            A <see cref="T:Sdl.FileTypeSupport.Framework.FileJanitor"/> instance managing the lifetime of a temporary .zip file containing a copy of the file stored in <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath"/>.
            </summary>
            <remarks>
            <para>
            The zipped file is generated on demand, and will also be deleted during garbage collection.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalFilePath">
            <summary>
            The original path of the dependency file (if known)
            </summary>
            <remarks>
            <para>
            Temporarily generated dependency files may not have an original file path.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalLastChangeDate">
            <summary>
            The timestamp (the last change date) of the original dependency file (if known)
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PathRelativeToConverted">
            <summary>
            If the file is a direct dependency of the file being converted, and it is linked rather than embedded,
            then this property may contain the path to the linked dependency file relative to the .sdlxliff file
            that refers to it.
            </summary>
            <remarks>
            <para>
            This property can be <c>null</c> if no relative path should be associated with
            this dependency.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Description">
            <summary>
            Optional clear text description of the file. This can be used e.g. to explain 
            the origin and purpose of the file to other users and developers.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ExpectedUsage">
            <summary>
            Expected usage for this dependency file (optional)
            </summary>
            <remarks>
            <para>
            This does not limit the possible usage of the file, it merely serves as a hint on
            what it is used for.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PreferredLinkage">
            <summary>
            Indicates the preferred way of handling this file when writing intermediate
            bilingual content. (optional)
            </summary>
            <remarks>
            <para>
            Set this value e.g. to specifically request that the dependency file gets 
            referenced as an external link rather than being embedded when saving 
            to an intermediate bilingual format such as SDL XLIFF.
            </para>
            <para>
            Note that this serves as a recommendation only, the writer is not 
            required to honor this setting. For some file formats it may e.g. not
            be possible to embed dependency files. The host application needs to check
            the properties of the writer after conversion to find out which 
            external dependencies it produced.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.DisposableObject">
            <summary>
            This property can be used to hold a reference to a disposable object,
            such as a temp file that should be deleted when it has no more references. (optional)
            </summary>
            <remarks>
            <para>
            You can assign a temp file object with a finalizer that deletes the temp file to
            this property, and the file should be kept alive as long as anyone has
            a reference to it (unless, of course, someone explicitly calls <c>Dispose</c> on it).
            </para>
            <para>
            Normally, users should NOT explicitly invoke <c>Dispose</c> on this object,
            as it may still be referenced by others. The <c>IDisposable</c> interface
            is used here mainly to indicate that the object is expected
            to do some clean-up work at some point when it is no longer needed.
            </para>
            <para>
            This property is (for obvious reasons) not serialized.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IEndTagProperties">
            <summary>
            Properties for the end tag that matches a corresponding start tag.
            </summary>
            <remarks>
            <para>
            Since it is always clear which start tag an end tag matches (due to the XML-well-formedness requirement
            imposed by the API) there is no need for an end tag to have an id.
            </para>
            <para>
            End tags may not contain translatable content either, and cannot have formatting associated with them.
            </para>
            <para>
            By default,start and end tag properties have <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsWordStop"/> set to <c>false</c>,
            as paired tags normally represent formatting or similar information, which should not affect the
            word boundaries in the text.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileTypeComponent">
            <summary>
            Native parsers and native content processor components may implement this interface 
            to get initialized by the framework.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileTypeComponent.PropertiesFactory">
            <summary>
            The framework will set this property as part of the initialization of the 
            file type component.
            
            File type components should use this factory to create the property objects that
            are used when outputting to the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentHandler"/>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileTypeComponent.MessageReporter">
            <summary>
            The framework will set this property as part of initialization of the 
            file type component.
            
            File type components use this interface to report any non-critical issues
            to the framework. (Critical issues are reported by throwing a <see cref="T:Sdl.FileTypeSupport.Framework.FileTypeSupportException"/>
            or a derived type.)
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.LockTypeFlags">
            <summary>
            Enumterator that contains the available lock types
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.LockTypeFlags.Unlocked">
            <summary>
            The content is not locked.
            </summary>
            <remarks>
            <para>
            This value should never be used with locked content items in the bilingual API,
            but it is used in paragraph unit properties for paragraph units that are not locked.
            </para>
            </remarks>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.LockTypeFlags.Structure">
            <summary>
            Applied to structure paragraph units in the bilingual API.
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.LockTypeFlags.Externalized">
            <summary>
            Applied to paragraph units in the bilingual API when a document has been split
            into multiple instances, so that multiple translators, for example, can work on it
            simultaneously. This lock type is applied automatically to paragraph units that
            should not be translated in this file (when they should be translated in a different
            file instead).
            </summary>
        </member>
        <member name="F:Sdl.FileTypeSupport.Framework.NativeApi.LockTypeFlags.Manual">
            <summary>
            A lock that was explicitly inserted, as opposed to an automatically generated lock
            </summary>
            <remarks>
            <para>
            The structure and externalized locks are automatically generated. This flag
            should be used when someone explicitly locks a paragraph unit in the bilingual API.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ILockedContentProperties">
            <summary>
            Information on a locked content, which is protected from modification
            during localization.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ILockedContentProperties.LockType">
            <summary>
            A combination of flags that indicate the type of lock
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentStreamMessageReporter">
            <summary>
            Message reporting mechanism intended for native content processors. Allows
            explicit locations to be associated with messages. The corresponding locations
            should be output on the native content stream through calls to 
            <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.LocationMark(Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)"/>.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentStreamMessageReporter.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId,Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)">
            <summary>
            Used by native content processors to report a non-critical issue with an associated range or location
            identified by location marker ids passed around through <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.LocationMark(Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)"/> calls
            in the native content stream.
            </summary>
            <param name="source">The component from which the message originates. Components typically pass <c>this</c> for this parameter.</param>
            <param name="origin">The description of the action/component from which this message originated.</param>
            <param name="level">Severity of the message</param>
            <param name="message">The actual message text</param>
            <param name="fromLocation">The start of the content location that the location the message refers to. 
            Native content processors normally create a new location marker, and insert it into the content stream.</param>
            <param name="uptoLocation">The end of the content location that the message refers to. May be <c>null</c> or the
            same as the <c>fromLocation</c>, in which case the message is interpreted to refer to a single location,
            and not a range of content.</param>
            <remarks>
            </remarks>
            <example>
            The following code shows an example of how to report a message with a location from a native content processor:
            <code>
            void ReportWarning(string message)
            {
               LocationMarkerId location = new LocationMarkerId();
               Output.LocationMark(location);
               MessageReporter.ReportMessage(this, "Origin of error", ErrorLevel.Warning, message, location, null);
            }
            </code>
            </example>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware">
            <summary>
            This interface should be implemented by any native processing components
            that need to know when the input starts and ends.
            
            The framework will call the methods on this interface before and after parsing
            the native content.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware.SetFileProperties(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)">
            <summary>
            The framework calls this method for each file type component before the data of a file is 
            passed through any of them.
            Note that if a document contains data from multiple files, this may get called several
            times during the life of a component, even when processing a single bilingual document.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware.StartOfInput">
            <summary>
            Called by the framework after component initialization (i.e.
            after <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware.SetFileProperties(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)"/>), but before
            any content is parsed and passed to any of the file type components.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware.EndOfInput">
            <summary>
            Called by the framework after the processing of native content has finished.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler">
            <summary>
            This is the core streaming interface that is used for input and output of content
            to/from native content processor components such as file parsers and file writers
            for native file formats. It is specialized into <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentHandler"/>
            and <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentHandler"/> for any specifics to consider during
            read and write operations.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.StructureTag(Sdl.FileTypeSupport.Framework.NativeApi.IStructureTagProperties)">
            <summary>
            Content that is interpreted as a structural tag, i.e. a tag that
            does not appear inside translatable text.
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.InlineStartTag(Sdl.FileTypeSupport.Framework.NativeApi.IStartTagProperties)">
            <summary>
            Content that is interpreted as the first of a set of paired tags that may appear 
            inside text.
            </summary>
            <remarks>
            Paired tags must always appear in an XML-compliant way, i.e. each start
            tag must have a matching end tag on the same level of its scope.</remarks>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.InlineEndTag(Sdl.FileTypeSupport.Framework.NativeApi.IEndTagProperties)">
            <summary>
            Content that is interpreted as the end of a previously emitted start tag.
            </summary>
            <remarks>
            Paired tags must always appear in an XML-compliant way, i.e. each start
            tag must have a matching end tag on the same level of its scope.</remarks>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.InlinePlaceholderTag(Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties)">
            <summary>
            Content interpreted as a placeholder that may appear inside text. 
            Do not use this for method for paired placeholders.
            </summary>
            <param name="tagInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.Text(Sdl.FileTypeSupport.Framework.NativeApi.ITextProperties)">
            <summary>
            Content that represents translatable text
            </summary>
            <param name="textInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.ChangeContext(Sdl.FileTypeSupport.Framework.NativeApi.IContextProperties)">
            <summary>
            Sets or changes translation related context information.
            Context changes will most often be associated with structure tags. 
            Context changes inside text will cause the text to be split into
            separate units during translation, which should normally be avoided
            (if possible).
            </summary>
            <param name="newContexts"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.CustomInfo(Sdl.FileTypeSupport.Framework.NativeApi.ICustomInfoProperties)">
            <summary>
            Temporary custom information, which can be used for communication between
            native content processing components.
            </summary>
            <remarks>CustomInfo events are volatile, i.e. they are not persisted or converted
            into bilingual content. They are intended only for temporary communication between
            file type components. An example of a custom info event is the current cursor position
            when generating a preview for a file in the editor.</remarks>
            <param name="info"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.LocationMark(Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)">
            <summary>
            Used with the message reporting mechanism to communicate locations 
            associated with messages reported using the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentStreamMessageReporter"/>.
            </summary>
            <param name="markerId">Unique identifier for the message; typically created using the 
            default constructor</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.LockedContentStart(Sdl.FileTypeSupport.Framework.NativeApi.ILockedContentProperties)">
            <summary>
            Used to indicate that the following content should be treated
            as locked content until a matched EndLockedContent() call is made.
            </summary>
            <remarks>When specific content in the stream needs to be treated
            as locked, matching calls to StartLockedContent and EndLockedContent
            are made. The content to be locked is 'sandwiched' between these calls.</remarks>
            <param name="lockedContentInfo"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.LockedContentEnd">
            <summary>
            Used to indicate the end of locked content in the stream.
            </summary>
            <remarks>This method is called when the end of the content that should be locked
            has been reached. This call should always be paired with a prior call to
            StartLockedContent, with the locked content calls 'sandwiched' between these two calls.</remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.RevisionStart(Sdl.FileTypeSupport.Framework.BilingualApi.IRevisionProperties)">
            <summary>
            Used to indicate that the following content should be treated
            as revisioned content until a matched <c>RevisionEnd()</c> call is made.
            </summary>
            <param name="revisionInfo">The revision information.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.RevisionEnd">
            <summary>
            Used to indicate the end of revisioned content in the stream.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.CommentStart(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)">
            <summary>
            Used to indicate that the following content should be treated
            as commented content until a matched <c>CommentEnd()</c> call is made.
            </summary>
            <param name="commentInfo">The comment information.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.CommentEnd">
            <summary>
            Used to indicate the end of commented content in the stream.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.ParagraphComments(Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties)">
            <summary>
            Used to set Paragraph comments to the current paragraph.
            </summary>
            <param name="commentInfo">The comment information.</param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor">
            <summary>
            Interface that is implemented by a component that processes native content
            during extraction (parsing) of native files. The input is received in the 
            form of calls to the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentHandler"/> interface
            and the implementation outputs processed information through calls to 
            another instance of the same interface type.
            </summary>
            <remarks>
            During native file generation (writing) the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor"/>
            fills the corresponding function.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor.Output">
            <summary>
            The interface on which this processor generates the output
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor">
            <summary>
            <para>
            Manages the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor.Parser"/> used to process the native file as well as a set
            of <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor"/> components that processes the
            output of the parser.
            </para>
            <para>
            The result of the processing consists of calls to the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor.Output"/>.
            </para>
            </summary>
            <remarks>
            <para>
            Used together with other components in a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor"/> to 
            extract content from a native file.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor.Parser">
            <summary>
            The file parser that will read the input file
            </summary>
            <remarks>
            <para>
            The output from the parser is processed in sequence by each native content processor 
            before being passed to the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor.Output"/>.</para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor.AddProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor)">
            <summary>
            Appends a content processor that will be invoked to process the output of the parser.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor.InsertProcessor(System.Int32,Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor)">
            <summary>
            Inserts a content processor at the specified index in the list of content processors
            that will be invoked to process the output from the parser. The processors are invoked
            in the order in which they appear in the list.
            </summary>
            <param name="index"></param>
            <param name="processor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor.RemoveProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor)">
            <summary>
            Removes a content processor from the list. Does not do anything if the processor is not in the list.
            </summary>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor.ContentProcessors">
            <summary>
            <para>
            The content processors currently in use, in the order in which they will be invoked.
            </para>
            <para>
            Use <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor.AddProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor)"/>, <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor.InsertProcessor(System.Int32,Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor)"/> and <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor.RemoveProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor)"/>
            to modify the collection.
            </para>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor.Output">
            <summary>
            The output from the extractor (i.e. the parser and the native processors) will be
            passed to this component.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser">
            <summary>
            This interface is implemented by all native file parsers. The framework
            uses this interface to operate the parser.
            </summary>
            <remarks>
            The parser must retrieve the name of the input file to be processed by
            implementing the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware"/> interface.
            The input file name can be retrieved from the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.OriginalFilePath"/> property
            of the file conversion properties object passed to the
            component by the framework through the <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware.SetFileProperties(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)"/> method.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser.Output">
            <summary>
            The framework sets this property before the first call
            to <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IParser.ParseNext"/> in order to specify the component that
            will process the output from the parser. 
            
            The parser implementation should send the whole output to this object.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileSniffer">
            <summary>
            A file sniffer is a component that gets invoked to determine
            if a particular file can be processed.
            
            <para>
            If the file is supported, the file sniffer may also detect the language and the encoding of
            a given file, in addition to any other information that will be useful to set up the
            parser to correctly process it.
            </para>
            </summary>
            <remarks>
            <para>
            File sniffers allow the framework to distinguish between different file types that use the
            same file extension. A file sniffer is expected to look at the actual file content to
            determine if the file is supported.
            </para>
            <para>
            The file sniffer implementation should return a <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo"/> instance where the
            <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported"/> is set to <c>true</c> if the file is of the expected type.
            </para>
            <para>
            The file sniffer may also attempt to automatically detect the encoding and the source (and target)
            language of the file. When detecting such things, the file sniffer also specifies a confidence level
            for the detection, which allows applications to determine whether they may need to ask the user for additional
            information or not.
            </para>
            <para>
            The file type manager invokes the <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileSniffer.Sniff(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter,Sdl.Core.Settings.ISettingsGroup)"/> method on a file
            sniffer associated with a file type definition to determine if the file
            is of a type that can be processed.
            </para>
            <para>
            The file sniffer implementation must be stateless and thread safe, since for performance reasons
            the file sniffer may be cached and re-used across multiple files, possibly 
            also in a multi-threaded environment. The easiest way to accomplish this is by ensuring
            that the <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileSniffer.Sniff(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter,Sdl.Core.Settings.ISettingsGroup)"/> implementation does not modify any class member fields
            and to avoid using static variables.
            </para>
            <para>
            The file sniffer is also recommended (but not required) to 
            implement <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware"/>. If 
            this interface is implemented, it will be used by the framework to communicate the file type definition 
            used to instantiate the sniffer.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileSniffer.Sniff(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter,Sdl.Core.Settings.ISettingsGroup)">
            <summary>
            Called by the framework to invoke the file sniffer for a specific file.
            </summary>
            <remarks>
            The implementation of this method must be stateless and thread-safe.
            </remarks>
            <param name="nativeFilePath">Fill path to the file to sniff.</param>
            <param name="suggestedSourceLanguage">Expected source language of the file.</param>
            <param name="suggestedCodepage">Possible suggested codepage of the file (based on its expected language).</param>
            <param name="messageReporter">Supplied by the framework to allow file sniffers to report
            file-related information that may be of interest.</param>
            <param name="settingsGroup">Supplied by the framework to allow file sniffers to change their behavior
            depending on their settings. This parameter is intended as the sole means to gain access to settings in the
            sniffer - methods used for other components will invalidate the stateless model of file sniffers and should not be used.</param>
            <returns>An instance of a <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo"/> object where the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported"/> property
            has been set to <c>true</c> or <c>false</c> to indicate if the file is of a supported type. The return value
            may also indicate the detected encoding, source, and target language, together with the detection 
            confidence levels.</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter">
            <summary>
            Interface implemented by components that write to native file formats.
            </summary>
            <remarks>
            The file writer retrieves information on the output file
            by implementing the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputSettingsAware"/> interface.
            The framework calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputSettingsAware.SetOutputProperties(Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputFileProperties)"/> before
            the content is processed, and the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputFileProperties"/> object that is passed to 
            this method contains the name of the output file to create, its preferred codepage, etc.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter.MessageReporter">
            <summary>
            The framework will set this property as part of initialization for the 
            component. The component can use this instance to report potential issues
            and non-fatal error conditions.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter.LocationTracker">
            <summary>
            The framework will set this property as part of initialization.
            The writer can use this as an easy way to determine locations of specific content
            within the native input stream.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator">
            <summary>
            <para>
            Manages the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator.Writer"/> used to create the native file as well as a set
            of <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractionContentProcessor"/> components that process the
            input before it is passed to the writer.
            </para>
            <para>
            The input is received on the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator.Input"/> content handler.
            </para>
            </summary>
            <remarks>
            <para>
            Used with other components in a <see cref="T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor"/> to 
            write a native file.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator.Input">
            <summary>
            This is the content handler that is used to drive the native file writer
            with its content processors.
            </summary>
            <remarks>
            <para>
            Usually, it is the first content processor,
            or the actual file writer instance if no content processors exist.
            </para>
            <para>
            If no content processors or file writer have been defined, this property
            may be <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator.AddProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor)">
            <summary>
            Appends a native processor that will be invoked before the writer.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator.InsertProcessor(System.Int32,Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor)">
            <summary>
            Inserts a native processor at the specified index in the list of 
            native processors.
            </summary>
            <param name="index"></param>
            <param name="processor"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator.RemoveProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor)">
            <summary>
            Removes a native processor from the list.
            </summary>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator.ContentProcessors">
            <summary>
            <para>
            The content processors that act on the input content before it is
            passed to the writer, in the order in which they will be invoked.
            </para>
            <para>
            Use <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator.AddProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor)"/>, <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator.InsertProcessor(System.Int32,Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor)"/>, and <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator.RemoveProcessor(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerationContentProcessor)"/>
            to modify the collection.
            </para>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator.Writer">
            <summary>
            The file writer that creates the final output.
            </summary>
            <remarks>
            This property can be <c>null</c>, in which case content will still
            be processed, but no output should be generated.
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputFileProperties">
            <summary>
            This interface represents the information communicated to the file type components
            related to the generation of a native content output file.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputFileProperties.ContentRestriction">
            <summary>
            Indicates whether the output is in the source or target language.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputFileProperties.OutputFilePath">
            <summary>
            The full path to the output file to create
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputFileProperties.Encoding">
            <summary>
            Preferred encoding for the output file, if any
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputSettingsAware">
            <summary>
            This interface needs to be implemented by any components that should be  
            'aware' of which settings are used when writing native files.
            
            The <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputSettingsAware.SetOutputProperties(Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputFileProperties)"/> method will be invoked
            before the content of each native file is processed.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputSettingsAware.SetOutputProperties(Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputFileProperties)">
            <summary>
            This method is invoked by the framework before processing content
            from each native file. The properties passed to this method
            indicate whether source or target language content will be included in the output.
            It also communicates other important properties such as the
            name of the output file to be created and what encoding should
            be used.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputSettingsAware.GetProposedOutputFileInfo(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties,Sdl.FileTypeSupport.Framework.NativeApi.IOutputFileInfo)">
            <summary>
            Allows a file type component to suggest a file name for the output
            file to be created. This is called by the framework during generation to provide a suggested default
            file name (and extension) to the host application's implementation
            of the output properties provider.
            <para>
            The provided information allows an application to show a properly initialized 
            Save As dialog with a proposed file name and a corresponding file type filter.
            </para>
            </summary>
            <param name="fileProperties"></param>
            <param name="proposedFileInfo">Current proposal for the file name etc. if suggested by a 
            preceding file processor component. The implementation may
            change the properties of this object to indicate the proposed information.</param>
            <remarks>
            <para>
            The framework will call this method for each file type component in the order in which the components 
            are used during generation. Proposals that occur later are always given precedence.
            </para>
            <para>
            The implementation does not need to supply a full path for the file when suggesting a filename.
            </para>
            <para>
            The actual output file info that will be used is provided by the framework
            through the <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputSettingsAware.SetOutputProperties(Sdl.FileTypeSupport.Framework.NativeApi.INativeOutputFileProperties)"/> call.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IParser">
            <summary>
            Interface implemented by parsers.
            Abstracting this functionality into a separate interface allows you to drive parsing for native and bilingual content in the same way.
            </summary>
        </member>
        <member name="E:Sdl.FileTypeSupport.Framework.NativeApi.IParser.Progress">
            <summary>
            The parser fires this event at regular intervals
            in order to report the progress so that interested parties can ascertain whether
            the parsing process is indeed in progress and has not hung. That way users
            get an idea about how fast the parsing job is progressing.
            
            Framework consumers should typically not connect directly to 
            this event, but rather connect to the corresponding event on the 
            <c>IFileConverter</c> instance.
            </summary>
            <remarks>
            Progress is reported in integer percentage values. It is not
            an error when a parser reports the same percentage number
            in subsequent events. This just indicates to the listeners
            that the progress is slow but the component is still working on it.
            
            It is unusual (but not unthinkable) that a percentage value
            can decrease. This could happen if the parser gets a better estimate
            of the job size (e.g. when it needs to parse dependency 
            files, too).
            
            It is customary for a parser to fire this event with a percentage value of 0
            when parsing is about to begin and with a percentage value of 100 when parsing
            is finished.
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IParser.ParseNext">
            <summary>
            This method is called repeatedly by the framework to process the next chunk of input.
            
            The implementation should parse a suitable (preferably not too large) chunk of the input,
            and return a boolean value that indicates whether there is more work to be done before this file is 
            completely parsed.
            </summary>
            <returns><c>true</c> if there is more content to be parsed, and <c>false</c> if parsing is complete.</returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties">
            <summary>
            <para>
            File-level properties that are guaranteed to be preserved (if necessary persisted to an
            intermediate bilingual file format) during different stages of the content processing lifecycle;
            passed to native content processors, parsers and writers that implement <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware"/>.
            </para>
            <para>
            Components can set these properties during parsing, and they will be made available when 
            generating the translated output, or during any other operation used to process content.
            </para>
            <para>
            Custom properties can be stored as metadata key/value pairs through the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer"/> implementation. It is
            recommended that keys are prefixed with a value that is likely to be unique in order to 
            avoid conflicts with unrelated components. 
            </para>
            </summary>
            <remarks>
            <para>
            Components can retrieve these properties by implementing <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware"/>. The
            framework calls <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware.SetFileProperties(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)"/> to pass
            the properties.
            </para>
            <para>
            All metadata stored by SDL components use keys prefixed "SDL:". 
            </para>
            <para>
            Keys for a number of published file properties used by certain SDL components 
            are defined in <c>Sdl.FileTypeSupport.Framework.Core.Utilities.NativeApi.DefaultPersistentFilePropertiesKeys</c>. 
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.FileId">
            <summary>
            Unique identifier for this file; can be used to unambigously identify
            the file in a bilingual document with multiple files.
            </summary>
            <remarks>
            <para>
            This is set by the framework, and should typically never need to be changed.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.FileTypeDefinitionId">
            <summary>
            The unique identifier for the file type definition used in this conversion.
            </summary>
            <remarks>
            <para>
            Can be used to identify the file type.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.Item(System.String)">
            <summary>
            <para>
            Convenience getter and setter for metadata using indexer syntax. 
            </para>
            <para>
            The getter functionality is equivalent to calling <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String,System.String)"/>,
            and setter functionality is equivalent to <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData(System.String)"/>.
            </para>
            </summary>
            <param name="key">Must not be <c>null</c> or empty</param>
            <returns>The corresponding value, or <c>null</c> if none</returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.DependencyFiles">
            <summary>
            <para>
            The dependency files used or created while parsing.
            </para>
            </summary>
            <remarks>
            <para>
            The set of dependency files can change while parsing, but
            should not change after the <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware.EndOfInput"/> call.
            </para>
            <para>
            Any dependency files reported by a parser or file type component when parsing a native file will
            be passed through this property when writing the native file.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.OriginalFilePath">
            <summary>
            Full path name to the native file the content originates from.
            </summary>
            <remarks>
            <para>
            Usually, this is the same as the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.InputFilePath"/>, but it can
            be different, e.g. if file tweaking has been applied.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.InputFilePath">
            <summary>
            <para>
            Full path to the file that should be used as source for the parser. 
            </para>
            </summary>
            <remarks>
            <para>
            Usually, this will be the same as <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.OriginalFilePath"/>, but under some 
            circumstances (e.g. file tweaking) there may be an alternative input file produced.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.OriginalEncoding">
            <summary>
            The original encoding of the native source language file from which the content originates
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.SourceLanguage">
            <summary>
            Original source language of the content
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.TargetLanguage">
            <summary>
            Target language into which the content is being translated into.
            </summary>
            <remarks>The target language is typically not set until the file is being translated. 
            You can test the <see cref="P:Sdl.Core.Globalization.Language.IsValid"/> property of the target language
            to find out if it has been set.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.PreferredTargetEncoding">
            <summary>
            If set, indicates the preferred codepage that the target language file should be in.
            You can test the <see cref="P:Sdl.Core.Globalization.Codepage.IsValid"/> property of the returned codepage
            to find out if it has been set.
            
            This property can be used during editing to warn the user when they try to use
            characters in the translation that are not supported by the given codepage.
            
            If this property is set when writing the target language version of the file, it may
            be used by the native file writer (though it is ultimately up to the file writer
            to decide).
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.FileSnifferInfo">
            <summary>
            Properties determined during successful identification of this
            file type
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.CreationTool">
            <summary>
            The name of the tool used for the conversion
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.CreationToolVersion">
            <summary>
            The version number of the tool used for the conversion
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.CreationDate">
            <summary>
            The time of the original conversion
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties">
            <summary>
            Information on a standalone inline tag, i.e. a tag that can appear
            inside translatable content, representing a placeholder that should be treated as
            part of the text and may need to be moved to a different location in the translation.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties.SegmentationHint">
            <summary>
            Indicates for how the placeholder should be treated during segmentation.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties.TextEquivalent">
            <summary>
            May contain the linguistic text equivalent for the tag, if one exists.
            </summary>
            <remarks>
            <para>
            If the tag should be treated linguistically similar to a piece of text, this property
            can be set to that text. If a tag has no linguistic text equivalent (e.g. if it can be a
            marker for a location or represent the start or end of formatting), this property
            should be <c>null</c> or an empty string.
            </para>
            <para>
            Note that text stored in this property is typically not the exact equivalent of the tag. (If it were,
            there would be no reason to use a tag in the first place.) However, from a linguistic processing point 
            of view this text can be used to determine grammatical properties of the tag that may affect 
            the surrounding text, e.g. gender, numericals and singular/plural form.
            </para>
            <para>This is <c>null</c> by default.</para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties.HasTextEquivalent">
            <summary>
            <c>True</c> if the <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties.TextEquivalent"/> property has been set to a value that is not
            <c>null</c> or an empty string.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPlaceholderTagProperties.IsBreakableWhiteSpace">
            <summary>
            Indicates whether the tag can be treated as one of the many Unicode characters that are 
            classified as breakable white space, i.e. all white space except NBSP (nonbreaking space) 
            and ZWNBSP (zero-width non-breaking space).
            </summary>
            <remarks>
            <para>This is <c>false</c> by default.</para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory">
            <summary>
            Interface implemented by factories for property objects.
            <para>All file type components should use this interface to create
            properties objects (unless they are created by calling <see cref="M:System.ICloneable.Clone"/>.</para>
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.FormattingItemFactory">
            <summary>
            The factory used to instantiate formatting items name/value pairs
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateTextProperties(System.String)">
            <summary>
            Creates properties for localizable text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreatePlaceholderTagProperties(System.String)">
            <summary>
            Creates properties for a standalone inline tag.
            </summary>
            <param name="tagContent">Tag content including delimiters</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateStructureTagProperties(System.String)">
            <summary>
            Creates properties for a tag representing structural information.
            </summary>
            <param name="tagContent">Tag content including delimiters</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateCustomInfoProperties">
            <summary>
            Creates properties used to communicate temporary information to other
            file type components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateStartTagProperties(System.String)">
            <summary>
            Creates properties for a start tag that may appear inside localizable content, and that has a corresponding end tag.
            </summary>
            <param name="tagContent">Tag content including delimiters</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateEndTagProperties(System.String)">
            <summary>
            Creates properties for an end tag (that matches a previously emitted start tag).
            </summary>
            <param name="tagContent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateSubSegmentProperties(System.Int32,System.Int32)">
            <summary>
            Create properties used to indicate where localizable content appears inside a tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateContextProperties">
            <summary>
            Creates properties that can hold prioritized context information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateContextInfo(System.String)">
            <summary>
            Creates a single piece of context information.
            </summary>
            <remarks>
            <para>
            If the context type is one of the values defined in 
            <c>Sdl.FileTypeSupport.Framework.Core.Utilities.NativeApi.StandardContextTypes</c> or
            <c>Sdl.FileTypeSupport.Framework.Core.Utilities.NativeApi.TMMatchContextTypes</c>, then the returned context
            will have the properties set to the default preferred values for that context type. 
            If a different value is used, the returned context will have empty values for all other context properties.
            </para></remarks>
            <param name="contextType">The type of the context to create. </param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateLockedContentProperties(Sdl.FileTypeSupport.Framework.NativeApi.LockTypeFlags)">
            <summary>
            Creates properties that indicates the lock type.
            </summary>
            <param name="lockType"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateStructureInfo(Sdl.FileTypeSupport.Framework.NativeApi.IContextInfo,System.Boolean,Sdl.FileTypeSupport.Framework.NativeApi.IStructureInfo)">
            <summary>
            Creates a document structure object that can be used to help define the
            outline of the document
            </summary>
            <param name="contextInfo">The context info in the document to which the 
            structural info relates.</param>
            <param name="mustUseDisplayName">True if the client should always
            show the DisplayName property. False if the client
            should attempt to display the matching text in the document. Note: setting
            this parameter to true also makes sure that the structure will appear in the tree; setting
            this parameter to false allows the client to decide whether it should be displayed.</param>
            <param name="parentStructure">The parent structure in the structural tree 
            (can be null if it has no parent)</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateStructureInfo">
            <summary>
            Creates an empty document structure object that can be used to help define the
            outline of the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateDependencyFileProperties(System.String)">
            <summary>
            Create a properties representing a dependency file.
            </summary>
            <param name="currentFilePath">The full path to the current location of
            the dependency file.</param>
            <returns>A dependency file properties object initialized with the
            current file path and default values for all other properties.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateCommentProperties">
            <summary>
            Creates a properties object for storing comments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateComment(System.String,System.String,Sdl.FileTypeSupport.Framework.NativeApi.Severity)">
            <summary>
            Creates a new comment with the specified properties.
            </summary>
            <param name="text">Textual content of the comment</param>
            <param name="author">Name of user or system that created the comment</param>
            <param name="severity">Severity level of the comment</param>
            <returns>
            A new comment that can be added to a <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.ICommentProperties"/> collection.
            The date of the comment has been set to <see cref="P:System.DateTime.Now"/>.
            </returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateRevisionProperties(Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType)">
            <summary>
            Creates a revision properties object, which represents information associated with a revision marker.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.IPropertiesFactory.CreateFeedbackProperties(Sdl.FileTypeSupport.Framework.BilingualApi.RevisionType)">
            <summary>
            Creates a feedback properties object, which represents information associated with user feedback.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IStartTagProperties">
            <summary>
            Information on an inline paired start tag.
            </summary>
            <remarks>
            <para>
            By default, start and end tag properties have <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsWordStop"/> set to <c>false</c>,
            as paired tags normally represent formatting or similar information, which should not affect the
            word boundaries in the text.
            </para>
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IStartTagProperties.SegmentationHint">
            <summary>
            Indicates how the tag pair should be treated during segmentation.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IStartTagProperties.Formatting">
            <summary>
            Semi-WYSIWYG formatting associated with this tag pair.
            </summary>
            <remarks>
            <para>
            This formatting is for display purposes in the editor only. It
            has no effect on the functionality of the tag pair in the underlying 
            native file format.
            </para>
            <para>
            If specified, this formatting will be overlaid with any other applicable formatting
            in order to determine the formatting used to display text that
            appears inside the tag pair.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IStructureInfo">
            <summary>
            Structural information to help define how a context should act in 
            a structural tree.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IStructureInfo.ContextInfo">
            <summary>
            The context to be used to help define the structure of the document
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IStructureInfo.MustUseDisplayName">
            <summary>
            True if the display name provided by the context is the one that must
            always be used when displaying the context in a structural tree, etc.
            This is usually the case if a context does not have any other text associated
            with it, for example, an image or a table. If this is false, the client
            application can try and display some more useful information to the
            user, for example, the corresponding text in a
            paragraph context.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IStructureInfo.ParentStructure">
            <summary>
            The structural info of which this context is a child
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.IStructureInfo.Id">
            <summary>
            A unique id for this structure info. This id is generated
            automatically by the implementation, and cannot be changed.
            </summary>
            <remarks>
            This id is ignored when comparing objects through 
            the Equals() implementation. 
            This is used to facilitate comparison of different instances with the
            same properties.
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.IStructureTagProperties">
            <summary>
            Information on a tag that represents structural content, or a tag
            that does not appear inside localizable content.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ISubSegmentProperties">
            <summary>
            Sub-segments are, for example, localizable tag attributes. During conversion to 
            bilingual format, every sub-segment will end up in its own paragraph unit.
            
            The properties StartOffset and Length are required in order to put the translations
            back into the right places.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ISubSegmentProperties.Length">
            <summary>
            Number of characters that the sub-segment spans
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ISubSegmentProperties.StartOffset">
            <summary>
            The index of the first character of the sub-segment in the text where it appears.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ISubSegmentProperties.Contexts">
            <summary>
            Context information for the sub-segment.
            </summary>
            <remarks>
            <para>
            Can be <c>null</c> if no explicit context information is associated with this sub-segment.
            </para>
            <para>
            During conversion from native to bilingual, any contexts in this collection get propagated
            to the paragraph unit that contains the actual localizable content of the sub-segment. If this
            property is <c>null</c>, a default "Tag content" context is created to let users know that they
            are looking at content that appears inside a tag.
            </para>
            <para>
            In addition, during conversion from native to bilingual a sub-segment reference context is 
            added to this collection in order to facilitate navigation from the sub-segment paragraph
            unit to the paragraph unit that contains the actual localizable content. All contexts added
            by the framework during native to bilingual conversion are removed during conversion 
            from bilingual back to native format.
            </para>
            </remarks>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.ITextProperties">
            <summary>
            Information on a piece of localizable text
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.ITextProperties.Text">
            <summary>
            Translatable text as Unicode string
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId">
            <summary>
            Unique identifier for a location in native or bilingual content; used
            to associated locations with messages in calls to <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractNativeContentHandler.LocationMark(Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)"/>
            and <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentStreamMessageReporter.ReportMessage(System.Object,System.String,Sdl.FileTypeSupport.Framework.NativeApi.ErrorLevel,System.String,Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId,Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId)"/>.
            </summary>
            <remarks>
            The default constructor generates a guaranteed unique identifier (a GUID).
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId.#ctor">
            <summary>
            A guaranteed unique id
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId.#ctor(System.String)">
            <summary>
            A specified id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId.ToString">
            <summary>
            The id as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId.Equals(System.Object)">
            <summary>
            <c>True</c> if the objects have the same id.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId.GetHashCode">
            <summary>
            Hash code based on the id
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId.Id">
            <summary>
            The actual marker id as a string
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.LocationMarkerId.Clone">
            <summary>
            Clones the id
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo">
            <summary>
            Information returned from <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileSniffer.Sniff(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter,Sdl.Core.Settings.ISettingsGroup)"/>.
            This class also allows you to store key/value pairs that the parser may need to read during parsing.
            </summary>
            <remarks>
            <para>
            Communicates whether the file is considered valid by the file sniffer; may contain
            additional information such as the detected source and target languages, encoding of the file, etc.
            </para>
            <para>
            Custom metadata can also be stored and accessed via the <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer"/> implementation.
            </para>
            <para>
            If the file type is supported and further processed, this information is 
            passed to all file processing components that implement <see cref="T:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware"/> as the
            <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.FileSnifferInfo"/> when the framework calls
            <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware.SetFileProperties(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.#ctor">
            <summary>
            Default constructor, creates an uninitialized object
            where <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported"/> is false and <see cref="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedEncoding"/> is null.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.#ctor(Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo)">
            <summary>
            Copy constructor used by the Clone() method.
            
            Performs a deep clone of the other object.
            </summary>
            <param name="other">Object to clone from</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Equals(System.Object)">
            <summary>
            True if all properties and values are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetHashCode">
            <summary>
            Computed by combining all properties and values
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported">
            <summary>
            The file sniffer sets this property to true in order to indicate
            that the corresponding file type definition can be used for processing this file.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedEncoding">
            <summary>
            If the file sniffer detects or guesses which encoding is used in the file,
            it may communicate this to the other parser components by setting this
            property.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedSourceLanguage">
            <summary>
            If the file sniffer detects or guesses the source language in the file, it
            can be communicated to the framework by setting this property.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedTargetLanguage">
            <summary>
            If the file sniffer detects or guesses the target language of a bilingual file,
            it can be communicated to the framework by setting this property.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SuggestedTargetEncoding">
            <summary>
            The file sniffer's suggestion on what type of encoding would be
            suitable when generating a translated version of this file.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Clone">
            <summary>
            Deep clone this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaData">
            <summary>
            Iterator for all metadata key/value pairs
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.HasMetaData">
            <summary>
            True if there are any key/value pairs of metadata in the sniff info
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataCount">
            <summary>
            Number of key/value pairs of metadata
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataContainsKey(System.String)">
            <summary>
            Determines if a metadata value exists for the specified key
            </summary>
            <param name="key">Must not be <c>null</c> or empty</param>
            <returns>True if a value exists for the key</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetMetaData(System.String)">
            <summary>
            Retrieves the metadata value for the specified key
            </summary>
            <param name="key">Must not be <c>null</c> or empty</param>
            <returns><c>Null</c> if no value exists for the key.</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SetMetaData(System.String,System.String)">
            <summary>
            Sets the metadata value for the specified key
            </summary>
            <remarks>
            <para>
            If no value exists for the key, one will be created.
            If a value already exists for the key, it will be overwritten.
            </para>
            </remarks>
            <param name="key">Must not be <c>null</c> or empty</param>
            <param name="value">Must not be <c>null</c></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.RemoveMetaData(System.String)">
            <summary>
            Removes the metadata value for the specified key from the 
            collection. If no value exists for this key, nothing will happen.
            </summary>
            <param name="key">Must not be <c>null</c></param>
            <returns><c>True</c> if a key/value pair was removed</returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.ClearMetaData">
            <summary>
            Removes all metadata key/value pairs.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Item(System.String)">
            <summary>
            <para>
            Convenience getter and setter for metadata using indexer syntax. 
            </para>
            <para>
            The getter functionality is equivalent to calling <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String,System.String)"/>,
            the setter functionality is equivalent to <see cref="M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData(System.String)"/>.
            </para>
            </summary>
            <param name="key">Must not be <c>null</c> or empty</param>
            <returns>The corresponding value, or <c>null</c> if none</returns>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.PersistenceId">
            <summary>
            The persistence ID associated with an object may be used
            by implementations during operations such as serialization 
            and de-serialization of the object model. 
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.NativeApi.TagId">
            <summary>
            Type-safe wrapper for a tag identifier string
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.TagId.#ctor(System.String)">
            <summary>
            Construct from a string
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.NativeApi.TagId.Id">
            <summary>
            The id as a string
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.TagId.ToString">
            <summary>
            The id as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.TagId.Equals(System.Object)">
            <summary>
            True if the ids are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.TagId.GetHashCode">
            <summary>
            The hash for the id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.TagId.op_Equality(Sdl.FileTypeSupport.Framework.NativeApi.TagId,Sdl.FileTypeSupport.Framework.NativeApi.TagId)">
            <summary>
            True if the ids are equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.NativeApi.TagId.op_Inequality(Sdl.FileTypeSupport.Framework.NativeApi.TagId,Sdl.FileTypeSupport.Framework.NativeApi.TagId)">
            <summary>
            True if ids are not equal
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.FileJanitor">
            <summary>
            Deletes the associated file when this object is finalized or disposed.
            </summary>
            <remarks>
            <para>
            Provides a convenient way to manage session-scope temporary files. Make sure that
            all objects needing access to the file holds a reference to the corresponding FileJanitor object.
            When the file janitor is garbage collected or disposed the file is deleted.
            </para>
            <para>
            The class also implements <c>IDisposable</c> interface. The
            file is deleted in the <c>Dispose()</c> implementation.
            </para>
            <para>
            If the file for some reason cannot be deleted no error is raised.
            </para>
            <para>
            Note that the .NET Framework does not guarantee that finalizers will be called,
            so there is always a possibility that the file does not get deleted.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileJanitor.#ctor(System.String)">
            <summary>
            Associates the janitor with the specified file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileJanitor.Finalize">
            <summary>
            Deletes the file, if possible.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.FileJanitor.FilePath">
            <summary>
            Full path to the file to be deleted.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.FileJanitor.DeleteDirectoryIfEmpty">
            <summary>
            If <c>true</c> a check will be made after the file
            has been deleted, and if no other files exist in the
            same directory that directory will also be deleted.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.FileJanitor.CancelDelete">
            <summary>
            If <c>true</c> then this Janitored file is not deleted when this instance is disposed.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.FileJanitor.Deleted">
            <summary>
            If <c>true</c> then this managed file was sucessfully deleted.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileJanitor.Dispose(System.Boolean)">
            <summary>
            Implementation of the recommended dispose protocol. Deletes the file if possible.
            </summary>
            <param name="disposing">true if this method is called from IDisposable.Dispose() and false if called from Finalizer</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileJanitor.DeleteFile">
            <summary>
            Delete the file, if possible. Also deletes the directory if it is empty and <see cref="P:Sdl.FileTypeSupport.Framework.FileJanitor.DeleteDirectoryIfEmpty"/> is true.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileJanitor.Dispose">
            <summary>
            Deletes the file, if it exists.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.FileTypeDefinitionId">
            <summary>
            Type safe wrapper around a file type file type definition ID.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileTypeDefinitionId.#ctor(System.String)">
            <summary>
            Create from a string ID.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.FileTypeDefinitionId.Id">
            <summary>
            The ID for this file type definition as a string.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileTypeDefinitionId.ToString">
            <summary>
            The ID as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileTypeDefinitionId.Equals(System.Object)">
            <summary>
            Returns <c>true</c> if the objects have the same ID value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileTypeDefinitionId.GetHashCode">
            <summary>
            Returns a hash code based on the ID value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileTypeDefinitionId.op_Equality(Sdl.FileTypeSupport.Framework.FileTypeDefinitionId,Sdl.FileTypeSupport.Framework.FileTypeDefinitionId)">
            <summary>
            Returns <c>true</c> if the two IDs have the same <see cref="P:Sdl.FileTypeSupport.Framework.FileTypeDefinitionId.Id"/> value.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileTypeDefinitionId.op_Inequality(Sdl.FileTypeSupport.Framework.FileTypeDefinitionId,Sdl.FileTypeSupport.Framework.FileTypeDefinitionId)">
            <summary>
            Returns <c>true</c> if the two IDs have different <see cref="P:Sdl.FileTypeSupport.Framework.FileTypeDefinitionId.Id"/> values.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.FileTypeSupportException">
            <summary>
            Base class for exceptions thrown by the file type support framework
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileTypeSupportException.#ctor">
            <summary>
            Default constructor, create an empty exception.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileTypeSupportException.#ctor(System.String)">
            <summary>
            Create an exception from a message string.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileTypeSupportException.#ctor(System.String,System.Exception)">
            <summary>
            Create an exception from a message and an inner exception.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.FileTypeSupportException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used during serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Pair`2">
            <summary>
            Two objects as one.
            Use this e.g. to store objects that belong together in a single collection.
            </summary>
            <typeparam name="FirstType"></typeparam>
            <typeparam name="SecondType"></typeparam>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Pair`2.First">
            <summary>
            The first of the two objects in the pair.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Pair`2.Second">
            <summary>
            The second of the two objects in the pair.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Pair`2.#ctor(`0,`1)">
            <summary>
            Contruct a new pair form the specifiec objects.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Pair`2.Equals(System.Object)">
            <summary>
            <c>true</c> if First and Second are equal for both objects.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Pair`2.GetHashCode">
            <summary>
            Returns a combiniation of the hash codes of First and Second.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.Pair`2.Clone">
            <summary>
            Clone the pair. If a type implements ICloneable it is deep cloned, otherwise a shallow clone is used.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.BackColorName">
            <summary>
              Looks up a localized string similar to Background Color.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.BoldName">
            <summary>
              Looks up a localized string similar to Bold.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.FalseName">
            <summary>
              Looks up a localized string similar to False.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.FontName">
            <summary>
              Looks up a localized string similar to Font.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.FontSizeName">
            <summary>
              Looks up a localized string similar to Font Size.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.InheritName">
            <summary>
              Looks up a localized string similar to Inherit.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.InvalidImageLocation">
            <summary>
              Looks up a localized string similar to {0} is not a valid image location. It should either be an embedded resource path or an absolute file path..
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.InvalidSuperSubName">
            <summary>
              Looks up a localized string similar to Invalid.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.ItalicName">
            <summary>
              Looks up a localized string similar to Italic.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.LeftToRightName">
            <summary>
              Looks up a localized string similar to Left-To-Right.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.NormalSuperSubName">
            <summary>
              Looks up a localized string similar to Normal.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.ResourceNotFound">
            <summary>
              Looks up a localized string similar to Resource &apos;{0}&apos; could not be found in assembly &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.RightToLeftName">
            <summary>
              Looks up a localized string similar to Right-To-Left.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.StrikethroughName">
            <summary>
              Looks up a localized string similar to Strikethrough.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.SubscriptName">
            <summary>
              Looks up a localized string similar to Subscript.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.SuperscriptName">
            <summary>
              Looks up a localized string similar to Superscript.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.TextColorName">
            <summary>
              Looks up a localized string similar to Text Color.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.TextDirectionName">
            <summary>
              Looks up a localized string similar to Text Direction.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.TextPositionName">
            <summary>
              Looks up a localized string similar to Text Position.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.TrueName">
            <summary>
              Looks up a localized string similar to True.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.UnderlineName">
            <summary>
              Looks up a localized string similar to Underline.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.Properties.Resources.UnknownFormatting">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.TempFileManager">
            <summary>
            Creates and manages a tempoary file ensuring that it is deleted when no longer required.
            </summary>
            <remarks>
            <para>The temp file's file system readonly flag can also be set using <see cref="P:Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly"/> and also 
            the file can be locked using <see cref="P:Sdl.FileTypeSupport.Framework.TempFileManager.Locked"/> to prevent it being deleted by
            the user or any disk space management software.
            </para>
            <para>This class uses the <see cref="T:Sdl.FileTypeSupport.Framework.FileJanitor"/> class so it
            provides a convenient way to create and manage session-scope temporary files. Make sure that
            all objects needing access to the temp file have access to a corresponding TempFileManager object, 
            that way when it is no longer referenced by any live objects and it gets garbage collected
            the temporary file is deleted.
            </para>
            <para>
            The class also implements the <c>IDisposable</c> interface, and deletes the
            FileJanitor managed file in the <c>Dispose()</c> implementation.
            </para>
            <para>
            If the file for some reason cannot be deleted no error is raised.
            </para>
            <para>
            Note that the .NET Framework does not guarantee that finalizers will be called,
            so there is always a possibility that the file does not get deleted.
            </para>
            <para>
            The TempFileManager class also has a static method AutoDeleteNonLockedFiles() that can be called
            during applicaiton startup to delete any temp files that may not have been deleted previously.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.TempFileManager.#ctor">
            <summary>
            Creates a temp file with a random name and manages it.
            See <see cref="M:Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String,System.Boolean)"/> for more details.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String)">
            <summary>
            Creates the named temp file in a random temp directory or named sub-directory and manages it.
            See <see cref="M:Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String,System.Boolean)"/> for more details.
            </summary>
            <param name="filePath">A temp filename to create or empty for a random filename to be generated.</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a temp file and manages it.
            </summary>
            <remarks>
            <para>If an empty file name is given then a random temp file is created.
            If only a file name is given then a temp folder is created and a file with the file name is created.
            If a full or partial path is given the then a temp folder with the last folder name in the path is created
            and a file with the file name is created within it.
            </para>
            </remarks>
            <param name="filePath">A temp filename to create or empty for a random filename to be generated.</param>
            <param name="lockFile">If set to <c>true</c> the file is created in this constructor and locked with a read write stream
            available through <see cref="P:Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream"/>.
            </param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.TempFileManager.Finalize">
            <summary>
            Deletes the file, if possible.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.TempFileManager.FilePath">
            <summary>
            Full path to the file to be deleted.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.TempFileManager.DeleteDirectoryIfEmpty">
            <summary>
            If <c>true</c> a check will be made after the file
            has been deleted, and if no other files exist in the
            same directory that directory will also be deleted.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.TempFileManager.Locked">
            <summary>
            Set to create (if it does not exist) and then to lock the temp file.
            The locked <see cref="T:System.IO.FileStream"/> is available from <see cref="P:Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream"/>.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly">
            <summary>
            If set to <c>true</c> the managed temp file's readonly file system flag is set.
            </summary>
            <remarks>
            The file must exist or be subsequently locked by setting <see cref="P:Sdl.FileTypeSupport.Framework.TempFileManager.Locked"/> for this property to have any effect.
            </remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream">
            <summary>
            Returns the locked <see cref="T:System.IO.FileStream"/> instace if the temp file was previously locked by setting
            <see cref="P:Sdl.FileTypeSupport.Framework.TempFileManager.Locked"/>.
            </summary>
            <remarks>The <see cref="T:System.IO.FileStream"/> is opened for read/write access and share read access.</remarks>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.TempFileManager.FileProcess">
            <summary>
            Can be set to a running process' <see cref="T:System.Diagnostics.Process"/> instance so that the managed temp file is
            deleted when the process exits.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.TempFileManager.CancelDelete">
            <summary>
            If <c>true</c> then this managed file is not deleted when this instance is disposed.
            </summary>
        </member>
        <member name="P:Sdl.FileTypeSupport.Framework.TempFileManager.Deleted">
            <summary>
            If <c>true</c> then this managed file was sucessfully deleted.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.TempFileManager.Dispose(System.Boolean)">
            <summary>
            Implementation of the recommended dispose protocol. Deletes the file if possible.
            </summary>
            <param name="disposing">true if this method is called from IDisposable.Dispose() and false if called from Finalizer</param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.TempFileManager.TakeOverManagedFile(Sdl.FileTypeSupport.Framework.TempFileManager@,Sdl.FileTypeSupport.Framework.TempFileManager)">
            <summary>
            This method handles the logic of handing over the management 
            of a TempFileManager managed file to a new managed file
            </summary>
            <param name="managedFile"></param>
            <param name="value"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.TempFileManager.AutoDeleteNonLockedFiles">
            <summary>
            Deletes all <see cref="T:Sdl.FileTypeSupport.Framework.TempFileManager"/> managed tempoary files and tempoary folders that could not be deleted previously.
            </summary>
            <remarks>
            <para>This public static method is designed to be called when the using applicatin starts up so that
            all tempoary files that have been created by a previous invocation of the applicaion that could
            not be automatically delted can be deleted when the using application restarts.
            </para>
            <para>This also employs a locking mechanism so that if two instances of the application are launched
            only the first instance will delete temp files that were left from a previous instance of the applicaiton.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.TempFileManager.Dispose">
            <summary>
            Deletes the file, if it exists.
            </summary>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.UserCancelledException">
            <summary>
            Exception thrown to indicate that the user has explicitly requested
            an operation to be aborted.
            </summary>
            <remarks>
            <para>
            Applications can use this exception to handle user interaction in event handlers 
            and other delegates. If the user cancels the operation during a callback the application
            can throw this exception from the callback and handle it separate from other exception
            types in the top-level originating call.
            </para>
            <para>
            This exception is explicitly NOT derived from <see cref="T:Sdl.FileTypeSupport.Framework.FileTypeSupportException"/>, 
            so that it does not get caught in regular exception handlers for file type support exceptions.
            </para>
            </remarks>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.UserCancelledException.#ctor">
            <summary>
            Cancel without message.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.UserCancelledException.#ctor(System.String)">
            <summary>
            Cancel with a message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.UserCancelledException.#ctor(System.String,System.Exception)">
            <summary>
            Cancel with a message and a related exception.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.UserCancelledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for de-serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Sdl.FileTypeSupport.Framework.VersionInfo">
            <summary>
            Represents the version information for the FileTypeSupport Framework. This class cannot
            be inherited.
            </summary>
        </member>
        <member name="M:Sdl.FileTypeSupport.Framework.VersionInfo.GetFrameworkVersion">
            <summary>
            Returns the current assembly version of the FileTypeSupport Framework API.
            </summary>
            <returns>The current version of the API.</returns>
        </member>
    </members>
</doc>
