<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sdl.LanguagePlatform.Core</name>
    </assembly>
    <members>
        <member name="T:Sdl.LanguagePlatform.Core.CharacterProperties">
            <summary>
            Proides methods that check for certain properties of strings and characters.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.GetUnicodeBlock(System.Char)">
            <summary>
            Attempts to identify the <see cref="T:Sdl.LanguagePlatform.Core.UnicodeBlock"/> for the provided character.
            </summary>
            <param name="c">A character to get the <see cref="T:Sdl.LanguagePlatform.Core.UnicodeBlock"/> for.</param>
            <returns>The <see cref="T:Sdl.LanguagePlatform.Core.UnicodeBlock"/> for <paramref name="c"/>, or <see cref="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Unknown"/> if the block
            cannot be determined.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsInBlock(System.Char,Sdl.LanguagePlatform.Core.UnicodeBlock)">
            <summary>
            Tests whether <paramref name="c"/> is contained in the <see cref="T:Sdl.LanguagePlatform.Core.UnicodeBlock"/> <paramref name="b"/>.
            </summary>
            <param name="c">A character</param>
            <param name="b">A <see cref="T:Sdl.LanguagePlatform.Core.UnicodeBlock"/></param>
            <returns><c>true</c> if <paramref name="c"/> is contained in <paramref name="b"/>, 
            and <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.WhitespaceCharacters">
            <summary>
            Contains a set of known whitespace characters from different languages. This should
            be equivalent to the set of characters for which <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> returns
            <c>true</c>, which however is incomplete in earlier .Net versions.
            <para>The elements of the array are sorted in ascending order, so binary search
            can be used.</para>
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.Blanks">
            <summary>
            Contains a set of known blank characters of various widths from different languages. This
            should be a subset of <see cref="F:Sdl.LanguagePlatform.Core.CharacterProperties.WhitespaceCharacters"/>.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties._BaseChars">
            <summary>
            A dictionary for ToBase mapping
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.ApostropheCharacters">
            <summary>
            Contains a set of known apostrophe characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.ColonCharacters">
            <summary>
            Contains a set of known colon characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.CommaCharacters">
            <summary>
            Contains a set of known comma characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.DotCharacters">
            <summary>
            Contains a set of known dot characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.ExclamationCharacters">
            <summary>
            Contains a set of known exclamation mark characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.HyphenCharacters">
            <summary>
            Contains a set of known hyphen characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.DashCharacters">
            <summary>
            Contains a set of known dash characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.QuestionMarkCharacters">
            <summary>
            Contains a set of known question mark characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.SemicolonCharacters">
            <summary>
            Contains a set of known semicolon characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.BraceCharacters">
            <summary>
            Contains a set of known brace characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.ParagraphSeparatorCharacters">
            <summary>
            Contains a set of known paragraph separator characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.OpeningBracketCharacters">
            <summary>
            Contains a set of known opening bracket characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.ClosingBracketCharacters">
            <summary>
            Contains a set of known closing bracket characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.OpeningParenthesisCharacters">
            <summary>
            Contains a set of known open paranthesis characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.ClosingParenthesisCharacters">
            <summary>
            Contains a set of known closing paranthesis characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.QuoteCharacters">
            <summary>
            Contains a set of known quote characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.PercentCharacters">
            <summary>
            Contains a set of known percent characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.SingleQuoteCharacters">
            <summary>
            Contains a set of known single quote characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.OpeningQuoteCharacters">
            <summary>
            Contains a set of known opening quote characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.ClosingQuoteCharacters">
            <summary>
            Contains a set of known closing quote characters from different languages.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.WesternVowelCharacters">
            <summary>
            Contains a set of Western vowels.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.FarEastVowelCharacters">
            <summary>
            Contains a set of Far East vowels.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.SpecialSurrounderCharacters">
            <summary>
            Contains a list of known special surrounder characters.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsAll(System.String,System.Predicate{System.Char})">
            <summary>
            Evaluates the predicate on all characters in the string and returns true if all characters
            fulfill the predicate, and false otherwise. Note that the method will always return <c>true</c> 
            for the empty string.
            </summary>
            <returns>true if all characters fulfill the predicate or <paramref name="s"/> is the 
            empty string, and false otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsAll(System.String,System.Int32,System.Predicate{System.Char})">
            <summary>
            Evaluates the predicate on all characters in the string, starting from position <paramref name="start"/>, 
            and returns true if all characters
            fulfill the predicate, and false otherwise. Note that the method will always return <c>true</c> 
            for the empty string or if the start position exceeds the string length.
            </summary>
            <returns>true if all characters fulfill the predicate, or <paramref name="s"/> is the 
            empty string, or <paramref name="start"/> exceeds the string length, and false otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.GetPrefixLength(System.String,System.Predicate{System.Char})">
            <summary>
            Computes and returns the length of the prefix of the provided string <paramref name="s"/> where each 
            character satisfies the provided predicate. 
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsApostrophe(System.Char)">
            <summary>
            Determines whether the specified character is an apostrophe.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is an apostrophe, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsColon(System.Char)">
            <summary>
            Determines whether the specified character is a colon.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a colon, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsComma(System.Char)">
            <summary>
            Determines whether the specified character is a comma.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a comma, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsDot(System.Char)">
            <summary>
            Determines whether the specified character is a dor.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a dot, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsExclamation(System.Char)">
            <summary>
            Determines whether the specified character is an exclamation mark.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is an exclamation mark, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsHyphen(System.Char)">
            <summary>
            Determines whether the specified character is a hyphen.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a hyphen, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsDash(System.Char)">
            <summary>
            Determines whether the specified character is a dash.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a dash, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsQuestion(System.Char)">
            <summary>
            Determines whether the specified character is a question mark.
            </summary>
            <param name="c">The characters.</param>
            <returns>true if c is a question mark, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsSemicolon(System.Char)">
            <summary>
            Determines whether the specified character is a semicolon.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a semicolon, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsBrace(System.Char)">
            <summary>
            Determines whether the specified character is a brace.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a brace, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsTabulator(System.Char)">
            <summary>
            Determines whether the specified character is a tabulator.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a tabulator, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsParagraph(System.Char)">
            <summary>
            Determines whether the specified character is a paragraph separator.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a paragraph separator, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsOpeningBracket(System.Char)">
            <summary>
            Determines whether the specified character is an opening bracket.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is an opening bracket, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsClosingBracket(System.Char)">
            <summary>
            Determines whether the specified character is a closing bracket.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a closing bracket, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsBracket(System.Char)">
            <summary>
            Determines whether the specified character is an opening or a closing bracket.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is an opening or a closing bracket, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsParenthesis(System.Char)">
            <summary>
            Determines whether the specified character is an opening or a closing paranthesis.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is an opening or a closing , otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsOpeningParenthesis(System.Char)">
            <summary>
            Determines whether the specified character is an opening paranthesis.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is an openint paranthesis, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsClosingParenthesis(System.Char)">
            <summary>
            Determines whether the specified character is a closing paranthesis.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a closing paranthesis, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsQuote(System.Char)">
            <summary>
            Determines whether the specified character is a quote.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a quote, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsPercent(System.Char)">
            <summary>
            Determines whether the specified character is a percent character.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a percent character, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsSingleQuote(System.Char)">
            <summary>
            Determines whether the specified character is a single quote.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a single quote, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsDoubleQuote(System.Char)">
            <summary>
            Determines whether the specified character is a double quote.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a double quote, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsOpeningQuote(System.Char)">
            <summary>
            Determines whether the specified character is an opening quote.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is an opening quote, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsClosingQuote(System.Char)">
            <summary>
            Determines whether the specified character is a closing quote.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a closing quote, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsSurrounder(System.Char)">
            <summary>
            Determines whether the specified character is any of the known surrounder characters, 
            such as bracket, paranthesis, quote, apostrophe or a special surrounder.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a any of the surrounder characters, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsStop(System.Char)">
            <summary>
            Determines whether the specified character is a stop character such as colon, dot, exclamation mark, question mark or semicolon.
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a stop character, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsVowel(System.Char)">
            <summary>
            Determines whether the specified character is a vowel (Western or Far East).
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a vowel, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsSequenceOf(System.String,System.Globalization.UnicodeCategory)">
            <summary>
            Determines whether the specified string is a sequence of characters of the specified unicode category <paramref name="c"/>.
            </summary>
            <param name="s">The string.</param>
            <param name="c">The Unicode category.</param>
            <returns>true if all the characters in <paramref name="s"/> have the Unicode category <paramref name="c"/> or <paramref name="s"/> is the empty string, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.ToBase(System.String)">
            <summary>
            Returns a new string with the same textual value as the input string, but whose binary representation 
            is normalized using full canonical decomposition ignoring any characters that belong to the following 
            Unicode categories: Format, ModifierLetter, NonSpacingMark, OtherNotAssigned, ParagraphSeparator, 
            PrivateUse, SpaceSeparator, SpacingCombiningMark.
            </summary>
            <param name="s">The input string.</param>
            <returns>The normalized string.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.ToCase(System.String,Sdl.LanguagePlatform.Core.CharacterProperties.Case)">
            <summary>
            Applies the specified casing to the provided string.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.ToCase(System.Char,Sdl.LanguagePlatform.Core.CharacterProperties.Case)">
            <summary>
            Applies the specified casing to the provided character.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsWhitespace(System.Char)">
            <summary>
            Determines whether the specified character is a whitespace.
            <para>This test does not cover format characters.</para>
            <remarks>This method is no longer required since <see cref="M:System.Char.IsWhiteSpace(char)"/> has
            been fixed in .Net 3.5 to return the correct information.</remarks>
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a whitespace, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsUpperOrLower(System.Char)">
            <summary>
            Returns true if <paramref name="c"/> is upper or lower case, and false otherwise.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsBlank(System.Char)">
            <summary>
            Determines whether the specified character is a blank.
            <para>This test does not cover format characters.</para>
            </summary>
            <param name="c">The character.</param>
            <returns>true if c is a blank, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.GetCase(System.Char)">
            <summary>
            Determines the case of a character. Only upper and lower case characters are
            distinguished, in all other cases or for non-letter characters, <see cref="F:Sdl.LanguagePlatform.Core.CharacterProperties.Case.Other"/>
            is returned.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.GetCase(System.String)">
            <summary>
            Determines the case of the string, if it is consistent. 
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.GetCase(System.String,System.Int32)">
            <summary>
            Determines the case of the string, if it is consistent. The string is only scanned
            up to the specified length.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.ToBase(System.Char)">
            <summary>
            Returns a new character which is the normalized version of the input character, using full canonical decomposition.
            </summary>
            <param name="c">The input character.</param>
            <returns>The normalized character.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsCJKChar(System.Char)">
            <summary>
            Tests whether <paramref name="c"/> is a CJK (Chinese/Japanese/Korean) character
            </summary>
            <returns>true if <paramref name="c"/> is a CJK (Chinese/Japanese/Korean) character, false otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsCJKPunctuation(System.Char)">
            <summary>
            Tests whether the provided character <paramref name="c"/> is a CJK (Chinese/Japanese/Korean) punctuation characater.
            </summary>
            <returns>true if <paramref name="c"/> is a CJK (Chinese/Japanese/Korean) punctuation, and
            false otherwise</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.GetUnicodeCategoryFromName(System.String)">
            <summary>
            Maps Unicode category names as they are used in <see cref="T:Sdl.LanguagePlatform.Core.CharacterSet"/>s to 
            the corresponding <see cref="T:System.Globalization.UnicodeCategory"/>. The lookup
            is case-insensitive.
            </summary>
            <param name="className">The category name</param>
            <returns>The corresponding <see cref="T:System.Globalization.UnicodeCategory"/>, or
            <c>null</c> if the class name is not known.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterProperties.GetUnicodeCategoryName(System.Globalization.UnicodeCategory)">
            <summary>
            Maps from <see cref="T:System.Globalization.UnicodeCategory"/> to class names
            as they are used in <see cref="T:Sdl.LanguagePlatform.Core.CharacterSet"/>s. 
            </summary>
            <param name="cat">The Unicode category</param>
            <returns>A category name, to be used in character sets.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.CharacterProperties.UppercaseCharacters">
            <summary>
            Gets a collection of all characters in the range [U+0020, U+00FB] for which 
            <see cref="M:System.Char.IsUpper(System.Char)"/> is <c>true</c>.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.CharacterProperties.Case">
            <summary>
            Enumerates case variants of strings and letters. 
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.Case.Upper">
            <summary>
            Indicates an upper-case letter or letter sequence.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.Case.Lower">
            <summary>
            Indicates a lower-case letter or letter sequence.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.Case.InitialUpper">
            <summary>
            (For strings only) indicates that the first letter is upper-case, and the 
            subsequent letters are lower-case.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CharacterProperties.Case.Other">
            <summary>
            Indicates an undefined, unknown, mixed, or other letter or character sequence.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.CharacterSet">
            <summary>
            Represents a collection of characters. 
            <remarks>This class is internal and not intended to be used directly
            in your code.</remarks>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterSet.#ctor">
            <summary>
            Instantiates a new, empty character set.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterSet.Contains(System.Char)">
            <summary>
            Tests whether the character <paramref name="c"/> is contained in this character set.
            </summary>
            <param name="c">The character</param>
            <returns><c>true</c> if <paramref name="c"/> is contained in the set, and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterSet.Add(System.Char)">
            <summary>
            Adds <paramref name="c"/> to this set.
            </summary>
            <param name="c">The character to add.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterSet.Add(System.Char,System.Char)">
            <summary>
            Adds a range of characters to this set.
            </summary>
            <param name="lower">The lower bound of the range</param>
            <param name="upper">The upper bound of the range (inclusive)</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterSet.Add(System.Globalization.UnicodeCategory)">
            <summary>
            Adds the specified <see cref="T:System.Globalization.UnicodeCategory"/> to the set.
            </summary>
            <param name="category">The category to add.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterSet.Add(Sdl.LanguagePlatform.Core.CharacterSet)">
            <summary>
            Adds the members of the <paramref name="other"/> character set to this set. 
            <remarks>
            The <see cref="P:Sdl.LanguagePlatform.Core.CharacterSet.Negated"/> flags of both sets are ignored, which may effectively inverse
            membership semantics. It is advised to test the negated flags before.
            </remarks>
            </summary>
            <param name="other">The character set to add to this set</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CharacterSet.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.CharacterSet.Negated">
            <summary>
            Gets or sets whether this character set is inversed (negated) or not. 
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.CultureInfoExtensions">
            <summary>
            Utilities related to <see cref="T:System.Globalization.CultureInfo"/> objects.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.EnumSystemLanguageGroups(Sdl.LanguagePlatform.Core.CultureInfoExtensions.EnumLanguageGroupProc,Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupInstallationStatus,System.IntPtr)">
            <summary>
            .Net wrapper around EnumSystemLanguageGroups() (see Platform SDK)
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.EnumLanguageGroupLocales(Sdl.LanguagePlatform.Core.CultureInfoExtensions.EnumLanguageGroupLocalesProc,Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID,System.Int32,System.IntPtr)">
            <summary>
            .Net wrapper around EnumLanguageGroupLocales() (see Platform SDK)
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions._LocaleToGroupMapping">
            <summary>
            Mapping from LCIDs to language group identifiers
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions._LegacyLanguageMapping">
            <summary>
            Mapping from legacy culture names to CultureInfo objects
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions._LegacyLanguageCodes">
            <summary>
            Mapping from legacy language codes to .Net language codes
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions._RegionQualifiedCultureMapping">
            <summary>
            A cache for mapping region-neutral cultures ("en") to their default region-qualified 
            version ("en-us", or whatever the default for "en" may be). Not using a cache
            has significant performance impact when importing SDLX TMs where the target languages 
            are never region-qualified. 
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32)">
            <summary>
            Returns the culture which corresponds to the specified LCID. If the LCID is unknown or
            invalid, an exception is thrown. Note that this will also be the case for custom cultures,
            which seem to always get the same LCID (4096).
            </summary>
            <param name="lcid">The locale identifier (lcid)</param>
            <returns>A CultureInfo object, or throws for unknown LCIDs.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)">
            <summary>
            Assumes the passed culture code is a legacy code and returns the mapped
            equivalent. null is returned if no mapping exists (which means that the
            code is not a legacy code or no mapping is required or yet specified).
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32,System.Boolean)">
            <summary>
            Returns the culture which corresponds to the specified locale, which may be a legacy LCID 
            used internally by SDLX or Trados Translator's Workbench.
            </summary>
            <param name="lcid">The locale identifier (lcid)</param>
            <param name="returnNullForUnknowns">If true, null is returned for unknown languages. Otherwise, an exception
            is thrown. This will also be the case if the lcid represets a custom culture (in most cases, 
            the lcid will be 4096 in this case).</param>
            <returns>A <see cref="T:System.Globalization.CultureInfo"/> object, or null if <paramref name="returnNullForUnknowns"/> is true.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String)">
            <summary>
            Similar to <see cref="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)"/>, but 
            covers culture names (&lt;language-code&gt;-&lt;region-code&gt;) which are used
            by SDLX and Trados Translator's Workbench, but have a different code in .Net. 
            <para>Use this method to transparently map language codes (current and legacy ones)
            to cultures, for example when processing TTX, ITD, or TMX.</para>
            </summary>
            <param name="name">The culture code</param>
            <returns>A CultureInfo object, using appropriate fallbacks for backwards compatibility. Throws
            an exeption if neither the fallback heuristics nor .Net can resolve the culture name.
            </returns>
            <remarks>To avoid an exception to be thrown, and to get <c>null</c> for unknown 
            culture codes, use <see cref="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String,System.Boolean)"/>.</remarks>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String,System.Boolean)">
            <summary>
            Similar to <see cref="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)"/>, but 
            covers culture names (&lt;language-code&gt;-&lt;region-code&gt;) which are used
            by SDLX and Trados Translator's Workbench, but have a different code in .Net. 
            <para>Use this method to transparently map language codes (current and legacy ones)
            to cultures, for example when processing TTX, ITD, or TMX.</para>
            </summary>
            <param name="name">The culture code</param>
            <param name="returnNullForUnknowns">If true, null is returned for unknown culture codes. If false, an exception is thrown if
            the culture code cannot be resolved.</param>
            <returns>A CultureInfo object, using appropriate fallbacks for backwards compatibility, or 
            null if the culture code cannot be resolved and <paramref name="returnNullForUnknowns"/> is <c>true</c>.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage(System.Globalization.CultureInfo)">
            <summary>
            Determines whether the specified culture info is any of the romance languages: French, Spanish, Portuguese, 
            Italian, Romanian, Galician or Catalan.
            </summary>
            <param name="culture">The culture info.</param>
            <returns>true if culture is any of the romance languages, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator(System.Globalization.CultureInfo)">
            <summary>
            Determines whether the specified culture uses blanks as word separators. This is 
            true for all cultures except those based on Japanese, Thai, or Chinese.
            </summary>
            <param name="culture">The culture to test.</param>
            <returns>true iff the language associated with the culture uses blanks as word separators.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator(System.Globalization.CultureInfo)">
            <summary>
            Determines whether the specified culture uses blanks as sentence separators. This is 
            currently only true for Thai.
            </summary>
            <param name="culture">The culture to test.</param>
            <returns>true iff the language associated with the culture uses blanks as sentence separators.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.Globalization.CultureInfo)">
            <summary>
            Heuristically computes and returns the region-specified ("default") culture for a given
            language. If the input culture is not neutral (i.e. it is region-specific), it is returned. 
            Otherwise the method will find the region-qualified culture which most likely represents 
            the culture's default/major region.
            </summary>
            <param name="culture">The input culture</param>
            <returns>The input parameter, if it's a region-qualified/non-neutral culture, or the default region-qualified culture otheriwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.String)">
            <summary>
            Heuristically computes and returns the region-specified ("default") culture code for a given
            language code. If the input culture is not neutral or does not have a region-qualified 
            equivalent, null is returned.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture(System.Globalization.CultureInfo)">
            <summary>
            Computes and returns the region-neutral parent culture of the input culture. If the input
            culture is already neutral, it is returned. Otherwise, the parent culture hierarchy is 
            traversed until a region-neutral culture is found.
            </summary>
            <param name="culture">The input culture</param>
            <returns>The region-neutral parent culture of the input culture</returns>
            <remarks>A region-neutral culture is not necessarily one "without dashes". For example,
            the region-neutral parent culture of <c>zh-CN</c> (Chinese, PRC) is <c>zh-CHS</c> or <c>zh-Hans</c> (Simplified
            Chinese). The exact result may depend on the operating system version and the .Net version.</remarks>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Checks whether two cultures (languages) are compatible. Two cultures are 
            compatible if they denote the same language which means they have to be identical or 
            their closest region-neutral parents are identical.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics(System.Globalization.CultureInfo)">
            <summary>
            Determines whether the specified culture uses clitics (English and the romance languages).
            </summary>
            <param name="culture">The culture.</param>
            <returns>true if culture contains clitics, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID(System.Globalization.CultureInfo)">
            <summary>
            Returns the <see cref="T:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID">LanguageGroupID</see> associated with the specified culture.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName(System.Globalization.CultureInfo)">
            <summary>
            Returns the name of the language group for the specified culture as a string.
            </summary>
            <param name="culture">The culture (may not be null)</param>
            <returns>The name of the language group the culture belongs to, or <c>null</c> if
            the group is unknown.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics(System.Globalization.CultureInfo)">
            <summary>
            Returns a case-sensitive string hash set containing the leading separable clitics for the provided
            culture, or <c>null</c> if none are defined.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics(System.Globalization.CultureInfo)">
            <summary>
            Returns a case-sensitive string hash set containing the trailing separable clitics for the provided
            culture, or <c>null</c> if none are defined.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits(System.Globalization.CultureInfo)">
            <summary>
            Determines whether the specified culture uses the standard default digits.
            </summary>
            <param name="culture">The culture, which must not be null or a neutral culture</param>
            <returns><c>true</c> if the culture uses the default digits (0-9), and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping(System.Globalization.CultureInfo)">
            <summary>
            Determines whether the provided culture uses standard three-digit grouping for number
            formatting. 
            </summary>
            <param name="culture">The culture, which must not be null or a neutral culture</param>
            <returns>true if the culture uses standard three-digit grouping, and false otherwise</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth(System.Globalization.CultureInfo)">
            <summary>
            returns true for CJK cultures
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping">
            <summary>
            Gets a mapping from legacy language codes to .Net language codes. The mapping maps from
            legacy language codes as they are used by SDLX and Trados Translator's Workbench and
            related applications to the closest language code used by .Net. 
            <para>This is an internal data structure which should not be directly used and 
            not be modified. To look up a legacy code,
            use <see cref="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)"/>.</para>
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupInstallationStatus">
            <summary>
            The installation status of the language group information as defined in 
            the Platform SDK, WinNls.h
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupInstallationStatus.Installed">
            <summary>
            Indicates that the language group is installed
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupInstallationStatus.Supported">
            <summary>
            Indicates that the language group is installed
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID">
            <summary>
            Language Group IDs, as defined in the Platform SDK, WinNls.h. Added LGRPID_UNKNOWN.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Unknown">
            <summary>
            Unknown group
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.WesternEurope">
            <summary>
            Western Europe &amp; U.S.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.CentralEurope">
            <summary>
            Central Europe
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Baltic">
            <summary>
            Baltic
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Greek">
            <summary>
            Greek
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Cyrillic">
            <summary>
            Cyrillic
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Turkish">
            <summary>
            Turkish 
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Japanese">
            <summary>
            Japanese
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Korean">
            <summary>
            Korean
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.TraditionalChinese">
            <summary>
            Traditional Chinese
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.SimplifiedChinese">
            <summary>
            Simplified Chinese
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Thai">
            <summary>
            Thai
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Hebrew">
            <summary>
            Hebrew
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Arabic">
            <summary>
            Arabic
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Vietnamese">
            <summary>
            Vietnamese
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Indic">
            <summary>
            Indic
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Georgian">
            <summary>
            Georgian
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.Armenian">
            <summary>
            Armenian
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.CultureInfoExtensions.EnumLanguageGroupProc">
            <summary>
            See EnumLanguageGroupProc in the Platform SDK doc
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.CultureInfoExtensions.EnumLanguageGroupLocalesProc">
            <summary>
            See EnumLanguageGroupLocalesProc in the Platform SDK doc
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.CultureString">
            <summary>
            A string which carries culture information.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureString.#ctor">
            <summary>
            Initializes a new instance with empty text and the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureString.#ctor(System.Globalization.CultureInfo,System.String)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="culture">The culture to assign to the text</param>
            <param name="text">The text</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureString.#ctor(Sdl.LanguagePlatform.Core.CultureString)">
            <summary>
            Initializes a new instance with the values of another instance, 
            creating a duplicate of <paramref name="other"/>.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.CultureString.Clone">
            <summary>
            <see cref="M:ICloneable.Clone()"/>
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.CultureString.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.CultureString.CultureName">
            <summary>
            Gets or sets the culture name. When setting the culture name, it must be resolvable
            through <see cref="M:Core.CultureInfoExtensions.GetCultureInfo(string)"/>, or be
            the null or empty string, in which the InvariantCulture will be assigned.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.CultureString.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.DateTimeUtilities">
            <summary>
            Utilities for date and time manipulation.
            <para>
            This class is intended for internal use and should not be used directly in third-party appliations.
            </para>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.DateTimeUtilities.Normalize(System.DateTime)">
            <summary>
            Normalizes the date to UTC, unless <paramref name="dt"/>'s date is already specified in UTC.
            </summary>
            <param name="dt">The date to normalize</param>
            <returns>The UTC-normalized date, or the identical value if the date is already in UTC.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.DateTimeUtilities.TryParseWithFallback(System.String,System.DateTime@)">
            <summary>
            Attempts to parse the specified string into a <see cref="T:System.DateTime"/> object. First, 
            System.DateTime.TryParse is used to attempt a parse in the universal format. 
            If that fails, a parse is attempted using the current local date/time format.
            </summary>
            <param name="s">The input string</param>
            <param name="result">If the method returns <c>true</c>, holds the <see cref="T:System.DateTime"/> value
            of the successful parse, adjusted to Universal time. If the method returns <c>false</c>, the
            value is undefined and should not be used.</param>
            <returns><c>true</c> if a parse was successful, and <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceResolution">
            <summary>
            Enumerates the types of resolving edit distance differences.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceResolution.None">
            <summary>
            The edit distance cannot be resolved.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceResolution.Substitution">
            <summary>
            The token is automatically substituted by copying over from the related document token to the location determined by the memory TU.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceResolution.Deletion">
            <summary>
            The change can be resolved by deleting the token - this is only used if the document source doesn't contain any tags but the memory TU does.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceResolution.Move">
            <summary>
            The change is resolved by moving an item to another location.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceResolution.Other">
            <summary>
            The change cannot be resolved but the difference should still not be reflected in the score.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.EditDistance.EditDistance">
            <summary>
            Represents the result of an edit distance computation. 
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.#ctor">
            <summary>
            Initializes a new instance with default values.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance with the specified parameters.
            </summary>
            <param name="sourceObjectCount">The number of source objects (needed for scoring).</param>
            <param name="targetObjectCount">The number of target objects (needed for scoring).</param>
            <param name="distance">The score representing the edit distance between the 
            source and the target objects.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.SetSourceAt(System.Int32,System.Int32)">
            <summary>
            Sets the source offset for the edit operation at the specific index. This
            is necessary if indices have been changed in the underlying sequence.
            </summary>
            <param name="index">The edit operation index.</param>
            <param name="offset">The offsetin the source sequence.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.SetTargetAt(System.Int32,System.Int32)">
            <summary>
            Sets the target offset for the edit operation at the specific index. This
            is necessary if indices have been changed in the underlying sequence.
            </summary>
            <param name="index">The edit operation index.</param>
            <param name="offset">The offsetin the target sequence.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.SetResolutionAt(System.Int32,Sdl.LanguagePlatform.Core.EditDistance.EditDistanceResolution)">
            <summary>
            Sets the edit distance resolution for the edit distance item at the 
            specified index.
            </summary>
            <param name="index">The edit operation index.</param>
            <param name="resolution">The edit distance resolution.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.FindSourceItemIndex(System.Int32)">
            <summary>
            Retrieves the edit operation index for a specified source sequence offset.
            </summary>
            <param name="sourceTokenOffset">The sequence offset in the underlying source sequence.</param>
            <returns>The zero-based index of the corresponding edit distance item, if found, or <c>-1</c> otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.FindTargetItemIndex(System.Int32)">
            <summary>
            Retrieves the edit operation index for a specified target sequence offset.
            </summary>
            <param name="targetTokenOffset">The sequence offset in the underlying target sequence.</param>
            <returns>The zero-based index of the corresponding edit distance item, if found, or <c>-1</c> otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.Sort">
            <summary>
            Sorts the edit distance items.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.Add(Sdl.LanguagePlatform.Core.EditDistance.EditDistanceItem)">
            <summary>
            Adds a new edit distance operation to the list.
            </summary>
            <param name="item">The item to add. No consistency checks are performed.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.AddAtStart(Sdl.LanguagePlatform.Core.EditDistance.EditDistanceItem)">
            <summary>
            Inserts a new edit distance operation at the beginning of the list.
            </summary>
            <param name="item">The item to add. No consistency checks are performed.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.Dump(System.IO.TextWriter,System.String)">
            <summary>
            Textually writes the edit distance information to a stream, for debugging purposes.
            </summary>
            <param name="wtr">The output text writer stream, which must be ready for writing.</param>
            <param name="msg">A caption to add at the start of the output.</param>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.Item(System.Int32)">
            <summary>
            Retrieves the edit distance information at the specified index.
            </summary>
            <param name="index">The index in the collection of edit operations.</param>
            <returns>The <see cref="T:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceItem"/> at the specified index. If the 
            index is invalid, an exception is thrown.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.Score">
            <summary>
            Gets the edit distance score as a floating-point value between 0 and 1. The score depends on the 
            length of the input vectors while the standard distance only represents the sum of the costs
            of all edit operations. Use this Score for TM applications.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.Distance">
            <summary>
            Gets or sets the standard distance score as a floating-point value representing the total cost of edit operations. Note 
            that this value should not be used for TM operations. It only computes the basic costs of the transformation, 
            but does not compute a match score (which also depends on the lengths of the sequences). 
            For TM applications, use <see cref="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.Score"/> instead.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.Items">
            <summary>
            Gets or sets the list of edit operations.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.SourceObjectCount">
            <summary>
            Gets the length of the source sequence.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistance.TargetObjectCount">
            <summary>
            Gets the length of the target sequence.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceItem">
            <summary>
            Encapsulates information about one edit operation.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceItem.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceItem.Source">
            <summary>
            Gets or sets the position of the source item. For move operations, this is the position in the source sequence
            where the item was deleted.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceItem.Target">
            <summary>
            Gets or sets the position of the target item. For move operations, this is the position in the target sequence
            where the item was inserted.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceItem.Operation">
            <summary>
            Gets or sets the edit operation identified to transform the source item into the target item.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceItem.Resolution">
            <summary>
            Gets or sets the edit distance resolution, if available.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceItem.Costs">
            <summary>
            Gets or sets the costs for this operation.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceItem.MoveSourceTarget">
            <summary>
            For move operations, this is the target position of the original deletion operation. For other operations, this value
            is not used.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.EditDistance.EditDistanceItem.MoveTargetSource">
            <summary>
            For move operations, this is the source position of the original insertion operation. For other operations, this value
            is not used.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.EditDistance.EditOperation">
            <summary>
            Enumerates the types of edit operations which are identified by the edit distance computation.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.EditDistance.EditOperation.Identity">
            <summary>
            Indicates that the source and target items are identical.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.EditDistance.EditOperation.Change">
            <summary>
            Indicates that the source item was changed into another target item.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.EditDistance.EditOperation.Move">
            <summary>
            Indicates that the source item is identical, but was moved to a different position within the target.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.EditDistance.EditOperation.Insert">
            <summary>
            Indicates that the item did not exist in the source and was inserted into the target.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.EditDistance.EditOperation.Delete">
            <summary>
            Indicates that the item was deleted and does not occur in the target.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.EditDistance.EditOperation.Undefined">
            <summary>
            Indicates that no operation has been identified yet
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.ErrorCode">
            <summary>
            Defines the error codes which are returned by certain operations or
            are included in <see cref="T:Sdl.LanguagePlatform.Core.LanguagePlatformException"/>s.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.OK">
            <summary>
            Indicates success/no error.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.System">
            <summary>
            Indicates a system-generated error/exception.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StorageError">
            <summary>
            Indicates that an error occurred during storage access/storing the translation unit.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.EmptySourceSegment">
            <summary>
            Indicates that the source segment is empty.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.InvalidSourceSegment">
            <summary>
            Indicates that the source segment is invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.EmptyTargetSegment">
            <summary>
            Indicates that the target segment is empty.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.InvalidTargetSegment">
            <summary>
            Indicates thath the target segment is invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SourceLanguageIncompatibleWithTM">
            <summary>
            Indicates that the source language is not compatible with the translation memory being used.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TargetLanguageIncompatibleWithTM">
            <summary>
            Indicates that the target language is not compatible with the translation memory being used.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.Other">
            <summary>
            Indicates that an unspecified error occurred.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.UndefinedOrInvalidLanguage">
            <summary>
            Indicates that a segment's or TU's language is not set or is invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.NeutralLanguage">
            <summary>
            Indicates that a segment's culture is neutral, i.e. has no region-qualifier ("en")
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.EmptySegment">
            <summary>
            Indicates that a segment is empty.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.InvalidSegment">
            <summary>
            Indicates that a segment is invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.InvalidSegmentPeripheralWhitespace">
            <summary>
            Indicates that a segment is invalid as it starts or ends with at least one whitespace character.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.NoTextInSegment">
            <summary>
            Indicates that a segment consists only of tags and no text was found.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TagInvalidTagAnchor">
            <summary>
            Indicates that a tag anchor is empty, not set, or invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TagEmptyOrInvalidTagID">
            <summary>
            Indicates that a tag ID is empty, not set, or invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TagAnchorAlreadyUsed">
            <summary>
            Indicates that a tag anchor in a segment has been used more than once for different tag instances.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TagAnchorNotOpen">
            <summary>
            Indicates that a tag anchor assigned to an end tag hasn't yet been seen at the corresponding start tag.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TagAnchorAlreadyClosed">
            <summary>
            Indicates that a tag anchor assigned to an end tag has already been used for a previously seen end tag.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TagAnchorNotClosed">
            <summary>
            Indicates that a tag anchor occurred only at a start tag, but has no corresponding closing tag.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TagWarningTagsDropped">
            <summary>
            Indicates that a TU was invalid due to tag errors and that these tags were dropped to 
            ensure the TU could be correctly imported.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.NotImplemented">
            <summary>
            Indicates that some required functionality hasn't yet been implemented.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMNotFound">
            <summary>
            A translation memory with the specified name or ID could not be found. 
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMOrContainerMissing">
            <summary>
            The translation memory or TM container appears to be missing and may have been deleted.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationUnknownVariable">
            <summary>
            A segmentation rule contained a variable reference which is unresolved.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationNoRulesForLanguage">
            <summary>
            No segmentation rules are available for the specified language.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationRuleDeserializationError">
            <summary>
            An error occurred during deserializaton of the segmentation rules.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationRuleLoadError">
            <summary>
            The segmentation rules could not be loaded.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationEmptyRuleSet">
            <summary>
            The segmentation rules are empty.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationIllegalKeywordInRule">
            <summary>
            The segmentation rule could not be parsed due to an unknown keyword.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationIllegalContinuation">
            <summary>
            The segmentation rule could not be parsed due to an invalid continuation specifier.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationTrailingJunk">
            <summary>
            The segmentation rule could not be parsed due to trailing junk.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationUnknownRuleType">
            <summary>
            The segmentation rule could not be parsed due to an unknown rule type.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationInvalidVariableName">
            <summary>
            The segmentation rule could not be parsed due to an invalid variable reference.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationInvalidRule">
            <summary>
            The segmentation rule is invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationCannotObtainSegmentor">
            <summary>
            The system could not obtain a segmentor for the specified language.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationSRXParseError">
            <summary>
            Error during parsing SRX document
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationSRXNoVersion">
            <summary>
            No version information found in SRX header
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationSRXUnsupportedVersion">
            <summary>
            Unsupported SRX version
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationSRXInternalError">
            <summary>
            Internal SRX parser error
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationSRXInvalidDocument">
            <summary>
            Invalid SRX document
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationTWBMalformedRule">
            <summary>
            Invalid TWB segmentation rule
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationTWBUnsupportedNestedExceptions">
            <summary>
            Nested exception found in TWB rule (unsupported)
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationTWBUnsupportedExceptionConstraints">
            <summary>
            Too many exception constraints detected in TWB rule (unsupported)
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentationTWBUnsupportedMultipleMatchContexts">
            <summary>
            Multiple positive match contexts detected in TWB rule (unsupported)
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ConfigurationCannotLoad">
            <summary>
            The configuration could not be loaded.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ConfigurationCannotResolveType">
            <summary>
            A type referenced in the configuration could not be resolved.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ConfigurationInvalidType">
            <summary>
            A type referenced in the configuration is invalid for the desired operation.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ConfigurationAbstractType">
            <summary>
            A type referenced in the configuration is abstract and cannot be instantiated.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ConfigurationCannotInstantiateOrCastType">
            <summary>
            A type referenced in the configuration could not be instantiated or casted.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ConfigurationConnectionStringNotFound">
            <summary>
            A required connection string could not be found in the configuration file.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ConfigurationUnknownProviderType">
            <summary>
            A provider type specified in the configuration is unknown.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ConfigurationOtherError">
            <summary>
            An unspecified error occurred in the configuration.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.AuthInsufficientPermissions">
            <summary>
            You don't have sufficient permissions to execute this method.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.AuthUnknownOrNonauthenticatedUser">
            <summary>
            The calling user is unknown or not authenticated.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.AuthInvalidUser">
            <summary>
            The calling user is invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMInvalidFieldName">
            <summary>
            A field name is invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMInvalidPicklistValueName">
            <summary>
            A picklist value name is invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMInvalidTMName">
            <summary>
            A translation memory name is invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMExceededTMNameLimit">
            <summary>
            The maximum length of the translation memory name has been exceeded.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMExceededFieldNameLimit">
            <summary>
            The maximum length of the field name has been exceeded.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMExceededPicklistValueNameLimit">
            <summary>
            The maximum length of the picklist value been exceeded.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMExceededCopyrightFieldLimit">
            <summary>
            The maximum length of the copyright field has been exceeded.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMExceededDescriptionFieldLimit">
            <summary>
            The maximum length of the description field has been exceeded.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMExceededTextFieldValueLimit">
            <summary>
            The maximum length of the text field value has been exceeded.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMAlreadyExists">
            <summary>
            A TM with this name already exists.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.DAFieldTypesInconsistent">
            <summary>
            The field types are inconsistent (internal error).
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.InvalidTMSourceLanguage">
            <summary>
            The tranlsation memory's source language is not valid. No region-neutral languages can be used.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.InvalidTMTargetLanguage">
            <summary>
            The translation memory's target language is not valid. No region-neutral languages can be used.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.DATUNotInTM">
            <summary>
            The requested translation unit could not be found in the translation memory.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.DAInvalidSegmentAfterDeserialization">
            <summary>
            The segment is invalid. It could not be retrieved.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.DAIndexDuplicateKey">
            <summary>
            The index contained a duplicate key.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMInvalidIteratorSize">
            <summary>
            The iterator size is out of bounds.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMUndefinedCascadeElement">
            <summary>
            An element in the TM Cascade is undefined or empty.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMUninitializedCascadeElement">
            <summary>
            An element in the TM Cascade is not initialized.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMUndefinedTMInCascade">
            <summary>
            An element in the TM Cascade is undefined.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMUninitializedTMInCascade">
            <summary>
            An element in the TM Cascade is not initialized.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMCannotInitializeTMInCascade">
            <summary>
            An element in the TM Cascade could not be initialized.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMIncompatibleTMLanguageDirectionInCascade">
            <summary>
            The language direction of an element in the TM Cascade is incompatible with the cascade's language direction.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMIncompatibleFieldTypes">
            <summary>
            The field types are incompatible.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMInvalidSortSpecification">
            <summary>
            The sort specification is invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMNoTMOpen">
            <summary>
            No translation memory is open.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMFieldAlreadyExists">
            <summary>
            A field with the specified name already exists.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMPicklistValueAlreadyExists">
            <summary>
            A picklist value with the specified name already exists.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMResourceAlreadyExists">
            <summary>
            The specified resource already exists.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMResourceDoesNotExist">
            <summary>
            The specified resource does not exist.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMSourceLanguageMismatch">
            <summary>
            The source language is not compatible with the TM's source language.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMTargetLanguageMismatch">
            <summary>
            The target language is not compatible with the TM's target language.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMCannotModifyExactSearchOnlyFlag">
            <summary>
            The TM setting "Exact Search Only" cannot be changed.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMSearchModeNotSupported">
            <summary>
            The TM does not support the required search mode.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMCannotModifyFullTextSearchFlag">
            <summary>
            Full-text search can only be enabled or disabled at TM creation time.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMCannotModifyFuzzyIndices">
            <summary>
            The fuzzy indexes cannot be modified after the TM has been created.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMImportFieldNotExists">
            <summary>
            The TM cannot import the TU because the TM does not have a field corresponding to a field in the TU.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMImportIncompatibleFieldTypes">
            <summary>
            An existing TM field is incompatible with an imported TM field.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMTULimitExceeded">
            <summary>
            Access denied (TM Size Limit exceeded).
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StorageTMAlreadyExists">
            <summary>
            The specified translation memory already exists.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StorageSchemaDoesntExist">
            <summary>
            The database schema does not exist.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StorageSchemaAlreadyExists">
            <summary>
            The database schema already exists.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StoragePicklistValueAlreadyExists">
            <summary>
            The new picklist value name already exists in the field.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StorageIncompatibleAttributeType">
            <summary>
            The field type is not compatible with the requested operation.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StorageFieldNotFound">
            <summary>
            The required field does not exist.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StorageFieldAlreadyExists">
            <summary>
            The new field already exists.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StorageParameterNotFound">
            <summary>
            A requested database parameter could not be retrieved.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StorageDataFileNotFound">
            <summary>
            The requested data file could not be located.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StorageVersionDataOutdated">
            <summary>
            The database contains data in an outdated format which cannot be automatically migrated to the current schema. Please contact technical support.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StorageVersionDataNewer">
            <summary>
            The database contains data in a newer format than this version of the application can handle. You need to upgrade your software, or contact technical support.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMXUnknownVersion">
            <summary>
            The TMX Version cannot be processed.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMXNoSegmentOpen">
            <summary>
            The TMX file cannot be processed since no segment is currently open.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMXUnknownTMXAttribute">
            <summary>
            The TMX file cannot be processed since an unknown TMX attribute was encountered.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMXMissingVersion">
            <summary>
            The TMX file cannot be processed since no TMX version information was found.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMXCannotAddTagData">
            <summary>
            The TMX file cannot be processed as no tag data can be added to a text element.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMXInternalParserError">
            <summary>
            The TMX file cannot be processed since an internal parser error occurred.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMXUnexpectedInputData">
            <summary>
            The TMX file cannot be processed since it contains unexpected data.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMXCannotDetermineLanguageDirection">
            <summary>
            The language direction of the TMX file cannot be determined. Valid input files must be bilingual.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.StemmerErrorInStemmingRule">
            <summary>
            The stemming rule cannot be processed.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TokenizerInvalidNumericFormat">
            <summary>
            An invalid numeric format occurred in a number token.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TokenizerInvalidCharacterSet">
            <summary>
            An invalid character set occurred in a tokenizer rule.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.NoRegionSpecificLanguageFound">
            <summary>
            No region-specific language could be found for the specified language.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorInFilterExpression">
            <summary>
            Filter expression parser: Error in Filter Expression
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterUnbalancedParenthesis">
            <summary>
            Filter expression parser: Unbalanced parentheses.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterExpectFieldName">
            <summary>
            Filter expression parser: Expected a field name.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterInvalidFieldName">
            <summary>
            Filter expression parser: Invalid field name.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterEmptyFieldName">
            <summary>
            Filter expression parser: Empty field name.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterUnknownField">
            <summary>
            Filter expression parser: Unknown field.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterPrematureEndOfInput">
            <summary>
            Filter expression parser: Premature end of input.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterOperatorExpected">
            <summary>
            Filter expression parser: Operator expected.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterNotAPicklistField">
            <summary>
            Filter expression parser: The field is not a picklist field.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterPicklistItemNotFound">
            <summary>
            Filter expression parser: The picklist field does not contain the picklist value.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterFieldNameNotSurroundedByDoubleQuotes">
            <summary>
            Filter expression parser: The field name must be surrounded by double quotes.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterMultipleValuesNotBracketed">
            <summary>
            Filter expression parser: Multiple values need to be enclosed in parentheses.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterMultivalueFieldNotBracketed">
            <summary>
            Filter expression parser: Values for multivalue fields need to be enclosed in parentheses.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterFieldRequiresIntegerValue">
            <summary>
            Filter expression parser: The field requires an integer value.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterValueNotSurroundedByDoubleQuotes">
            <summary>
            Filter expression parser: The value needs to be enclosed in double quotes.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterCannotParseDate">
            <summary>
            Filter expression parser: Cannot parse the date.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterTrailingBackslash">
            <summary>
            Filter expression parser: Trailing backslash.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterIllegalInputSymbol">
            <summary>
            Filter expression parser: Illegal input symbol.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ErrorFilterTrailingJunk">
            <summary>
            Filter expression parser: Trailing junk at end of expression.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMToolsNoTM">
            <summary>
            No translation memory was provided for the current task.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMToolsNoFileHeader">
            <summary>
            The file cannot be processed as no usable file header was found.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TMToolsIncompatibleLanguagesBetweenDocumentAndTM">
            <summary>
            The file cannot be processed since its language direction is incompatible with the current TM.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.InternalError">
            <summary>
            An internal error occurred.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.CorruptData">
            <summary>
            The data in an input file is corrupt and cannot be used.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.InconsistentData">
            <summary>
            The data is inconsistent and cannot be used.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.CannotInitializeSpring">
            <summary>
            The Spring Framework could not be initialized.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.CannotInitializeFilterManager">
            <summary>
            The Filter Manager could not be initialized.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.InvalidOperation">
            <summary>
            An invalid operation was attempted.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ReadonlyResource">
            <summary>
            Attempt to modify a read-only resource.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.EmbeddedResourceNotFound">
            <summary>
            An expected, embedded resource could not be retrieved.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.ResourceNotAvailable">
            <summary>
            The requested language resource cannot be loaded for the specified culture.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.DataComponentMissing">
            <summary>
            A required data component is missing or unavailable.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.DataComponentIncompatible">
            <summary>
            The selected data component is incompatible with the other data components.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.DataComponentNotOpen">
            <summary>
            The selected data component must be opened first.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.DataComponentAlreadyInUse">
            <summary>
            The selected data component is already in use.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SegmentNotTokenized">
            <summary>
            The segment is not tokenized and cannot be processed.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.TagCountLimitExceeded">
            <summary>
            The tag count limit has been exceeded by at least one segment of the TU.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.NoTranslatableContentInFile">
            <summary>
            The file cannot be processed since it does not contain any translatable content.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.NoContentInFile">
            <summary>
            The file cannot be processed since it does not contain any processable content.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.UnexpectedDocumentContent">
            <summary>
            The document cannot be processed since it contains unexpected contents.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.LanguageResourceFileNotFound">
            <summary>
            The language resource file could not be located.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.InvalidLanguageResourceFile">
            <summary>
            The language resource file is invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.CorruptDataInResourceFile">
            <summary>
            The language resource file contains corrupt data.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.XmlError">
            <summary>
            An error occurred while reading or generating XML data.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.EditScriptEmptySearchPattern">
            <summary>
            Edit Script: The search pattern for a search/replace cannot be empty.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.EditScriptEmptyFieldName">
            <summary>
            Edit Script: The field name cannot be null or empty.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.EditScriptSystemField">
            <summary>
            Edit Script: This operation cannot be performed on system fields.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.EditScriptIncompatibleFieldValueTypes">
            <summary>
            Edit Script: The action cannot be performed since the field value types are incompatible.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.EditScriptInvalidValue">
            <summary>
            Edit Script: The value is invalid for the specified field.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.EditScriptIncompatibleField">
            <summary>
            Edit Script: The action cannot be performed on this field.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.EditScriptInvalidOperationForFieldValueType">
            <summary>
            Edit Script: The requested operation cannot be performed on a field of this value type.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SQLiteNotADatabase">
            <summary>
            The specified file is not a valid translation memory.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SQLiteCorrupt">
            <summary>
            The translation memory data file is corrupt.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.SQLiteOtherError">
            <summary>
            The translation memory data file engine returned an error.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.ErrorCode.EmptyData">
            <summary>
            No data found.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_AuthInsufficientPermissions">
            <summary>
              Looks up a localized string similar to You don&apos;t have sufficient permissions to execute this method..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_AuthInvalidUser">
            <summary>
              Looks up a localized string similar to The calling user is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_AuthUnknownOrNonauthenticatedUser">
            <summary>
              Looks up a localized string similar to The calling user is unknown or not authenticated..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_CannotInitializeFilterManager">
            <summary>
              Looks up a localized string similar to The Filter Manager could not be initialized..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_CannotInitializeSpring">
            <summary>
              Looks up a localized string similar to The Spring Framework could not be initialized..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ConfigurationAbstractResourceProviderType">
            <summary>
              Looks up a localized string similar to The resource provider is abstract and cannot be instantiated..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ConfigurationAbstractType">
            <summary>
              Looks up a localized string similar to A type referenced in the configuration is abstract and cannot be instantiated..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ConfigurationCannotInstantiateOrCastType">
            <summary>
              Looks up a localized string similar to A type referenced in the configuration could not be instantiated or casted..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ConfigurationCannotInstantiateResourceProvider">
            <summary>
              Looks up a localized string similar to The resource provider could not be instantiated..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ConfigurationCannotLoad">
            <summary>
              Looks up a localized string similar to The configuration could not be loaded..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ConfigurationCannotResolveResourceProviderType">
            <summary>
              Looks up a localized string similar to The resource provider type cannot be resolved..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ConfigurationCannotResolveType">
            <summary>
              Looks up a localized string similar to A type referenced in the configuration could not be resolved..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ConfigurationConnectionStringNotFound">
            <summary>
              Looks up a localized string similar to A required connection string could not be found in the configuration file..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ConfigurationInvalidResourceProviderType">
            <summary>
              Looks up a localized string similar to The resource provider is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ConfigurationInvalidType">
            <summary>
              Looks up a localized string similar to A type referenced in the configuration is invalid for the desired operation..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ConfigurationOtherError">
            <summary>
              Looks up a localized string similar to An unspecified error occurred in the configuration..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ConfigurationUnknownProviderType">
            <summary>
              Looks up a localized string similar to A provider type specified in the configuration is unknown..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_CorruptData">
            <summary>
              Looks up a localized string similar to The data in an input file is corrupt and cannot be used..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_CorruptDataInResourceFile">
            <summary>
              Looks up a localized string similar to The language resource file contains corrupt data..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DAFieldTypesInconsistent">
            <summary>
              Looks up a localized string similar to The field types are inconsistent (internal error)..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DAIndexDuplicateKey">
            <summary>
              Looks up a localized string similar to The index contained a duplicate key..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DAInvalidSegment">
            <summary>
              Looks up a localized string similar to The segment is invalid. It could not be stored..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DAInvalidSegmentAfterDeserialization">
            <summary>
              Looks up a localized string similar to The segment is invalid. It could not be retrieved..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DataComponentAlreadyInUse">
            <summary>
              Looks up a localized string similar to The selected data component is already in use..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DataComponentIncompatible">
            <summary>
              Looks up a localized string similar to The selected data component is incompatible with the other data components..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DataComponentMissing">
            <summary>
              Looks up a localized string similar to A required data component is missing or unavailable..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DataComponentNotOpen">
            <summary>
              Looks up a localized string similar to The selected data component must be opened first..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DataConnectionUnknownProvider">
            <summary>
              Looks up a localized string similar to The specified data provider type is unknown..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DATMDoesNotExist">
            <summary>
              Looks up a localized string similar to The requested translation memory could not be found..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DATMSourceLanguageInvalid">
            <summary>
              Looks up a localized string similar to The source language for the translation memory is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DATMTargetLanguageInvalid">
            <summary>
              Looks up a localized string similar to The target language for the translation memory is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_DATUNotInTM">
            <summary>
              Looks up a localized string similar to The requested translation unit could not be found in the translation memory..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EDIT_FieldNameEmpty">
            <summary>
              Looks up a localized string similar to The field name cannot be null or empty..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EDIT_IncompatibleField">
            <summary>
              Looks up a localized string similar to The action cannot be performed on this field..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EDIT_IncompatibleFieldValueTypes">
            <summary>
              Looks up a localized string similar to The action cannot be performed since the field value types are incompatible..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EDIT_InvalidOperationForFieldValueType">
            <summary>
              Looks up a localized string similar to The requested operation cannot be performed on a field of this value type..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EDIT_InvalidValue">
            <summary>
              Looks up a localized string similar to The value is invalid for the specified field..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EDIT_NoSuchField">
            <summary>
              Looks up a localized string similar to The field does not exist..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EDIT_SearchPatternNullOrEmpty">
            <summary>
              Looks up a localized string similar to The search pattern for a search/replace cannot be empty..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EDIT_SystemField">
            <summary>
              Looks up a localized string similar to This operation cannot be performed on system fields..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EmbeddedResourceNotFound">
            <summary>
              Looks up a localized string similar to An expected, embedded resource could not be retrieved..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EmptyData">
            <summary>
              Looks up a localized string similar to No data found..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EmptyOrInvalidLanguage">
            <summary>
              Looks up a localized string similar to The segment&apos;s or translation unit&apos;s language is invalid or not set..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EmptyOrInvalidTagID">
            <summary>
              Looks up a localized string similar to A tag ID is empty, invalid, or not set..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EmptySegment">
            <summary>
              Looks up a localized string similar to The segment is empty..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EmptySourceSegment">
            <summary>
              Looks up a localized string similar to The translation unit&apos;s source segment is empty or not set..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_EmptyTargetSegment">
            <summary>
              Looks up a localized string similar to The translation unit&apos;s target segment is empty or not set..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_CannotParseDate">
            <summary>
              Looks up a localized string similar to Cannot parse the date..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_EmptyFieldName">
            <summary>
              Looks up a localized string similar to Empty field name..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_FILTER_ErrorInFilterExpression">
            <summary>
              Looks up a localized string similar to Error in Filter Expression: {0} - position {1}, input &quot;{2}&quot;.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_ExpectFieldName">
            <summary>
              Looks up a localized string similar to Expected a field name..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_FieldNameNotSurroundedByDoubleQuotes">
            <summary>
              Looks up a localized string similar to The field name must be surrounded by double quotes..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_FieldRequiresIntegerValue">
            <summary>
              Looks up a localized string similar to The field requires an integer value..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_IllegalInputSymbol">
            <summary>
              Looks up a localized string similar to Illegal input symbol..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_InvalidFieldName">
            <summary>
              Looks up a localized string similar to Invalid field name..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_MultipleValuesNotBracketed">
            <summary>
              Looks up a localized string similar to Multiple values need to be enclosed in parentheses..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_MultivalueFieldNotBracketed">
            <summary>
              Looks up a localized string similar to Values for multivalue fields need to be enclosed i parentheses..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_NotAPicklistField">
            <summary>
              Looks up a localized string similar to The field is not a picklist field..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_OperatorExpected">
            <summary>
              Looks up a localized string similar to Operator expected..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_PicklistItemNotFound">
            <summary>
              Looks up a localized string similar to The picklist field does not contain the picklist value..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_PrematureEndOfInput">
            <summary>
              Looks up a localized string similar to Premature end of input..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_TrailingBackslash">
            <summary>
              Looks up a localized string similar to Trailing backslash..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_TrailingJunk">
            <summary>
              Looks up a localized string similar to Trailing junk at end of expression..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_UnbalancedParenthesis">
            <summary>
              Looks up a localized string similar to Unbalanced parentheses..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_UnknownField">
            <summary>
              Looks up a localized string similar to Unknown field..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Filter_ValueNotSurroundedByDoubleQuotes">
            <summary>
              Looks up a localized string similar to The value needs to be enclosed in double quotes..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InconsistentData">
            <summary>
              Looks up a localized string similar to The data is inconsistent and cannot be used..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InternalError">
            <summary>
              Looks up a localized string similar to An internal error occurred..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InvalidFieldName">
            <summary>
              Looks up a localized string similar to The field name is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InvalidLanguageResourceFile">
            <summary>
              Looks up a localized string similar to The language resource file is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InvalidOperation">
            <summary>
              Looks up a localized string similar to An invalid operation was attempted..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InvalidPicklistValueName">
            <summary>
              Looks up a localized string similar to The picklist value name is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InvalidSegment">
            <summary>
              Looks up a localized string similar to The segment is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InvalidSegmentPeripheralWhitespace">
            <summary>
              Looks up a localized string similar to The segment is invalid as it starts or ends with at least one whitespace character..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InvalidSourceSegment">
            <summary>
              Looks up a localized string similar to The translation unit&apos;s source segment is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InvalidTagAnchor">
            <summary>
              Looks up a localized string similar to A tag anchor is empty, invalid, or not set..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InvalidTargetSegment">
            <summary>
              Looks up a localized string similar to The translation unit&apos;s target segment is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InvalidTMSourceLanguage">
            <summary>
              Looks up a localized string similar to The tranlsation memory&apos;s source language is not valid. No region-neutral languages can be used..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_InvalidTMTargetLanguage">
            <summary>
              Looks up a localized string similar to The translation memory&apos;s target language is not valid. No region-neutral languages can be used..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_LanguageResourceFileNotFound">
            <summary>
              Looks up a localized string similar to The language resource file could not be located..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_NeutralLanguage">
            <summary>
              Looks up a localized string similar to The segment&apos;s culture is neutral (it does not have a region specifier)..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_NoContentInFile">
            <summary>
              Looks up a localized string similar to The file cannot be processed since it does not contain any processable content..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_NoRegionSpecificLanguageFound">
            <summary>
              Looks up a localized string similar to No region-specific language could be found for the specified language..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_NoTextInSegment">
            <summary>
              Looks up a localized string similar to The segment does not contain any translatable text..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_NotImplemented">
            <summary>
              Looks up a localized string similar to Some required functionality has not yet been implemented..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_NoTranslatableContentInFile">
            <summary>
              Looks up a localized string similar to The file cannot be processed since it does not contain any translatable content..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_OK">
            <summary>
              Looks up a localized string similar to No error detected..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_Other">
            <summary>
              Looks up a localized string similar to An unspecified error occurred..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ReadonlyResource">
            <summary>
              Looks up a localized string similar to Attempt to modify a read-only resource..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_ResourceNotAvailable">
            <summary>
              Looks up a localized string similar to The requested language resource cannot be loaded for the specified culture..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationCannotObtainSegmentor">
            <summary>
              Looks up a localized string similar to The system could not obtain a segmentor for the specified language..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationEmptyRuleSet">
            <summary>
              Looks up a localized string similar to The segmentation rules are empty..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationIllegalContinuation">
            <summary>
              Looks up a localized string similar to The segmentation rule could not be parsed due to an invalid continuation specifier..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationIllegalKeywordInRule">
            <summary>
              Looks up a localized string similar to The segmentation rule could not be parsed due to an unknown keyword..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationInvalidRule">
            <summary>
              Looks up a localized string similar to The segmentation rule is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationInvalidVariableName">
            <summary>
              Looks up a localized string similar to The segmentation rule could not be parsed due to an invalid variable reference..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationNoRulesForLanguage">
            <summary>
              Looks up a localized string similar to No segmentation rules are available for the specified language..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationRuleDeserializationError">
            <summary>
              Looks up a localized string similar to An error occurred during deserializaton of the segmentation rules..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationRuleLoadError">
            <summary>
              Looks up a localized string similar to The segmentation rules could not be loaded..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationSRXInternalError">
            <summary>
              Looks up a localized string similar to Internal SRX parser error.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationSRXInvalidDocument">
            <summary>
              Looks up a localized string similar to Invalid SRX document.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationSRXNoVersion">
            <summary>
              Looks up a localized string similar to No version information found in SRX header.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationSRXParseError">
            <summary>
              Looks up a localized string similar to Error during parsing SRX document.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationSRXUnsupportedVersion">
            <summary>
              Looks up a localized string similar to Unsupported SRX version.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationTrailingJunk">
            <summary>
              Looks up a localized string similar to The segmentation rule could not be parsed due to trailing junk..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationTWBMalformedRule">
            <summary>
              Looks up a localized string similar to Invalid TWB segmentation rule.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationTWBUnsupportedExceptionConstraints">
            <summary>
              Looks up a localized string similar to Too many exception constraints detected in TWB rule (unsupported).
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationTWBUnsupportedMultipleMatchContexts">
            <summary>
              Looks up a localized string similar to Multiple positive match contexts detected in TWB rule (unsupported).
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationTWBUnsupportedNestedExceptions">
            <summary>
              Looks up a localized string similar to Nested exception found in TWB rule (unsupported).
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationUnknownRuleType">
            <summary>
              Looks up a localized string similar to The segmentation rule could not be parsed due to an unknown rule type..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentationUnknownVariable">
            <summary>
              Looks up a localized string similar to A segmentation rule referred to an undefined variable..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SegmentNotTokenized">
            <summary>
              Looks up a localized string similar to The segment is not tokenized and cannot be processed..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SourceLanguageIncompatibleWithTM">
            <summary>
              Looks up a localized string similar to The source languge of the translation unit is incompatible with the translation memory..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SQLITE_SQLiteCorrupt">
            <summary>
              Looks up a localized string similar to The translation memory data file is corrupt..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SQLITE_SQLiteNotADatabase">
            <summary>
              Looks up a localized string similar to The specified file is not a valid translation memory..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_SQLITE_SQLiteOtherError">
             <summary>
               Looks up a localized string similar to The translation memory data file engine returned an error:
            {0}.
             </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StemmerErrorInStemmingRule">
            <summary>
              Looks up a localized string similar to The stemming rule cannot be processed..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StorageDataFileNotFound">
            <summary>
              Looks up a localized string similar to The requested data file could not be located..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StorageDataOutdated">
            <summary>
              Looks up a localized string similar to The database contains data in an outdated format which cannot be automatically migrated to the current schema. Please contact technical support..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StorageError">
            <summary>
              Looks up a localized string similar to A storage error or database error occurred..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StorageFieldAlreadyExists">
            <summary>
              Looks up a localized string similar to The new field already exists..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StorageFieldNotFound">
            <summary>
              Looks up a localized string similar to The required field does not exist..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StorageIncompatibleAttributeType">
            <summary>
              Looks up a localized string similar to The field type is not compatible with the requested operation..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StorageParameterNotFound">
            <summary>
              Looks up a localized string similar to A requested database parameter could not be retrieved..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StoragePicklistValueAlreadyExists">
            <summary>
              Looks up a localized string similar to The new picklist value name already exists in the field..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StorageSchemaAlreadyExists">
            <summary>
              Looks up a localized string similar to The database schema already exists..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StorageSchemaDoesntExist">
            <summary>
              Looks up a localized string similar to The database schema does not exist..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StorageTMAlreadyExists">
            <summary>
              Looks up a localized string similar to The specified translation memory already exists..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_StorageVersionDataNewer">
            <summary>
              Looks up a localized string similar to The database contains data in a newer format than this version of the application can handle. You need to upgrade your software, or contact technical support..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_System">
            <summary>
              Looks up a localized string similar to The system-generated exception was thrown..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TagAnchorAlreadyClosed">
            <summary>
              Looks up a localized string similar to A closing tag was found for a tag which is already closed..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TagAnchorAlreadyUsed">
            <summary>
              Looks up a localized string similar to An opening tag was found for a tag which was already open..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TagAnchorNotClosed">
            <summary>
              Looks up a localized string similar to A closing tag has not been found for at least one tag in the segment..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TagAnchorNotOpen">
            <summary>
              Looks up a localized string similar to A closing tag has been found for a tag which has not been opened..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TagCountLimitExceeded">
            <summary>
              Looks up a localized string similar to The tag count limit has been exceeded by at least one segment of the TU..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TagWarningTagsDropped">
            <summary>
              Looks up a localized string similar to The TU was invalid due to tag errors, but could be correctly imported after paired tags were dropped (Warning)..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TargetLanguageIncompatibleWithTM">
            <summary>
              Looks up a localized string similar to The target language of the translation unit is incompatible with the translation memory..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMAlreadyExists">
            <summary>
              Looks up a localized string similar to A TM with this name already exists..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMCannotInitializeTMInCascade">
            <summary>
              Looks up a localized string similar to An element in the TM Cascade could not be initialized..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMCannotModifyExactSearchOnlyFlag">
            <summary>
              Looks up a localized string similar to The TM setting &quot;Exact Search Only&quot; cannot be changed..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMCannotModifyFullTextSearchFlag">
            <summary>
              Looks up a localized string similar to Full-text search can only be enabled or disabled at TM creation time..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMCannotModifyFuzzyIndices">
            <summary>
              Looks up a localized string similar to The fuzzy indexes cannot be modified after the TM has been created..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMExceededCopyrightFieldLimit">
            <summary>
              Looks up a localized string similar to The maximum length of the copyright field has been exceeded..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMExceededDescriptionFieldLimit">
            <summary>
              Looks up a localized string similar to The maximum length of the description field has been exceeded..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMExceededFieldNameLimit">
            <summary>
              Looks up a localized string similar to The maximum length of the field name has been exceeded..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMExceededPicklistValueNameLimit">
            <summary>
              Looks up a localized string similar to The maximum length of the picklist value been exceeded..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMExceededTextFieldValueLimit">
            <summary>
              Looks up a localized string similar to The maximum length of the text field value has been exceeded..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMExceededTMNameLimit">
            <summary>
              Looks up a localized string similar to The maximum length of the translation memory name has been exceeded..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMFieldAlreadyExists">
            <summary>
              Looks up a localized string similar to A field with the specified name already exists..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMImportFieldNotExists">
            <summary>
              Looks up a localized string similar to The translation memory cannot import the translation unit because the translation memory does not have a field corresponding to a field in the translation unit..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMImportIncompatibleFieldTypes">
            <summary>
              Looks up a localized string similar to An existing TM field is incompatible with an imported TM field..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMIncompatibleFieldTypes">
            <summary>
              Looks up a localized string similar to The field types are incompatible..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMIncompatibleTMLanguageDirectionInCascade">
            <summary>
              Looks up a localized string similar to The language direction of an element in the TM Cascade is incompatible with the cascade&apos;s language direction..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMInvalidIteratorSize">
            <summary>
              Looks up a localized string similar to The iterator size is out of bounds..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMInvalidSortSpecification">
            <summary>
              Looks up a localized string similar to The sort specification is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMInvalidTMName">
            <summary>
              Looks up a localized string similar to The name of the translation memory is invalid..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMNotFound">
            <summary>
              Looks up a localized string similar to The translation memory could not be found or retrieved..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMNoTMOpen">
            <summary>
              Looks up a localized string similar to No translation memory is open..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMOrContainerMissing">
            <summary>
              Looks up a localized string similar to The translation memory or TM container appears to be missing and may have been deleted..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMPicklistValueAlreadyExists">
            <summary>
              Looks up a localized string similar to A picklist value with the specified name already exists..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMResourceAlreadyExists">
            <summary>
              Looks up a localized string similar to The specified resource already exists..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMResourceDoesNotExist">
            <summary>
              Looks up a localized string similar to The specified resource does not exist..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMSearchModeNotSupported">
            <summary>
              Looks up a localized string similar to The TM does not support the required search mode..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMSourceLanguageMismatch">
            <summary>
              Looks up a localized string similar to The source language is not compatible with the TM&apos;s source language..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMTargetLanguageMismatch">
            <summary>
              Looks up a localized string similar to The target language is not compatible with the TM&apos;s target language..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMToolsIncompatibleLanguagesBetweenDocumentAndTM">
            <summary>
              Looks up a localized string similar to The file cannot be processed since its language direction is incompatible with the current TM..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMToolsNoFileHeader">
            <summary>
              Looks up a localized string similar to The file cannot be processed as no usable file header was found..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMToolsNoTM">
            <summary>
              Looks up a localized string similar to No translation memory was provided for the current task..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMTULimitExceeded">
            <summary>
              Looks up a localized string similar to Access denied (TM Size Limit exceeded)..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMUndefinedCascadeElement">
            <summary>
              Looks up a localized string similar to An element in the TM Cascade is undefined or empty..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMUndefinedTMInCascade">
            <summary>
              Looks up a localized string similar to An eleemnt in the TM Cascade is undefined..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMUninitializedCascadeElement">
            <summary>
              Looks up a localized string similar to An element in the TM Cascade is not initialized..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMUninitializedTMInCascade">
            <summary>
              Looks up a localized string similar to An element in the TM Cascade is not initialized..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMXCannotAddTagData">
            <summary>
              Looks up a localized string similar to The TMX file cannot be processed as no tag data can be added to a text element..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMXCannotDetermineLanguageDirection">
            <summary>
              Looks up a localized string similar to The language direction of the TMX file cannot be determined. Valid input files must be bilingual..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMXInternalParserError">
            <summary>
              Looks up a localized string similar to The TMX file cannot be processed since an internal parser error occurred..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMXMissingVersion">
            <summary>
              Looks up a localized string similar to The TMX file cannot be processed since no TMX version information was found..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMXNoSegmentOpen">
            <summary>
              Looks up a localized string similar to The TMX file cannot be processed since no segment is currently open..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMXUnexpectedInputData">
            <summary>
              Looks up a localized string similar to The TMX file cannot be processed since it contains unexpected data..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMXUnknownTMXAttribute">
            <summary>
              Looks up a localized string similar to The TMX file cannot be processed since an unknown TMX attribute was encountered..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TMXUnknownVersion">
            <summary>
              Looks up a localized string similar to The TMX Version cannot be processed..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TokenizerInvalidCharacterSet">
            <summary>
              Looks up a localized string similar to An invalid character set occurred in a tokenizer rule..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TokenizerInvalidNumericFormat">
            <summary>
              Looks up a localized string similar to An invalid numeric format occurred in a number token..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_TranslationMemoryNotFound">
            <summary>
              Looks up a localized string similar to The translation memory with the specified name could not be found..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_UndefinedOrInvalidLanguage">
            <summary>
              Looks up a localized string similar to The language is null, undefined, or not valid for this operation..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_UnexpectedDocumentContent">
            <summary>
              Looks up a localized string similar to The document cannot be processed since it contains unexpected contents..
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.ErrorMessages.EMSG_XmlError">
            <summary>
              Looks up a localized string similar to An error occurred while reading or generating XML data..
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.FaultStatus">
            <summary>
            Specifies the fault status.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.FaultStatus.Success">
            <summary>
            The operation was successfully executed.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.FaultStatus.Warning">
            <summary>
            The operation generated a warning.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.FaultStatus.Error">
            <summary>
            The operation generated an error.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.FaultStatus.Fatal">
            <summary>
            The operation crashed or generated a fatal error.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.FaultDescription">
            <summary>
            Contains fault and error information intended for WCF/SOAP communication. 
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.FaultDescription.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the FaultDescription class from a system exception.
            </summary>
            <param name="e">The system exception.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.FaultDescription.#ctor(Sdl.LanguagePlatform.Core.ErrorCode,Sdl.LanguagePlatform.Core.FaultStatus)">
            <summary>
            Instantiates a new object and initializes it with the specified error code, 
            error status, and 
            empty error data. The error message is retrieved from the resources.
            </summary>
            <param name="code">The error code</param>
            <param name="status">The error status</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.FaultDescription.#ctor(Sdl.LanguagePlatform.Core.ErrorCode)">
            <summary>
            Instantiates a new object and initializes it with the specified error code. 
            The error message is retrieved from the resources, and the error status
            is set to <see cref="F:Sdl.LanguagePlatform.Core.FaultStatus.Error"/>.
            </summary>
            <param name="code">The error code</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.FaultDescription.#ctor(Sdl.LanguagePlatform.Core.ErrorCode,System.String)">
            <summary>
            Instantiates a new object and initializes it with the specified error code and data. 
            The error message is retrieved from the resources, and the error status
            is set to <see cref="F:Sdl.LanguagePlatform.Core.FaultStatus.Error"/>.
            </summary>
            <param name="code">The error code</param>
            <param name="data">Additional error data, may be null</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.FaultDescription.#ctor(Sdl.LanguagePlatform.Core.ErrorCode,Sdl.LanguagePlatform.Core.FaultStatus,System.String)">
            <summary>
            Initializes the object with the specified error code, error status, and 
            additional error data. The error message is retrieved from the resources.
            </summary>
            <param name="code">The error code</param>
            <param name="status">The error status</param>
            <param name="data">Additional error data, may be null</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.FaultDescription.GetDescriptionFromErrorCode(Sdl.LanguagePlatform.Core.ErrorCode)">
            <summary>
            Retrieves a localized error message (which may include <see cref="M:System.String.Format(System.String,System.Object)"/> 
            placeholders) for the provided error code. 
            </summary>
            <param name="code">An error code</param>
            <returns>A possibly localized error message (depending on the current thread's
            culture).</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.FaultDescription.Status">
            <summary>
            Gets the fault status.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.FaultDescription.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.FaultDescription.Data">
            <summary>
            Gets any additional data relevant for the fault.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.FaultDescription.ErrorCode">
            <summary>
            Gets the error code associated with the fault.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.ISegmentElementVisitor">
            <summary>
            Visitor pattern implementation for segment elements.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitText(Sdl.LanguagePlatform.Core.Text)">
            <summary>
            Called by <see cref="T:Sdl.LanguagePlatform.Core.Text"/>.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitTag(Sdl.LanguagePlatform.Core.Tag)">
            <summary>
            Called by <see cref="T:Sdl.LanguagePlatform.Core.Tag"/>.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitDateTimeToken(Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken)">
            <summary>
            Called by <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken"/>.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitNumberToken(Sdl.LanguagePlatform.Core.Tokenization.NumberToken)">
            <summary>
            Called by <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.NumberToken"/>.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitMeasureToken(Sdl.LanguagePlatform.Core.Tokenization.MeasureToken)">
            <summary>
            Called by <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken"/>.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitSimpleToken(Sdl.LanguagePlatform.Core.Tokenization.SimpleToken)">
            <summary>
            Called by <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken"/>.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitTagToken(Sdl.LanguagePlatform.Core.Tokenization.TagToken)">
            <summary>
            Called by <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.TagToken"/>.
            </summary>
            <param name="token"></param>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.LanguagePair">
            <summary>
            A LanguagePair represents a combination of a source language and a target language.
            Languages are specified using their culture or the culture which usually maps to 
            CultureInfo.Name. However, since the XmlSerializer cannot serialize 
            <see cref="T:System.Globalization.CultureInfo">CultureInfo</see> objects, 
            the culture can also be specified using the name. 
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePair.#ctor">
            <summary>
            Instantiates a new object and initializes both languages to the invariant culture.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePair.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Instantiates a new object and initializes it with the provided language direction.
            </summary>
            <param name="srcCulture">The source culture</param>
            <param name="trgCulture">The target culture</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePair.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new object and initializes it with the provided language direction.
            </summary>
            <param name="srcCultureName">The source culture name</param>
            <param name="trgCultureName">The target culture name</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePair.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(object)"/>
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePair.Reverse">
            <summary>
            Creates a new language pair object with the reversed language direction.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePair.IsCompatible(Sdl.LanguagePlatform.Core.LanguagePair)">
            <summary>
            Checks whether a language pair is compatible to another language pair, which is the case
            if the source and target cultures of both language pairs are non-null and are pairwise
            compatible with each other (<see cref="M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible(System.Globalization.CultureInfo,System.Globalization.CultureInfo)"/>). 
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePair.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns>A hash code for this object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePair.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePair.TryParse(System.String,Sdl.LanguagePlatform.Core.LanguagePair@)">
            <summary>
            Attempts to parse a language pair represented by a string, as produced by <see cref="M:Sdl.LanguagePlatform.Core.LanguagePair.ToString"/>.
            </summary>
            <param name="s">The input string</param>
            <param name="lp">Will hold the deserialized (parsed) return value upon success, and is set to <c>null</c> otherwise.</param>
            <returns><c>true</c> if the parsing was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePair.CompareTo(Sdl.LanguagePlatform.Core.LanguagePair)">
            <summary>
            Compares the language directions, which is achieved by lexically comparing the 
            source and target culture names.
            </summary>
            <returns>A comparision result</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.LanguagePair.SourceCulture">
            <summary>
            Gets or sets the source culture
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.LanguagePair.TargetCulture">
            <summary>
            Gets or sets the target culture
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.LanguagePair.SourceCultureName">
            <summary>
            Gets or sets the source language in form of a culture code.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.LanguagePair.TargetCultureName">
            <summary>
            Gets or sets the target language in form of a culture code.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.LanguagePlatformException">
            <summary>
            Represents an error thrown by components in the language platform 
            which are not covered by a standard system exception. It also contains a 
            fault description which can be transmitted through the standard WCF fault mechanism.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePlatformException.#ctor(Sdl.LanguagePlatform.Core.FaultDescription,System.Exception)">
            <summary>
            Initializes a new instance from a system 
            exception and a specified fault description.
            </summary>
            <param name="description">The fault description.</param>
            <param name="e">The underlying system exception.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePlatformException.#ctor(Sdl.LanguagePlatform.Core.FaultDescription)">
            <summary>
            Initializes a new instance with the specified fault description.
            </summary>
            <param name="description">The fault description.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePlatformException.#ctor(Sdl.LanguagePlatform.Core.ErrorCode,Sdl.LanguagePlatform.Core.FaultStatus,System.String)">
            <summary>
            Initializes a new instance with the specified error code, fault status, and data.
            </summary>
            <param name="code">The error code to assign</param>
            <param name="status">The fault status to assign</param>
            <param name="data">Additional error data (may be null)</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePlatformException.#ctor(Sdl.LanguagePlatform.Core.ErrorCode,Sdl.LanguagePlatform.Core.FaultStatus)">
            <summary>
            Initializes a new instance with the specified error code and fault status.
            </summary>
            <param name="code">The error code to assign</param>
            <param name="status">The fault status to assign</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePlatformException.#ctor(Sdl.LanguagePlatform.Core.ErrorCode)">
            <summary>
            Initializes a new instance with the specified error code.
            </summary>
            <param name="code">The error code to assign</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.LanguagePlatformException.#ctor(Sdl.LanguagePlatform.Core.ErrorCode,System.String)">
            <summary>
            Initializes a new instance with the specified error code and data.
            </summary>
            <param name="code">The error code to assign</param>
            <param name="data">Additional error data (may be null)</param>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.LanguagePlatformException.Description">
            <summary>
            Gets the fault description.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Pair`1">
            <summary>
            Represents a pair of values of the same type.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Pair`1.Left">
            <summary>
            Gets or sets the left value.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Pair`1.Right">
            <summary>
            Gets or sets the right value.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Pair`1.#ctor">
            <summary>
            Initializes a new instance with the default values of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Pair`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Resources.ResourceStatus">
            <summary>
            Enumerates the status of a resource. The status specifies whether a requested resource can be loaded or not.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.ResourceStatus.Loaded">
            <summary>
            The resource is already loaded and will not be re-read from the underlying resource accessor.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.ResourceStatus.Loadable">
            <summary>
            The resource is available and can be loaded.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.ResourceStatus.NotAvailable">
            <summary>
            The resource is not available. An attempt to read it may result in an exception.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor">
            <summary>
            A resource data accessor provides access to language-specific resources of different types
            (see <see cref="T:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType"/> for the supported
            resource types). 
            <para>Resources are binary-stored data streams. The caller is responsible to read the data in 
            the resource-specific format and interpret it accordingly.</para>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor.GetResourceStatus(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)">
            <summary>
            Returns the resource status for the specified resource and the specified culture.
            </summary>
            <param name="culture">The culture for which the status is requested.</param>
            <param name="t">The language resource type which is requested.</param>
            <param name="fallback">If true, a resource accessor may fallback to a more general
            culture. If false, no fallback may be performed.</param>
            <returns>The resource status for the resource type and culture.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor.ReadResourceData(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)">
            <summary>
            Returns the data stream for the specified resource type and culture. If an appropriate
            resource is not found, an exception is thrown and/or null is returned. Callers should
            check for both conditions, and check the resource status before the stream is requested.
            </summary>
            <param name="culture">The culture for which a resource is requested.</param>
            <param name="t">The language resource type which is requested.</param>
            <param name="fallback">If true, a resource accessor may fallback to a more general
            culture. If false, no fallback may be performed.</param>
            <returns>A stream containing the data for the requested resource, or null if 
            the resource is not available (in which case callers may also throw an 
            exception).
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor.GetResourceData(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)">
            <summary>
            Similar to <see cref="M:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor.ReadResourceData(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)"/> but returns the result as a byte array.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor.GetSupportedCultures(Sdl.LanguagePlatform.Core.Resources.LanguageResourceType)">
            <summary>
            Returns all cultures for which resources are found for the provided resource type.
            </summary>
            <param name="t">The resource type</param>
            <returns>The list of cultures for which a resource of the specified type is available</returns>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType">
            <summary>
            Enumerates the different types of language resources.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.Undefined">
            <summary>
            The resource type is undefined. Needed for deserialization purposes, to avoid confusion with a valid type.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.Variables">
            <summary>
            The resource contains variables (non-translatable tokens).
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.Abbreviations">
            <summary>
            The resource contains abbreviations.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.OrdinalFollowers">
            <summary>
            The resource contains ordinal followers.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.SegmentationRules">
            <summary>
            The resource contains segmentation rules.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.TokenizerSettings">
            <summary>
            The resource contains tokenizer settings.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.StemmingRules">
            <summary>
            The resource contains stemming rules.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.Stopwords">
            <summary>
            The resource contains stop words (very frequent words).
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.DatePatterns">
            <summary>
            The resource contains date patterns, used for date recognition.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.TimePatterns">
            <summary>
            The resource contains time patterns, used for time recognition.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.NumberPatterns">
            <summary>
            The resource contains number patterns, used for number recognition.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.MeasurementPatterns">
            <summary>
            The resource contains measurement patterns, used for measurement recognition.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.CharTrigramVector">
            <summary>
            The resource contains normalized character trigram vectors (special, for internal use only)
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.ShortDateFST">
            <summary>
            A compiled, binary FST which recognizes short date patterns. This resource is not user-customizable.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.LongDateFST">
            <summary>
            A compiled, binary FST which recognizes long date patterns. This resource is not user-customizable.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.ShortTimeFST">
            <summary>
            A compiled, binary FST which recognizes short time patterns. This resource is not user-customizable.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.LongTimeFST">
            <summary>
            A compiled, binary FST which recognizes long time patterns. This resource is not user-customizable.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.CurrencySymbols">
            <summary>
            A word list containing additional currency symbols to be added to the measurement recognizer, 
            position depending on the culture's number pattern
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.PhysicalUnits">
            <summary>
            A word list containing additional physical units to be added to the measurement recognizer
            (postfix only)
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.NumberFST">
            <summary>
            A compiled, binary FST which recognizes numbers. This resource is not user-customizable.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.MeasurementFST">
            <summary>
            A compiled, binary FST which recognizes measurements. This resource is not user-customizable.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType.GenericRecognizers">
            <summary>
            An XML structure which defines generic recognizers which are available.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Segment">
            <summary>
            Represents a segment, which is a sequence of <see cref="T:Sdl.LanguagePlatform.Core.SegmentElement"/>s, 
            in a particular language.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.#ctor">
            <summary>
            Initializes a new instance with the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>, 
            and an empty list of elements.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance with the specified culture, and an empty list of elements.
            </summary>
            <param name="culture">The CultureInfo object representing the language.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.Equals(Sdl.LanguagePlatform.Core.Segment)">
            <summary>
            Compares this instance to another Segment object.
            </summary>
            <param name="other">The other instance.</param>
            <returns>true if the language and all the elements are the same, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.WeakEquals(Sdl.LanguagePlatform.Core.Segment)">
            <summary>
            Computes weak equality with another segment.
            <para>Weak equality does not check culture compatibility and tag anchors do not need to be
            identical, but text elements must match, as well as the order of tags (element similarity must 
            not be None)</para>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns>A hash code for this object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode">
            <summary>
            Returns a hash code which does not depend on tag anchors in the segment. This 
            can be used for translation tracking in bilingual documents.
            </summary>
            <returns>A hash code which is independent of tag anchors.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.Duplicate">
            <summary>
            Creates a new instance that is a deep copy of this instance.
            </summary>
            <returns>A new instance that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.Validate">
            <summary>
            Validates the current instance, with the <see cref="F:Sdl.LanguagePlatform.Core.Segment.ValidationMode.ReportAllErrors"/> validation mode.
            </summary>
            <returns>An error code (which may be <see cref="F:Sdl.LanguagePlatform.Core.ErrorCode.OK"/>, indicating
            the segment is valid).</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace">
            <summary>
            Determines whether the segment starts or ends with at least one whitespace character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.Validate(Sdl.LanguagePlatform.Core.Segment.ValidationMode)">
            <summary>
            Performs validation checks on this instance, applying the specified validation mode.
            </summary>
            <param name="mode">The validation mode to apply</param>
            <returns>An error code (which may be <see cref="F:Sdl.LanguagePlatform.Core.ErrorCode.OK"/>, indicating
            the segment is valid).</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.Add(Sdl.LanguagePlatform.Core.SegmentElement)">
            <summary>
            Adds the provided segment element to the segment's list of elements. When adding a text element, 
            and the last segment element is a text element as well, they will be merged. 
            </summary>
            <param name="element">The element to append</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.Add(System.String)">
            <summary>
            Adds the provided string as a new text element to the segment's list of elements. If
            the last segment element is a Text element as well, they will be merged. 
            </summary>
            <param name="text">The text to append</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.AddRange(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement})">
            <summary>
            Adds all segment elements in the collection to this segment.
            </summary>
            <param name="elements">The elements to add</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.Clear">
            <summary>
            Empties the list of segment elements.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.IsValid">
            <summary>
            Determines if this segment is valid.
            </summary>
            <returns>true if the segment is valid, false othwerwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.Trim">
            <summary>
            Removes leading whitespace from the first segment element, if that is a text element, 
            and trailing whitespace from the last segment element, if that is a text element. If the first/last
            segment element is not a text element, it will not be altered. Also, leading (trailing) whitespace 
            will not be removed from a text element if it is preceded (followed) only by non-text elements. Also
            deletes any null elements.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.TrimStart">
            <summary>
            Removes leading whitespace from the first segment element, if that is a text element. 
            If the first segment element is not a text element, nothing will happen. Hence, leading 
            whitespace will not be removed from a text element if it is preceded by non-text
            elements. The number of elements may be altered by this method. Empty (null) elements
            will also be removed.
            </summary>
            <returns>A string consisting of the trimmed-off characters, or <c>null</c> if no 
            characters have been trimmed off</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.TrimEnd">
            <summary>
            Removes trailing whitespace from the last segment element, if that is a text element. 
            If the last segment element is not a text element, nothing will happen. Hence, trailing 
            whitespace will not be removed from a text element if it is followed by non-text
            elements. The number of elements may be altered by this method. Empty (null) elements
            will also be removed.
            </summary>
            <returns>A string consisting of the trimmed-off characters, or <c>null</c> if no 
            characters have been trimmed off</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.HasTokenBundles">
            <summary>
            Returns true if any of the segment's tokens is a <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle"/> (i.e. an ambigous tokenization), 
            and false otherwise. Token bundles should only be used inside the TM Kernel and not be returned
            through the TM API.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles">
            <summary>
            Replaces token bundles with the "best" token in that bundle. Returns true if any
            replacement has been done, and false otherwise.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags">
            <summary>
            Deletes all tags from the segment which have a tag type of <see cref="F:Core.TagType.UnmatchedStart"/>
            or <see cref="F:Core.TagType.UnmatchedEnd"/>. Note that this method only tests the tag type, and 
            does not handle paired tags where the start or end tag are missing.
            </summary>
            <returns><c>true</c> if the segment was modified, and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)">
            <summary>
            Deletes all tags from the segment which have a tag type of <see cref="F:Core.TagType.UnmatchedStart"/>
            or <see cref="F:Core.TagType.UnmatchedEnd"/>, if these tags occur in peripheral positions, which means
            that dangling end tags are only removed if they appear at the start of the segment, and dangling start
            tags are only removed if they appear at the end of the segment, with no other tags or text preceding the
            tag (in case of segment-initial dangling end tags), or following the tag (for segment-trailing dangling 
            start tags).
            <para>
            Note that this method only tests the tag type, and 
            does not handle paired tags where the start or end tag are missing.
            </para>
            </summary>
            <returns><c>true</c> if the segment was modified, and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags">
            <summary>
            Determines whether the segment has any unmatched start or end tags. Note that this 
            method only tests the tag type, and does not handle paired tags where the start or 
            end tag are missing.
            </summary>
            <returns><c>true</c> if the segment contains any unmatched start or end tags, 
            and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags">
            <summary>
            Inserts corresponding start and end tags for unmatched end and start tags to the segment. 
            For unmatched end tags, the corresponding start tags are inserted at the beginning of the 
            segment. Corresponding end tags for unmatched start tags are added at the end. In certain
            cases, not all dangling tags can be filled, and in order to obtain a valid segment without
            any unmatched tags, <see cref="M:Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)"/> should be called after
            calling this method. Note that only the tag type is checked, not whether there are 
            start or end tags without a corresponding tag having the same tag anchor.
            <para>The method will discontinue if the tag pairing structure is incorrect (i.e. if there
            are overlapping tags).</para>
            </summary>
            <returns><c>true</c> if the segment was modified, and <c>false</c> otherwise. Note that
            after calling this method, there may still be unmatched start or end tags in the
            segment.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.TrimElement(Sdl.LanguagePlatform.Core.Text,System.Boolean,System.String@)">
            <summary>
            Trim a text element (remove trailing or leading whitespace).
            </summary>
            <param name="t">The text element. If null, nothing will be done.</param>
            <param name="trailing">If true, remove trailing whitespace. Otherwise, remove leading whitespace.</param>
            <param name="trimmed">The trimmed result string, if applicable</param>
            <returns>True if the text element is empty after trimming and can be removed from the elements collection.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.ToPlain">
            <summary>
            Returns a string containing only the plain text in this segment. Note that
            text placeholders will be replaced with their text equivalent.
            </summary>
            <returns>A string containing only the plain text in this segment.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Boolean,System.Boolean,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}@)">
            <summary>
            Computes the plain-text version of the segment and returns, in the ranges list, 
            the segment range of each character of the result string. The number of elements
            in that collection will be equal to the length of the string in characters.
            </summary>
            <param name="tolower">If true, the returned string will be lower-cased</param>
            <param name="tobase">If true, all letters will be mapped to their base character (i.e.
            diacritics will be stripped)</param>
            <param name="ranges">A reference to the list of segment ranges which will be returned 
            upon completion. The list includes, for each character in the result string, the 
            position in the original segment.</param>
            <returns></returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.ToPlain(Sdl.LanguagePlatform.Core.SegmentRange)">
            <summary>
            Computes the plain-text version of the part of the segment specified by the provided range.
            </summary>
            <param name="range">The range of the segment to convert</param>
            <returns>The plain-text string corresponding to the provided range.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.GetTokenIndex(Sdl.LanguagePlatform.Core.SegmentPosition)">
            <summary>
            Returns the index of the token at the specified position.
            </summary>
            <returns>The index of the token at the specified position, or -1 if it is not found, 
            or if the segment is not tokenized.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns">
            <summary>
            Merges adjacent text runs.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans">
            <summary>
            Verifies whether the spans of the segment's tokens are correct and reflect the segment's text.
            Note that the segment should be tokenized. If not, true is returned.
            </summary>
            <returns>true if the verification was successful or the segment is not tokenized, 
            and false otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Int32,System.Int32)">
            <summary>
            Returns a string containing only the plain text in this segment, covering the given token range.
            An exception will be thrown if the segment's tokens are not set or the token range is outside the
            bounds.
            </summary>
            <param name="fromToken">The index of the first token</param>
            <param name="intoToken">The index of the last token (inclusive, i.e. "into" semantics)</param>
            <returns>A plain text string covering the specified token range</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.DeleteTags">
            <summary>
            Removes all tags from the segment, applying the <see cref="F:Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.DeleteAll"/> tag
            deletion mode.
            </summary>
            <returns><c>true</c> if any tags were deleted, and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.DeleteTags(Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction)">
            <summary>
            Removes all tags from the segment, applying the specified tag deletion mode.
            </summary>
            <param name="mode">The tag deletion mode</param>
            <returns><c>true</c> if any tags were deleted, and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags">
            <summary>
            Sets the anchor for any tags which are not yet anchored (including standalone/placeholder tags).
            Does not modify tag IDs or alignment anchors.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor">
            <summary>
            Returns the highest tag anchor used in the segment, or 0 if no tags are present.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.FindTag(Sdl.LanguagePlatform.Core.TagType,System.Int32)">
            <summary>
            Finds and returns the tag with the provided type and the provided tag anchor, or null
            if no such tag exists in the segment.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor(System.Int32@,System.Int32@)">
            <summary>
            Returns the smallest and largest tag anchor used in the segment. Both default to 0.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs(System.Boolean)">
            <summary>
            Deletes empty tag pairs (a start tag directly followed by the end tag with the same
            tag anchor) from the segment.
            </summary>
            <param name="onlyInPeripheralPositions">If true, will delete empty tag pairs only if they appear in peripheral positions (leading, trailing).</param>
            <returns>true if any tags were deleted, and false otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32@)">
            <summary>
            Renumbers tag anchors so that they start at 1 and are consecutive. Although tag anchors
            have no semantics for standalone tags, they are also anchored in the same manner. Errors
            in tag numbering will be ignored (but preserved, i.e. invalid tag anchors will be mapped to 
            potentially new, also invalid tag anchors).
            </summary>
            <returns>true if the any anchors were reassigned, and false otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32,System.Int32@)">
            <summary>
            Renumbers tag anchors, starting at nextTagAnchor, in a consecutive manner. Although tag anchors
            have no semantics for standalone tags, they are also anchored in the same manner. Errors
            in tag numbering will be ignored (but preserved, i.e. invalid tag anchors will be mapped to 
            potentially new, also invalid tag anchors).
            </summary>
            <param name="nextTagAnchor">The first anchor to assign (must be larger than zero)</param>
            <param name="maxAlignmentAnchor">Returns the highest alignment anchor in the renumbered segment.</param>
            <returns>true if the any anchors were reassigned, and false otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Updates the segment's text from the tokens, and adjusts span indices accordingly. An exception
            is thrown if the segment is not tokenized.
            </summary>
            <param name="tokenIndices">The list of tokens to update.</param>
            <returns>true if the segment was changed, and false otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.GetTagPairings">
            <summary>
            Returns a dictionary of paired tag token indices, mapping from the start tag's
            token index to the end tag's token index. The segment must be tokenized, or an 
            exception is thrown.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.GetTagCount">
            <summary>
            Returns the number of tags in the segment. Paired tags are counted only once.
            </summary>
            <returns>The segment's tag count</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.GetTagIDGroups">
            <summary>
            Computes a mapping from the start tag token index to that tag's tag ID. Only
            start and standalone/placeholder tags are included in the mapping. The mapping may be n:1.
            The segment must be tokenized, or an exception is thrown.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segment.UpdateFromToken(Sdl.LanguagePlatform.Core.Tokenization.Token)">
            <summary>
            Updates the segment's text from the token, and adjusts span indices accordingly.
            </summary>
            <param name="t">The token to update - its current text is injected into the segment's text.</param>
            <returns>true if the segment was changed, and false otherwise.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segment.IsEmpty">
            <summary>
            Gets a value indicating whether this instance contains any elements (false) or not (true).
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segment.Elements">
            <summary>
            Gets or sets the collection of elements in this segment.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segment.LastElement">
            <summary>
            Gets or sets the last element of this segment.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segment.Tokens">
            <summary>
            Gets or sets the collection of tokens in this segment. 
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segment.HasPlaceables">
            <summary>
            Gets a bool value which indicates whether this segment contains any placeables. Note
            that the return value is only valid if the segment is tokenized. 
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segment.HasTags">
            <summary>
            Gets a value which indicates whether this segment contains any tags. 
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segment.HasPairedTags">
            <summary>
            Gets a value which indicates whether this segment contains any paired tags. Only start tags are
            checked, it is assumed that the tag structure is valid.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segment.CultureName">
            <summary>
            Gets or sets the culture name for this segment. The culture name must be
            resolvable through <see cref="M:CultureInfoExtensions.GetCultureInfo(string)"/>, or
            an exception will be thrown.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segment.Culture">
            <summary>
            Gets or sets the culture for this segment.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction">
            <summary>
            Enumerates the different ways how text placeholders should be handled when removing tags from 
            a segment. Since this is a [Flags] enum, variables of this type may use a combination of values.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.DeleteNone">
            <summary>
            Do not delete any tags
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.DeleteTextPlaceholders">
            <summary>
            Delete text placeholders
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.DeleteStandaloneTags">
            <summary>
            Delete standalone tags
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.DeletePairedTags">
            <summary>
            Delete paired tags
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.DeleteAll">
            <summary>
            Combined Value: Delete all tags, including text placeholders and standalone tags
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.KeepTextPlaceholders">
            <summary>
            Combined Value: delete standalone and paired tags
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Segment.ValidationMode">
            <summary>
            Determines the type of validation to perform in <see cref="M:Segment.Validate(ValidationMode)"/>. 
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segment.ValidationMode.ReportAllErrors">
            <summary>
            Report all errors.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segment.ValidationMode.IgnorePairedTagErrors">
            <summary>
            Ignore errors caused by paired tags. Errors caused by standalone or placeholder tags
            will still be reported.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Segmentation.Context">
            <summary>
            Describes the context of a pre-break or post-break segmentation rule. The context
            encapsulates a regular expression pattern as well as match flags.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor">
            <summary>
            Initializes a new instance with default values.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="pattern">The regular expression pattern to initialize the context with.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(Sdl.LanguagePlatform.Core.Segmentation.Context)">
            <summary>
            Initializes a new instance with the values of another instance, creating a deep copy.
            </summary>
            <param name="other">The other instance</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="pattern">The regular expression pattern</param>
            <param name="caseInsensitive">Whether or not to apply case-insensitive matching</param>
            <param name="matchesInputBoundary">Whether or not the context will match at the input
            boundary (beginning or end of string/file)</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Tests whether the context matches at the specified position. A pre-break context
            must match up to the position (not including), and a post-break context must match from that 
            position onwards. If true, a match is postulated directly before position.
            </summary>
            <param name="s">The input string to test</param>
            <param name="position">The position in the input to test for a match</param>
            <param name="assumeEOF">If true, it is assumed that the end of input has been reached, and 
            end-of-input constraints will match. If false, any end-of-input constraints will not match.
            </param>
            <param name="followedByWordBreak">If true, any end-of-word constraints will match. If false,
            no end-of-word constraints will match.</param>
            <returns>true iff the context at the specified position.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto(System.String,System.Int32)">
            <summary>
            MatchesUpto tests whether the context matches the input up to, but not including, 
            the specified position (which may be >= the string's length).
            </summary>
            <param name="s">The string to test for a match</param>
            <param name="position">The position upto which to test for a match (non-inclusive).
            </param>
            <returns>true iff the context matches the input string up to (not including) 
            the specified position.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches(System.String,System.Int32)">
            <summary>
            Computes and returns all matches of the context in the specified input string.
            </summary>
            <param name="s">The input string</param>
            <param name="startOffset">The zero-based start index where to start the match process.</param>
            <returns>A list of matches where the context matches the input string, or <c>null</c>
            if no matches can be found.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.Context.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.Context.Clone">
            <summary>
            <see cref="M:System.ICloneable.Clone"/>
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching">
            <summary>
            If CaseInsensitiveMatching is true, all matching will be performed in a case-insensitive
            manner, provided that the used contexts support this. The default should be false.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary">
            <summary>
            If MatchesInputBoundary is true, MatchesFrom() will return true if the specified position
            is beyond the input's length. 
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern">
            <summary>
            Gets or sets the regular expression pattern.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString">
            <summary>
            Represents a collection of culture-annotated strings.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor">
            <summary>
            Initializes a new instance with default values.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor(Sdl.LanguagePlatform.Core.Segmentation.LocalizedString)">
            <summary>
            Initializes a new instance with the values of another instance, creating a deep copy.
            </summary>
            <param name="other">The other instance</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor(System.String)">
            <summary>
            Creates a new instance with the InvariantText set to the provided text.
            </summary>
            <param name="text">The text to use for the invariant culture</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText(System.Globalization.CultureInfo)">
            <summary>
            Returns the text compatible with the provided culture.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Returns the text for the provided culture.
            </summary>
            <param name="culture">The culture (non-null)</param>
            <param name="mayFallback">If false, the culture of the text and the provided
            culture must match exactly. Otherwise, it is sufficient if the cultures are 
            compatible. If an exact match for the culture is available, it will still 
            be preferred.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Add(System.Object)">
            <summary>
            Only used for XML deserialization.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText(System.Globalization.CultureInfo,System.String)">
            <summary>
            Sets (adds or overwrites) the text compatible with the provided culture.
            </summary>
            <param name="culture">The culture (non-null)</param>
            <param name="text">The text</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText(System.Globalization.CultureInfo,System.String,System.Boolean)">
            <summary>
            Sets the text for the provided culture.
            </summary>
            <param name="culture">The culture (non-null)</param>
            <param name="text">The text</param>
            <param name="mayFallback">If false, the culture of the text and the provided
            culture must match exactly. Otherwise, it is sufficient if the cultures are 
            compatible. If an exact match for the culture is available, it will still 
            be preferred.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText(System.Globalization.CultureInfo)">
            <summary>
            Deletes the text compatible with the provided culture.
            </summary>
            <param name="culture">The culture</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Deletes the text for the provided culture.
            </summary>
            <param name="culture">The culture</param>
            <param name="mayFallback">If false, the culture of the text and the provided
            culture must match exactly. Otherwise, it is sufficient if the cultures are 
            compatible. If an exact match for the culture is available, it will still 
            be preferred.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetEnumerator">
            <summary>
            Returns an enumerator which is used to enumerate the encapsulated culture-annotated strings. 
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Clone">
            <summary>
            <see cref="M:System.ICloneable.Clone"/>
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Text">
            <summary>
            Accesses the localized text which is compatible with the current UI culture.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.InvariantText">
            <summary>
            Accesses the localized text which is compatible with the invariant culture.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Count">
            <summary>
            Returns the number of localized versions of the string.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext">
            <summary>
            <para>A segmentation context consists of a context which should precede the match, and 
            a context which should follow a match. For performance reasons, it may also contain
            a list of trigger characters which, if specified, are used to determine whether a 
            specific context is probed for matching or not. 
            </para>
            <para>
            A null context matches every position. Therefore, if the preceding context is null, 
            the segmentation context matches at each position which is not excluded by the 
            following context. If the following context is also null, the segmentation context
            will match everywhere in the input string.
            </para>
            <para>
            If the trigger characters are specified, they should consist of all characters which
            may appear at the end of the preceding context. If the trigger characters are specified, 
            but the preceding context is null, the rule will only be tested for those positions in 
            the string where one of the trigger characters is found. In that case, as the preceding 
            context is null, the rule will "fire" at each of the positions of any trigger character.
            </para>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor">
            <summary>
            Initializes a new instance with default values. This constructor is required for
            XML deserialization and should not be used directly.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)">
            <summary>
            Initializes a new instance with the values of another instance, creating a deep copy.
            </summary>
            <param name="other">The other instance</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(System.String,System.String,Sdl.LanguagePlatform.Core.Segmentation.Context,Sdl.LanguagePlatform.Core.Segmentation.Context)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="description">A description of the context, for UI purposes.</param>
            <param name="triggerChars">If specified, a string which contains the characters which
            can occur at the start of a matching text. If the current start character is not in this
            list, no match will be computed, which may improve performance. If <c>null</c>, the 
            match computation will take place as usual.</param>
            <param name="precedingContext">The pre-break context</param>
            <param name="followingContext">The post-break context</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Tests whether the context matches at the specified position. The preceding context, if specified,
            must match up to the position (not including), and the following context must match from that 
            position onwards. If true, a match is postulated directly before position.
            </summary>
            <param name="input">The input string to test</param>
            <param name="position">The position in the input to test for a match</param>
            <param name="assumeEOF">If true, it is assumed that the end of input has been reached, and 
            end-of-input constraints will match. If false, any end-of-input constraints will not match.
            </param>
            <param name="followedByWordBreak">If true, any end-of-word constraints will match. If false,
            no end-of-word constraints will match.</param>
            <returns>true iff the preceding context matches up to the specified position (non-inclusive), 
            and the following context matches from that position onwards.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Finds all matches of the context in the input string, starting at the specified position.
            </summary>
            <param name="input">The input string to test</param>
            <param name="startOffset">The zero-based position in the input to start the match process from</param>
            <param name="assumeEOF">If true, it is assumed that the end of input has been reached, and 
            end-of-input constraints will match at the end of the input string. If false, any end-of-input constraints will not match.
            </param>
            <param name="followedByWordBreak">If true, any end-of-word constraints will match at the end of the input string. If false,
            no end-of-word constraints will match.</param>
            <returns>A list of positions where the context matches in the input string</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone">
            <summary>
            <see cref="M:System.ICloneable.Clone"/>
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description">
            <summary>
            Gets or sets the description of this context.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires">
            <summary>
            Gets or sets the name of a language resource required for this match context to be
            valid. If, at runtime, the required resource cannot be obtained, the match context
            is invalid and will never be evaluated.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType">
            <summary>
            Gets or sets the context type.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars">
            <summary>
            <para>The characters which trigger this rule. The trigger chars are used to optimize
            rule evaluation and to avoid more expensive tests (such as regex matches) against
            the input. If null, the contexts will be checked nevertheless.
            </para>
            <para>
            If you specify trigger characters, you must take care. For example, if a context 
            has optional trailing parts (as in "\.\p{Pe}*" for a full stop followed by an optionally
            empty sequence of closing punctuation), specifying a trigger character "."
            will prevent the context from matching any trailing closing punctuation. In this
            case, you should specify all possible trailing characters.
            </para>
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext">
            <summary>
            The break context which directly precedes the break. The preceding context 
            typically ends with one or more of the trigger chars. If null, the context
            matches any position.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext">
            <summary>
            The break context which directly follows the break. The following context
            usually contains any post-break whitespace in the pattern. If null, the
            context "matches" any position.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled">
            <summary>
            Gets or sets a flag to control whether this context is currently enabled. Note that not
            all clients evaluate this flag yet, and all contexts (whether enabled or not) may be used
            during segmentation.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Segmentation.RuleType">
            <summary>
            The type of a segmentation rule
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.RuleType.Unknown">
            <summary>
            Unknown rule type
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.RuleType.FullStopRule">
            <summary>
            A rule to handle full stops
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.RuleType.MarksRule">
            <summary>
            A rule to handle question and exclamation marks
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.RuleType.ColonRule">
            <summary>
            A rule to handle colons
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.RuleType.SemicolonRule">
            <summary>
            A rule to handle semicolons
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.RuleType.CombinedRule">
            <summary>
            A combined rule for handling multiple break characters, typically for far-east languages
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.RuleType.Other">
            <summary>
            A rule for other break characters
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin">
            <summary>
            The rule origin
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin.Unknown">
            <summary>
            Unknown rule origin
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin.System">
            <summary>
            A system/default rule
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin.Migration">
            <summary>
            A rule generated through rule migration
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin.User">
            <summary>
            A user-defined rule
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin.Other">
            <summary>
            Origin is other
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Segmentation.ContextType">
            <summary>
            The type of a break context
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.ContextType.Unknown">
            <summary>
            Break context type is unknown
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.ContextType.MatchContext">
            <summary>
            Break context is a match context
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.ContextType.AbbreviationException">
            <summary>
            Break context is an exception for abbreviations
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.ContextType.OrdinalFollowerException">
            <summary>
            Break context is an exception for ordinal followers
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.ContextType.LowercaseFollowerException">
            <summary>
            Break context is an exception for lower-case followers
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.ContextType.OtherException">
            <summary>
            Break context is an exception for something else
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Segmentation.ContextType.Other">
            <summary>
            Other break context
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule">
            <summary>
            <para>
            A segmentation rule consist of at least one "positive" SegmentationContext (the matching
            context) and a possibly empty set of exceptions. 
            </para>
            <para>
            A segmentation rule "fires" if the matching context matches a specified position, and either
            the exception list is empty or none of the exceptions matches the same position in the input.
            </para>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor">
            <summary>
            Initializes a new instance with default values. This constructor is required for
            XML deserialization and should not be used directly.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)">
            <summary>
            Initializes a new instance with the values of another instance, creating a deep copy.
            </summary>
            <param name="other">The other instance</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="description">A description of the rule, for display purposes.</param>
            <param name="matchingContext">The matching context for this segmentation rule.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext})">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="description">A description of the rule, for display purposes.</param>
            <param name="matchingContext">The matching context for this segmentation rule.</param>
            <param name="exceptions">A list of exceptions to attach to the matching context (optional)</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)">
            <summary>
            Adds the provided exception to the list of exceptions.
            </summary>
            <param name="context">The exception to add to the rule (non-null)</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Tests whether the context matches at the specified position. The preceding context, if specified,
            must match up to the position (not including), and the following context must match from that 
            position onwards. If true, a match is postulated directly before position.
            </summary>
            <param name="input">The input string to test</param>
            <param name="position">The position in the input to test for a match</param>
            <param name="assumeEOF">If true, it is assumed that the end of input has been reached, and 
            end-of-input constraints will match. If false, any end-of-input constraints will not match.
            </param>
            <param name="followedByWordBreak">If true, any end-of-word constraints will match. If false,
            no end-of-word constraints will match.</param>
            <returns>true iff the preceding context matches up to the specified position (non-inclusive), 
            and the following context matches from that position onwards.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Finds the first matche of the rule in the input string, starting at the specified position.
            </summary>
            <param name="input">The input string to test</param>
            <param name="startOffset">The zero-based position in the input to start the match process from</param>
            <param name="assumeEOF">If true, it is assumed that the end of input has been reached, and 
            end-of-input constraints will match at the end of the input string. If false, any end-of-input constraints will not match.
            </param>
            <param name="followedByWordBreak">If true, any end-of-word constraints will match at the end of the input string. If false,
            no end-of-word constraints will match.</param>
            <returns>The first position in the input where the rule matches, or <c>-1</c> if no match was found.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone">
            <summary>
            <see cref="M:System.ICloneable.Clone"/>
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled">
            <summary>
            Gets or sets a flag to control whether this rule is currently enabled. Note that not
            all clients evaluate this flag yet, and all rules (whether enabled or not) may be used
            during segmentation.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars">
            <summary>
            The minimum number of chars a segment must have. 
            <para>Currently not yet supported</para>
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords">
            <summary>
            The minimum number of words a segment must have. 
            <para>Currently not yet supported</para>
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type">
            <summary>
            Gets or sets the rule type, which is used for display purposes. This value must match
            the rule's break character and should not be modified after a rule has been created or
            obtained.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin">
            <summary>
            Gets or sets the origin of this rule. This is used for display and system purposes. The
            value should not be modified after a rule has been created or obtained.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description">
            <summary>
            Gets or sets the description of this rule.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext">
            <summary>
            Gets or sets the matching context for this rule (non-null).
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions">
            <summary>
            Gets or sets the exceptions for this rule.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules">
            <summary>
            A collection of segmentation rules.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)">
            <summary>
            Load segmentation rules from a file. The resource data accessor is used to resolve
            any variable references which may be present in the rules.
            </summary>
            <param name="fileName">The name of the file to load the rules from</param>
            <param name="cultureOverride">If provided, the specified culture will be 
            used to retrieve any missing language resources and will be put into the 
            result object.</param>
            <param name="accessor">The resource data accessor to use to resolve variable references</param>
            <returns>A fully initialized SegmentationRules object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)">
            <summary>
            Load segmentation rules from a file. The resource data accessor is used to resolve
            any variable references which may be present in the rules.
            </summary>
            <param name="fileName">The name of the file to load the rules from</param>
            <param name="cultureOverride">If provided, the specified culture will be 
            used to retrieve any missing language resources and will be put into the 
            result object.</param>
            <param name="accessor">The resource data accessor to use to resolve variable references</param>
            <param name="keepListReferences">If true, list references will not be resolved. The resulting
            rule set will not be functional and should not be used for segmentation, only for editing, 
            display, or copying between resource containers.</param>
            <returns>A fully initialized SegmentationRules object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)">
            <summary>
            Load segmentation rules from a stream. The resource data accessor is used to resolve
            any variable references which may be present in the rules.
            </summary>
            <param name="reader">The stream to load the rules from</param>
            <param name="cultureOverride">If provided, the specified culture will be 
            used to retrieve any missing language resources and will be put into the 
            result object.</param>
            <param name="accessor">The resource data accessor to use to resolve variable references</param>
            <returns>A fully initialized SegmentationRules object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)">
            <summary>
            Load segmentation rules from a stream. The resource data accessor is used to resolve
            any variable references which may be present in the rules.
            </summary>
            <param name="reader">The stream to load the rules from</param>
            <param name="cultureOverride">If provided, the specified culture will be 
            used to retrieve any missing language resources and will be put into the 
            result object.</param>
            <param name="accessor">The resource data accessor to use to resolve variable references</param>
            <param name="keepListReferences">If true, list references will not be resolved. The resulting
            rule set will not be functional and should not be used for segmentation, only for editing, 
            display, or copying between resource containers.</param>
            <returns>A fully initialized SegmentationRules object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)">
            <summary>
            Load segmentation rules from a file. The resource data accessor is used to resolve
            any variable references which may be present in the rules.
            </summary>
            <param name="fileName">The name of the file to load the rules from</param>
            <param name="cultureOverride">If provided, the specified culture will be 
            used to retrieve any missing language resources and will be put into the 
            result object.</param>
            <param name="accessor">The resource data accessor to use to resolve variable references</param>
            <returns>A fully initialized SegmentationRules object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)">
            <summary>
            Load segmentation rules from a file. The resource data accessor is used to resolve
            any variable references which may be present in the rules.
            </summary>
            <param name="fileName">The name of the file to load the rules from</param>
            <param name="cultureOverride">If provided, the specified culture will be 
            used to retrieve any missing language resources and will be put into the 
            result object.</param>
            <param name="accessor">The resource data accessor to use to resolve variable references</param>
            <param name="keepListReferences">If true, list references will not be resolved. The resulting
            rule set will not be functional and should not be used for segmentation, only for editing, 
            display, or copying between resource containers.</param>
            <returns>A fully initialized SegmentationRules object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)">
            <summary>
            Load segmentation rules from a stream. The resource data accessor is used to resolve
            any variable references which may be present in the rules.
            </summary>
            <param name="reader">The stream to load the rules from</param>
            <param name="cultureOverride">If provided, the specified culture will be 
            used to retrieve any missing language resources and will be put into the 
            result object.</param>
            <param name="accessor">The resource data accessor to use to resolve variable references</param>
            <returns>A fully initialized SegmentationRules object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)">
            <summary>
            Load segmentation rules from a stream. The resource data accessor is used to resolve
            any variable references which may be present in the rules.
            </summary>
            <param name="reader">The stream to load the rules from</param>
            <param name="cultureOverride">If provided, the specified culture will be 
            used to retrieve any missing language resources and will be put into the 
            result object.</param>
            <param name="accessor">The resource data accessor to use to resolve variable references</param>
            <param name="keepListReferences">If true, list references will not be resolved. The resulting
            rule set will not be functional and should not be used for segmentation, only for editing, 
            display, or copying between resource containers.</param>
            <returns>A fully initialized SegmentationRules object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)">
            <summary>
            Load segmentation rules from a stream. The resource data accessor is used to resolve
            any variable references which may be present in the rules. The data is assumed to be
            serialized by a <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>.
            </summary>
            <param name="reader">The stream to load the rules from</param>
            <param name="cultureOverride">If provided, the specified culture will be 
            used to retrieve any missing language resources and will be put into the 
            result object.</param>
            <param name="accessor">The resource data accessor to use to resolve variable references</param>
            <param name="keepListReferences">If true, list references will not be resolved. The resulting
            rule set will not be functional and should not be used for segmentation, only for editing, 
            display, or copying between resource containers.</param>
            <returns>A fully initialized SegmentationRules object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)">
            <summary>
            Load segmentation rules from a stream. The resource data accessor is used to resolve
            any variable references which may be present in the rules. The data is assumed to be
            serialized by a <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>.
            </summary>
            <param name="reader">The stream to load the rules from</param>
            <param name="cultureOverride">If provided, the specified culture will be 
            used to retrieve any missing language resources and will be put into the 
            result object.</param>
            <param name="accessor">The resource data accessor to use to resolve variable references</param>
            <param name="keepListReferences">If true, list references will not be resolved. The resulting
            rule set will not be functional and should not be used for segmentation, only for editing, 
            display, or copying between resource containers.</param>
            <returns>A fully initialized SegmentationRules object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor">
            <summary>
            Initializes a new instance with default values. This constructor is required for
            XML deserialization and should not be used directly.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules)">
            <summary>
            Initializes a new instance with the values of another instance, creating a deep copy.
            </summary>
            <param name="other">The other instance</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor(System.Globalization.CultureInfo,System.String)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="culture">The culture for which to apply this segmentation rule set. This
            culture is also used to retrieve additional language resources, if required.</param>
            <param name="description">A description for this segmentation rules set.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="cultureName">The culture for which to apply this segmentation rule set. This
            culture is also used to retrieve additional language resources, if required.</param>
            <param name="description">A description for this segmentation rules set.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules,System.IO.Stream)">
            <summary>
            Saves the rules to a stream.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(System.String)">
            <summary>
            Saves a segmentation rules object to a file.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(System.IO.Stream)">
            <summary>
            Saves a segmentation rules object to a stream.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SaveUsingDataContractSerializer(System.IO.Stream)">
            <summary>
            Saves a segmentation rules object to a stream, using a 
            <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.AddRule(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)">
            <summary>
            Adds the specified rule to the rule set (non-null).
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Add(System.Object)">
            <summary>
            Adds the specified object, which must be a non-null <see cref="T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule"/>, to the list of 
            rules. This method is for XML deserialization only and should not be used. 
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.GetEnumerator">
            <summary>
            Returns an enumerator which can be used to iterate through the segmentation rules.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Clone">
            <summary>
            <see cref="M:System.ICloneable.Clone"/>
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Description">
            <summary>
            Gets or sets the description of this rule set.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Count">
            <summary>
            Gets the number of rules in this rule set.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ListReferencesResolved">
            <summary>
            Returns a flag which indicates whether references to externally stored word lists
            (abbreviations, ordinal followers, ...) have been resolved during Load or not. If not, the rule
            set should not be used for segmentation, only for display, editing, serialization, or
            copying across resource containers.
            <para>Note that if the rule set does not refer to external lists, this flag will still be
            set to true if the resolution has been attempted. 
            </para>
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Rules">
            <summary>
            Gets or sets the rules for this rule set.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Item(System.Int32)">
            <summary>
            Gets the segmentation rule at the specified zero-based position.
            </summary>
            <param name="index">The zero-based index</param>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Culture">
            <summary>
            Gets the culture for which to apply this segmentation rule set.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.CultureName">
            <summary>
            Gets or sets the name of the culture to which to apply this segmentation rules. This 
            property is primarily intended for XML deserialization and should not be used directly.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.SegmentElement">
            <summary>
            Base abstract class representing a segment element. A <see cref="T:Sdl.LanguagePlatform.Core.Segment"/> consists of a
            sequence of segment elements.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentElement.Duplicate">
            <summary>
            Creates a new instance that is a deep copy of this instance.
            </summary>
            <returns>A new instance that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)">
            <summary>
            Computes the degree of similarity to another instance.
            </summary>
            <param name="other">The other instance.</param>
            <returns>A value indicating the degree of similarity to the provided segment element.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentElement.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)">
            <summary>
            Visitor pattern implementation. Derived classes should call back on the
            appropriate method on the visitor.
            </summary>
            <param name="visitor">The visitor instance (must not be <c>null</c>)</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentElement.GetWeakHashCode">
            <summary>
            Returns a hash code which does not depend on tag anchors in the segment. This 
            can be used for translation tracking in bilingual scenarios.
            </summary>
            <returns>A hash code which is independent of tag anchors.</returns>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.SegmentElement.Similarity">
            <summary>
            A similarity level between segment elements.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.SegmentElement.Similarity.None">
            <summary>
            The items are not similar to each other
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.SegmentElement.Similarity.IdenticalType">
            <summary>
            The items are of the same type (e.g. numbers), but their value differs
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.SegmentElement.Similarity.IdenticalValueAndType">
            <summary>
            The items are of the same type (e.g. numbers), and their value is identical or near-identical
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.SegmentPosition">
            <summary>
            Represents a position within a segment.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentPosition.#ctor">
            <summary>
            Initializes a new instance with default values.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance with the specified arguments.
            </summary>
            <param name="runIndex">The index of the segment element within the segment.</param>
            <param name="positionInRun">The position within the run. This is only 
            relevant for <see cref="T:Sdl.LanguagePlatform.Core.Text"/> elements, and has no effect for other segment
            element types.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentPosition.Duplicate">
            <summary>
            Creates a new instance that is a deep copy of this instance.
            </summary>
            <returns>A new instance that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentPosition.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(object)"/>
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentPosition.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns>A hash code for this object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentPosition.Compare(Sdl.LanguagePlatform.Core.SegmentPosition,Sdl.LanguagePlatform.Core.SegmentPosition)">
            <summary>
            Compares two segment positions and returns an indication of their sort order.
            </summary>
            <param name="a">The first of the two items to compare.</param>
            <param name="b">The second of the two items to compare.</param>
            <returns>An int value less than zero if a precedes b, zero if a denotes the same position as b, and greater than zero if a follows b.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentPosition.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.SegmentPosition.Index">
            <summary>
            Gets or sets the index of the run (segment element) within the segment.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.SegmentPosition.Position">
            <summary>
            Gets or sets the position within the subsegment. The value is ignored if the 
            indicated segment run is not a <see cref="T:Sdl.LanguagePlatform.Core.Text"/> run.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.SegmentRange">
            <summary>
            Represents the range of a segment, indicated by two specified positions. The 
            segment positions are inclusive ("into" semantics).
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentRange.#ctor">
            <summary>
            Initializes a new instance with default values.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentRange.#ctor(Sdl.LanguagePlatform.Core.SegmentPosition,Sdl.LanguagePlatform.Core.SegmentPosition)">
            <summary>
            Initializes a new instance with the provided positions. No checks are performed
            to verify that the start position precedes the end position.
            </summary>
            <param name="from">The start position.</param>
            <param name="into">The end position.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentRange.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of with the given parameters.
            </summary>
            <param name="run">The segment element index (run) of the range.</param>
            <param name="from">The start position in the run.</param>
            <param name="into">The end position (inclusive) in the run.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentRange.Duplicate">
            <summary>
            Creates a new instance that is a deep copy of this instance.
            </summary>
            <returns>A new instance that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentRange.OverlapsWith(Sdl.LanguagePlatform.Core.SegmentRange)">
            <summary>
            Tests whether this segment range overlaps with another range.
            </summary>
            <returns>true if the two ranges overlap, and false otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentRange.Contains(Sdl.LanguagePlatform.Core.SegmentRange)">
            <summary>
            Tests whether the other range is entirely included in this range (peripheral positions may be identical).
            </summary>
            <returns>true if <paramref name="other"/> is entirely "within" this segment range, and false otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentRange.IsInside(Sdl.LanguagePlatform.Core.SegmentPosition)">
            <summary>
            Tests whether the segment position <paramref name="p"/> is inside this range.
            </summary>
            <param name="p">The segment position to test</param>
            <returns><c>true</c> if <paramref name="p"/> is "inside" this range, and false
            otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentRange.Compare(Sdl.LanguagePlatform.Core.SegmentRange,Sdl.LanguagePlatform.Core.SegmentRange)">
            <summary>
            Compares two segment ranges and returns a value indicating their order.
            </summary>
            <param name="a">The first of the two items to compare.</param>
            <param name="b">The second of the two items to compare.</param>
            <returns>An integer value less than zero if a precedes b, zero if a and b are in the same range, 
            and a value greater than zero if a follows b. Only the start positions are compared.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentRange.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentRange.Equals(Sdl.LanguagePlatform.Core.SegmentRange)">
            <summary>
            Compares the current range to another segment range.
            </summary>
            <param name="other">The range to compare with.</param>
            <returns>true if both ranges are identical.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentRange.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(object)"/>
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.SegmentRange.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode(object)"/>
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.SegmentRange.From">
            <summary>
            Gets or sets the start position.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.SegmentRange.Into">
            <summary>
            Gets or sets the end position.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.SegmentRange.Length">
            <summary>
            Gets the length of this range if start and end positions are in the same text run, 
            and <c>-1</c> otherwise.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Serialization.LinguaDeserializer">
            <summary>
            Class that constructs Core.Segments from serialized string content
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Serialization.LinguaDeserializer.GetSegmentFromString(System.String)">
            <summary>
            Constructs a Core.Segment from string parameter
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Serialization.SerializationToken">
            <summary>
            abstract reprezentation of a segment elements
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Serialization.SerializationToken.ToString">
            <summary>
            Return type as string or text value if text token
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Serialization.SerializationToken.TokenType">
            <summary>
            The type of segmentElement
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Serialization.SerializationToken.Text">
            <summary>
            String value present for Text and Placeholder tokens
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Serialization.TokenEnumerator">
            <summary>
            Class that holds the Core.Segment abstract structure
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Serialization.TokenEnumerator.#ctor(System.String)">
            <summary>
            Generates the segment abstract elements based on serialized string
            </summary>
            <param name="contentString"></param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Serialization.TokenEnumerator.MoveNext">
            <summary>
            Moves iterator forward 1 position
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Serialization.TokenEnumerator.MovePrevious">
            <summary>
            Moves iterator backward 1 position
            </summary>
            <returns>true if iterator is still inside the collection</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Serialization.TokenEnumerator.Valid">
            <summary>
            true if iterator is still inside the collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Serialization.TokenEnumerator.Current">
            <summary>
            Current element in the iterator
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Serialization.TokenType">
            <summary>
            the type of segment element
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Serialization.TokenType.EndCommentMarker">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Serialization.TokenType.EndLockedContent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Serialization.TokenType.EndRevisionMarker">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Serialization.TokenType.EndTagPairContent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Serialization.TokenType.PlaceholderTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Serialization.TokenType.StartCommentMarker">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Serialization.TokenType.StartLockedContent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Serialization.TokenType.StartRevisionMarkerInclude">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Serialization.TokenType.StartRevisionMarkerDelete">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Serialization.TokenType.StartTagPairContent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Serialization.TokenType.Text">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.StringUtilities">
            <summary>
            Defines utilities related to <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing(System.String)">
            <summary>
            Determines the casing as in <see cref="T:Sdl.LanguagePlatform.Core.StringUtilities.Casing"/> for the input string. Casing.Mixed will be
            returned for the empty string. 
            </summary>
            <param name="s">The input string (must not be null)</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny(System.String,System.Char[])">
            <summary>
            Returns <c>true</c> if the string <paramref name="s"/> starts with any 
            of the characters in <paramref name="characterList"/>, and <c>false</c>
            otherwise.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny(System.String,System.Char[])">
            <summary>
            Returns <c>true</c> if the string <paramref name="s"/> ends with any 
            of the characters in <paramref name="characterList"/>, and <c>false</c>
            otherwise.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace(System.String)">
            <summary>
            Returns true if <paramref name="t"/> contains only whitespace characters (<see cref="M:Sdl.LanguagePlatform.Core.CharacterProperties.IsWhitespace(System.Char)"/>), 
            and false otherwise.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String)">
            <summary>
            Escapes all double quotes and backslashes in a string.
            </summary>
            <param name="s">The input string.</param>
            <returns>The string where all double quotes will be prefixed with a backslash.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll(System.String,System.Predicate{System.Char})">
            <summary>
            Computes a copy of <paramref name="s"/> in which all characters which 
            satisfy <paramref name="property"/> are removed.
            </summary>
            <param name="s">The input string</param>
            <param name="property">The character property to test</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String,System.String)">
            <summary>
            Escapes special characters in a string, prefixing them with a backslash.
            </summary>
            <param name="s">The input string.</param>
            <param name="charactersToEscape">The characters to escape</param>
            <returns>The string where all occurrences of any of the characters to escape are prefixed with a backslash.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength(System.String,System.Char[])">
            <summary>
            Computes the length of the prefix of <paramref name="s"/> which entirely consists 
            of characters in <paramref name="prefixChars"/>. If either of the parameters is 
            <c>null</c> or empty, <c>0</c> is returned.
            </summary>
            <param name="s">The string</param>
            <param name="prefixChars">The set of prefix characters</param>
            <returns>The length of the prefix of <paramref name="s"/> which entirely consists
            of characters contained in <paramref name="prefixChars"/></returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength(System.String,System.Char[])">
            <summary>
            Computes the length of the suffix of <paramref name="s"/> which entirely consists 
            of characters in <paramref name="suffixChars"/>. If either of the parameters is 
            <c>null</c> or empty, <c>0</c> is returned.
            </summary>
            <param name="s">The string</param>
            <param name="suffixChars">The set of suffix characters</param>
            <returns>The length of the suffix of <paramref name="s"/> which entirely consists
            of characters contained in <paramref name="suffixChars"/></returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.TrimStart(System.String,System.Char[],System.String@)">
            <summary>
            Trims off any character contained in the <paramref name="trimCharacters"/> from the
            start of the specified string <paramref name="s"/>, and returns the remainder, as well
            as the trimmed-off prefix in <paramref name="trimmedPrefix"/>. If either <paramref name="s"/>
            or <paramref name="trimCharacters"/> are <c>null</c> or empty, the result will be equal
            to <paramref name="s"/>and <paramref name="trimmedPrefix"/> will be null.
            </summary>
            <param name="s">The input string</param>
            <param name="trimCharacters">The set of characters to trim off at the start of <paramref name="s"/>.</param>
            <param name="trimmedPrefix">If any characters have been trimmed off, this out parameter will
            contain the trimmed-off prefix. If no characters have been trimmed off, this out parameter will
            be <c>null</c>.</param>
            <returns>The remainder of <paramref name="s"/> after trimming off the specified trim characters from the start.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd(System.String,System.Char[],System.String@)">
            <summary>
            Trims off any character contained in the <paramref name="trimCharacters"/> from the
            end of the specified string <paramref name="s"/>, and returns the remainder, as well
            as the trimmed-off suffix in <paramref name="trimmedSuffix"/>. If either <paramref name="s"/>
            or <paramref name="trimCharacters"/> are <c>null</c> or empty, the result will be equal
            to <paramref name="s"/>and <paramref name="trimmedSuffix"/> will be null.
            </summary>
            <param name="s">The input string</param>
            <param name="trimCharacters">The set of characters to trim off at the start of <paramref name="s"/>.</param>
            <param name="trimmedSuffix">If any characters have been trimmed off, this out parameter will
            contain the trimmed-off suffix. If no characters have been trimmed off, this out parameter will
            be <c>null</c>.</param>
            <returns>The remainder of <paramref name="s"/> after trimming off the specified trim characters from the end.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings(System.String,System.String)">
            <summary>
            Appends each individual charater of <paramref name="b"/> to <paramref name="a"/>, if it is not 
            already present, and returns the result. If <paramref name="a"/> already contains 
            duplicates, they are kept.
            </summary>
            <param name="a">The first string</param>
            <param name="b">The second string</param>
            <returns>A string which consists of the input string <paramref name="a"/>, 
            with the individual characters from <paramref name="b"/> appended if they are not
            already present.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord(System.Int32,System.Boolean)">
            <summary>
            Generates a string which consists of random letters in the range [a-z] with the
            specified length.
            </summary>
            <param name="length">The length of the string to be generated.</param>
            <param name="initialUpper">If true, the initial letter of the generated string will be 
            converted to upper-case. If false, the initial letter will remain lower-case.
            </param>
            <returns>A string which consists of a random sequence of letters [a-z] with the specified length.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)">
            <summary>
            Converts single byte string to double byte string
            </summary>
            <param name="input">single byte string, halfwidth string</param>
            <returns></returns>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.StringUtilities.Casing">
            <summary>
            The casing of a string.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.StringUtilities.Casing.AllUpper">
            <summary>
            All characters are upper-case
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.StringUtilities.Casing.AllLower">
            <summary>
            All characters are lower-case
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.StringUtilities.Casing.InitialUpper">
            <summary>
            The initial char is upper-case, the rest is lower-case
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.StringUtilities.Casing.Mixed">
            <summary>
            An unspecific mixture of casing which is not covered by the other values, 
            or the casing cannot be determined (such as for <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.TagType">
            <summary>
            Indicates the tag type.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.TagType.Undefined">
            <summary>
            Represents an undefined tag type. This is also used for "dummy tags" which may 
            be added to a segment in case a tag was deleted from the original segment. Such
            a situation occurs when the translation engine deletes tags, but the number of 
            tokens must remain constant in the translation proposal as otherwise the token
            positions will become invalid.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.TagType.Start">
            <summary>
            Represents a starting tag.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.TagType.End">
            <summary>
            Represents an ending tag.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.TagType.Standalone">
            <summary>
            Represents a standalone tag.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.TagType.TextPlaceholder">
            <summary>
            A standalone tag which represents text, not formatting.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.TagType.LockedContent">
            <summary>
            Group of (locked) tag/text content that should be treated as a single placeable.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.TagType.UnmatchedStart">
            <summary>
            For TMX processing only: unmatched start tag (it pos=start)
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.TagType.UnmatchedEnd">
            <summary>
            For TMX processing only: unmatched end tag (it pos=end)
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tag">
            <summary>
            Represents a tag.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.#ctor">
            <summary>
            Initializes a new instance with default values (used for XML serialization only).
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.#ctor(Sdl.LanguagePlatform.Core.Tag)">
            <summary>
            Initializes a new instance of the Tag class from another instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.#ctor(Sdl.LanguagePlatform.Core.TagType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the Tag class with the specified type and anchor. The alignment anchor will be
            set to zero.
            </summary>
            <param name="type">The tag type.</param>
            <param name="tagId">The tag ID (user-defined)</param>
            <param name="anchor">The tag anchor.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.#ctor(Sdl.LanguagePlatform.Core.TagType,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the Tag class with the specified type and anchor.
            </summary>
            <param name="type">The tag type.</param>
            <param name="tagId">The tag ID (user-defined)</param>
            <param name="anchor">The tag anchor.</param>
            <param name="alignmentAnchor">An alignment anchor (cross-segment), if available</param>
            <param name="textEquivalent">A text equivalent string (ignored if the tag type is not TextPlaceholder or LockedContent)</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.#ctor(Sdl.LanguagePlatform.Core.TagType,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the Tag class with the specified type and anchor.
            </summary>
            <param name="type">The tag type.</param>
            <param name="tagId">The tag ID (user-defined)</param>
            <param name="anchor">The tag anchor.</param>
            <param name="alignmentAnchor">An alignment anchor (cross-segment), if available</param>
            <param name="textEquivalent">A text equivalent string (ignored if the tag type is not TextPlaceholder or LockedContent)</param>
            <param name="canHide">True if the tag represents inline formatting, false otherwise</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.Duplicate">
            <summary>
            See <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.Duplicate"/>
            </summary>
            <returns>A new instance that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)">
            <summary>
            Determines if this tag has the same type as another SegmentElement, which must also be a Tag object.
            </summary>
            <param name="other">The other SegmentElement object.</param>
            <returns>true if the tag type is the same, false otherwise or if other is not a Tag.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.SeriliazedWihoutAnchor">
            <summary>
            Same as ToString, but doesn't includes _AlignmentAnchor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(object)"/>
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns>A hash code for this object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.GetWeakHashCode">
            <summary>
            See <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.GetWeakHashCode"/>
            </summary>
            <returns>A hash code independent of tag anchors.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tag.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)">
            <summary>
            Visitor pattern implementation. Calls <see cref="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitTag(Sdl.LanguagePlatform.Core.Tag)"/>.
            </summary>
            <param name="visitor">The visitor instance</param>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tag.Type">
            <summary>
            Gets or sets the tag type.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tag.Anchor">
            <summary>
            Gets or sets the tag anchor, which is used to bracket two tags (connect start and end tag). The anchor
            is only relevant for start and end tags and has no cross-segment semantics.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tag.AlignmentAnchor">
            <summary>
            Gets or sets the alignment anchor, which is used to align cross-segment tags. It only needs to be
            set for the start tag.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tag.TagID">
            <summary>
            Gets or sets the tag ID which is a cross-format ID assigned by the filters and which may be
            used to represent a cross-format formatting class (such as "bold").
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tag.TextEquivalent">
            <summary>
            Gets or sets the text equivalent string. This will only be valid for text placeholder tags.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tag.CanHide">
            <summary>
            Gets or sets the CanHide flag
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Text">
            <summary>
            Represents a piece of text within a segment.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Text.#ctor">
            <summary>
            Initializes a new instance with default values (used for XML serialization only).
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Text.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Text class with the specified string.
            </summary>
            <param name="text">The string.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Text.Duplicate">
            <summary>
            See <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.Duplicate"/>
            </summary>
            <returns>A new instance that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Text.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)">
            <summary>
            Determines whether this instance is similar to another SegmentElement object, which must also be a Text object. 
            <para>This is equivalent to the Equals method.</para>
            </summary>
            <param name="other">The other object.</param>
            <returns>true if the two objects are equal, false otherwise or if other is not a Text object.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Text.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Text.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)">
            <summary>
            Visitor pattern implementation. Calls <see cref="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitText(Sdl.LanguagePlatform.Core.Text)"/>.
            </summary>
            <param name="visitor">The visitor instance</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Text.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(object)"/>
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Text.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns>A hash code for this object</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Text.GetWeakHashCode">
            <summary>
            See <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.GetWeakHashCode"/>
            </summary>
            <returns>A hash code, equivalent to <see cref="M:Sdl.LanguagePlatform.Core.Text.GetHashCode"/>.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Text.Value">
            <summary>
            Gets or sets the string for this Text instance.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.LocalizationParametersSource">
            <summary>
            Controls which tokens are used to obtain detailed localization parameters, such as
            the numeric group separator override, or whitespace handling between a number and the unit in measurements.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.LocalizationParametersSource.FromDocument">
            <summary>
            Use information from the document (source) token to auto-localize the tokens in the 
            translation proposal. This is the default.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.LocalizationParametersSource.FromMemory">
            <summary>
            Use information from the memory source and target tokens to auto-localize the tokens in the
            translation proposal. 
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.UnitSeparationMode">
            <summary>
            Controls how units are separated from the numeric value in measurements.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSeparationMode.Auto">
            <summary>
            Use the whitespace handling as it is obtained from the document or memory token. 
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSeparationMode.DeleteWhitespace">
            <summary>
            Delete any whitespace between the number and the unit.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSeparationMode.InsertSpace">
            <summary>
            Always insert a single standard space between the number and the unit.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSeparationMode.InsertNonbreakingSpace">
            <summary>
            Always insert a single non-breaking space between the number and the unit.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSeparationMode.InsertSpecifiedSeparator">
            <summary>
            Always insert the separator specified in the autolocalization settings
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings">
            <summary>
            Contains specialized settings for auto-localization of tokens.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings.AttemptAutoSubstitution(Sdl.LanguagePlatform.Core.Tokenization.Token)">
            <summary>
            Returns a flag whether or not to attempt auto-substitution on the specified token. The
            value depends on the token type and whether auto-substitution is enabled for that 
            token type or not (see <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings.DisableAutoSubstitution"/>.
            </summary>
            <param name="t">The token</param>
            <returns>A boolean value whether or not to attempt auto-substitution for this token.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings.LongDatePattern">
            <summary>
            Gets or sets the long date pattern for the auto-localization into the target language. This
            pattern must be one of the patterns defined by the target culture. Otherwise, 
            placeable association will not work correctly. If the value is null, a default pattern 
            will be used.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings.ShortDatePattern">
            <summary>
            Gets or sets the short date pattern for the auto-localization into the target language. This
            pattern must be one of the patterns defined by the target culture. Otherwise, 
            placeable association will not work correctly. If the value is null, a default pattern 
            will be used.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings.LongTimePattern">
            <summary>
            Gets or sets the long time pattern for the auto-localization into the target language. This
            pattern must be one of the patterns defined by the target culture. Otherwise, 
            placeable association will not work correctly. If the value is null, a default pattern 
            will be used.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings.UnitSeparationMode">
            <summary>
            Gets or sets the unit separation mode, which controls how units are separated from 
            the numeric value in measurements.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings.UnitSeparator">
            <summary>
            Gets or sets the unit separator char, which must be a whitespace char or the null
            character (\0).
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings.ShortTimePattern">
            <summary>
            Gets or sets the short time pattern for the auto-localization into the target language. This
            pattern must be one of the patterns defined by the target culture. Otherwise, 
            placeable association will not work correctly. If the value is null, a default pattern 
            will be used.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings.LocalizationParametersSource">
            <summary>
            Gets or sets the localization parameter source, which controls which tokens are used 
            to obtain the actual localization parameters, such as the numeric group separator override,
            or whitespace handling between a number and the unit in measurements.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings.DisableAutoSubstitution">
            <summary>
            Gets or sets the a set of recognizers for which auto-substitution will be disabled. Note
            that whether or not auto-localizable tokens are identified depends on the active
            recognizers. That is, if number recognition is off, then disabling auto-substitution of
            numbers has no effect as no numbers will be identified in the input.
            <para>The default is to disable none of the auto-substitutable token classes.</para>
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.BuiltinRecognizers">
            <summary>
            Enumerates the known types of special token recognizers.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.BuiltinRecognizers.RecognizeNone">
            <summary>
            Don't recognize any special tokens.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.BuiltinRecognizers.RecognizeDates">
            <summary>
            Recognizes date tokens.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.BuiltinRecognizers.RecognizeTimes">
            <summary>
            Recognizes time tokens.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.BuiltinRecognizers.RecognizeNumbers">
            <summary>
            Recognizes numbers.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.BuiltinRecognizers.RecognizeAcronyms">
            <summary>
            Recognizes acronyms.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.BuiltinRecognizers.RecognizeVariables">
            <summary>
            Recognizes variables.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.BuiltinRecognizers.RecognizeMeasurements">
            <summary>
            Recognizes measurements.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.BuiltinRecognizers.RecognizeAlphaNumeric">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.BuiltinRecognizers.RecognizeAll">
            <summary>
            Recognizes all special tokens.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.DateTimePatternType">
            <summary>
            Enumerates the different types of a date or time pattern.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.DateTimePatternType.Unknown">
            <summary>
            The pattern type is unknown
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.DateTimePatternType.LongDate">
            <summary>
            The pattern represents a long date pattern
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.DateTimePatternType.ShortDate">
            <summary>
            The pattern represents a short date pattern 
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.DateTimePatternType.ShortTime">
            <summary>
            The pattern represents a short time pattern
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.DateTimePatternType.LongTime">
            <summary>
            The pattern represents a long time pattern
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken">
            <summary>
            A <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.Token"/> which represents a date or time expression.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.Token">
            <summary>
            Represents a generic, abstract token, which is a sequence of characters in the input. A
            token is identified using a tokenizer, which breaks up the sequence of characters in the 
            input into a sequence of tokens. That token sequence is non-overlapping, but not necessarily
            contiguous.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Token._Text">
            <summary>
            The textual form of the token, i.e. its surface text.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Token._Span">
            <summary>
            The range in the original segment that this token covers.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.Token.#ctor">
            <summary>
            Initializes a new instance with default values.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.Token.#ctor(Sdl.LanguagePlatform.Core.Tokenization.Token)">
            <summary>
            Initializes a new instance with the values from another instance, creating a deep copy.
            </summary>
            <param name="other">The instance to copy</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.Token.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified token text.
            </summary>
            <param name="text">The token text</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.Token.GetTokenType">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.Type"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.Token.SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.Type"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.Token.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(object)"/>
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.Token.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode(object)"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.Token.GetWeakHashCode">
            <summary>
            See <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.GetWeakHashCode"/>
            </summary>
            <returns>A hash code</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.Token.Text">
            <summary>
            Gets or sets the token's text.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.Token.Span">
            <summary>
            Gets or sets the span covered by this token in the original segment.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable">
            <summary>
            Gets a boolean value indicating whether this token represents a placeable. 
            Always returns <c>false</c> for this class. Derived
            classes should override appropriately.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable">
            <summary>
            Gets a boolean value indicating whether this token can be substituted (e.g. auto-localized) across segments. 
            All substitutables are placeables, but not all placeables can be substituted (e.g. acronyms).
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.Token.Type">
            <summary>
            Gets, or sets, the <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.TokenType"/> of this token.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsWord">
            <summary>
            true iff the token is a word, an abbreviation, or an acronym
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsPunctuation">
            <summary>
            true iff the token is a general punctuation, an opening punctuation, or a closing punctuation
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsWhitespace">
            <summary>
            Gets a value which indicates whether this token is a whitespace token or not.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken">
            <summary>
            Defines the interface for auto-localizable tokens. Localizable tokens have a value, and 
            their surface representation ("text") can be automatically converted into a target culture
            representation, given the token's value and the target culture. 
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings)">
            <summary>
            Auto-localizes the token according to the settings of the specified target culture 
            and the provided auto-localization settings. The text of the token will be changed, 
            but not the values.
            <para>
            For some token types, special <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> will be used, if provided.
            </para>
            </summary>
            <param name="culture">The target culture</param>
            <param name="autoLocalizationSettings">Contains the <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> to use for some token types. May be null, 
            in which case default settings will be used.</param>
            <returns><c>true</c> if the token text has been changed, and <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken,System.Boolean)">
            <summary>
            Auto-localizes the token according to the settings of the specified target culture 
            and the provided auto-localization settings. The text of the token will be changed, 
            but not the values.
            <para>
            For some token types, special <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> will be used, if provided.
            </para>
            </summary>
            <param name="culture">The target culture</param>
            <param name="autoLocalizationSettings">Contains the <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> to use for some token types. May be null, 
            in which case default settings will be used.</param>
            <param name="originalMemoryToken">The original memory token. Some auto-localization settings will 
            be derived from the token, if provided.</param>
            <param name="adjustCasing">If true, it is assumed that the token is in segment-initial position. Then, casing
            will be adjusted if the original memory token is supplied as well.</param>
            <returns><c>true</c> if the token text has been changed, and <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.SetValue(Sdl.LanguagePlatform.Core.Tokenization.Token,System.Boolean)">
            <summary>
            Overwrites the current token's value with the value from <paramref name="blueprint"/>, which
            also must be a <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken"/>. Note that only the value and the type are
            overwritten, not the textual representation. 
            </summary>
            <param name="blueprint">The token to take the value from</param>
            <param name="keepNumericSeparators">Applicable to numeric (number and measurement) tokens only: if true, do not
            override the original group and decimal separators.</param>
            <returns>A flag indicating whether the token's value or type were changed.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.#ctor">
            <summary>
            Initializes a new instance with default values.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.#ctor(Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken)">
            <summary>
            Initializes a new instance with the values of another token, creating a deep copy.
            </summary>
            <param name="other">The other token (must not be null)</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.#ctor(System.String,System.DateTime,Sdl.LanguagePlatform.Core.Tokenization.DateTimePatternType)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="text">The text to assign to the token</param>
            <param name="dateTime">The <see cref="T:System.DateTime"/> object to assign to the 
            token's value</param>
            <param name="type">The type of the date or time token</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.SetValue(Sdl.LanguagePlatform.Core.Tokenization.Token,System.Boolean)">
            <summary>
            Overwrites the current token's value with the value from <paramref name="blueprint"/>, which
            also must be a <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken"/>. Note that only the value and the type are
            overwritten, not the textual representation. 
            </summary>
            <param name="blueprint">The token to take the value from</param>
            <param name="keepNumericSeparators">(ignored)</param>
            <returns>A flag indicating whether the token's value or type were changed.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.Duplicate">
            <summary>
            See <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.Duplicate"/>
            </summary>
            <returns>A new instance that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings)">
            <summary>
            Auto-localizes the token according to the settings of the specified target culture 
            and the provided auto-localization settings. The text of the token will be changed, 
            but not the values.
            <para>
            For some token types, special <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> will be used, if provided.
            </para>
            </summary>
            <param name="culture">The target culture</param>
            <param name="autoLocalizationSettings">Contains the <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> to use for some token types. May be null, 
            in which case default settings will be used.</param>
            <returns><c>true</c> if the token text has been changed, and <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken,System.Boolean)">
            <summary>
            Auto-localizes the token according to the settings of the specified target culture 
            and the provided auto-localization settings. The text of the token will be changed, 
            but not the values.
            <para>
            For some token types, special <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> will be used, if provided.
            </para>
            </summary>
            <param name="culture">The target culture</param>
            <param name="autoLocalizationSettings">Contains the <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> to use for some token types. May be null, 
            in which case default settings will be used.</param>
            <param name="originalMemoryToken">The original memory token. Some auto-localization settings will 
            be derived from the token, if provided.</param>
            <param name="adjustCasing">If true, it is assumed that the token is in segment-initial position. Then, casing
            will be adjusted if the original memory token is supplied as well.</param>
            <returns><c>true</c> if the token text has been changed, and <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.GetTokenType">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.Type"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)">
            <summary>
            <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)"/>
            </summary>
            <param name="other">The other instance.</param>
            <returns>A value indicating the degree of similarity to the provided segment element.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(object)"/>
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode(object)"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)">
            <summary>
            Visitor pattern implementation. Calls <see cref="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitDateTimeToken(Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken)"/>.
            </summary>
            <param name="visitor">The visitor instance</param>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.DateTimePatternType">
            <summary>
            Gets or sets the pattern type
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.IsPlaceable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable"/>. Always <c>true</c> for this class.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.IsSubstitutable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable"/>. Always <c>true</c> for this class.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.IsDateToken">
            <summary>
            Gets a value to indicate whether this token represents a date or not.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken.IsTimeToken">
            <summary>
            Gets a value to indicate whether this token represents a time or not.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.GenericPlaceableToken">
            <summary>
            Represents a generic placeable token which is not one of the predefined placeable token
            classes. Generic placeable tokens can never be auto-localized, but may be auto-substitutable.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken">
            <summary>
            A <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.Token"/> which represents a simple token, such as a word, whitespace,
            or punctuation.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor">
            <summary>
            Initializes a new instance with default values
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified token text, and a token type 
            of <see cref="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Word"/>.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor(Sdl.LanguagePlatform.Core.Tokenization.SimpleToken)">
            <summary>
            Initializes a new instance with the values from another instance, creating a deep copy.
            </summary>
            <param name="other">The instance to create a copy for</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor(System.String,Sdl.LanguagePlatform.Core.Tokenization.TokenType)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="text">The token text</param>
            <param name="t">The token type</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Duplicate">
            <summary>
            See <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.Duplicate"/>
            </summary>
            <returns>A new instance that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)">
            <summary>
            Overwrites the token type. This should only be done with caution, and to reclassify 
            exchangeable token types (acronyms, words, abbreviations). In particular, do not set
            the token type to one of the special (localizable) token types.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetTokenType">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.Type"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)">
            <summary>
            <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)"/>
            </summary>
            <param name="other">The other instance.</param>
            <returns>A value indicating the degree of similarity to the provided segment element.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(object)"/>
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode(object)"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)">
            <summary>
            Visitor pattern implementation. Calls <see cref="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitSimpleToken(Sdl.LanguagePlatform.Core.Tokenization.SimpleToken)"/>.
            </summary>
            <param name="visitor">The visitor instance</param>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsPlaceable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable"/>. Returns <c>true</c> if the token represents
            an acronym, a variable, a URI, or a generic text placeable.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsSubstitutable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable"/>. Returns <c>true</c> if this token represents
            a variable.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Stem">
            <summary>
            An optional stem to assign to this token. Stems are used for TM search and scoring.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsStopword">
            <summary>
            Gets or sets whether this token is a stop word
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.GenericPlaceableToken.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance with the specified token text, token class, and 
            substitution flag. The token type will be set to <see cref="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.OtherTextPlaceable"/>.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.GenericPlaceableToken.#ctor(Sdl.LanguagePlatform.Core.Tokenization.GenericPlaceableToken)">
            <summary>
            Initializes a new instance with the values from another instance, creating a deep copy.
            </summary>
            <param name="other">The instance to create a copy for</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.GenericPlaceableToken.Duplicate">
            <summary>
            See <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.Duplicate"/>
            </summary>
            <returns>A new instance that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.GenericPlaceableToken.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)">
            <summary>
            <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)"/>. To be similar, instances need to have the
            same token class.
            </summary>
            <param name="other">The other instance.</param>
            <returns>A value indicating the degree of similarity to the provided segment element.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.GenericPlaceableToken.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(object)"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.GenericPlaceableToken.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode(object)"/>
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.GenericPlaceableToken.IsPlaceable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable"/>. Always returns <c>true</c> for instances of this class.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.GenericPlaceableToken.IsSubstitutable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable"/>. Returns the value of the corresponding constructor
            flag.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.GenericPlaceableToken.TokenClass">
            <summary>
            Gets the value of the token class which has been used during construction.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.Match">
            <summary>
            A match object which is returned by FST, FSA, or regex matches
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.Match.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="index">The start index in the underlying string</param>
            <param name="length">The length of the match</param>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.Match.Index">
            <summary>
            Gets or sets the start index in the underlying input string.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.Match.Length">
            <summary>
            Gets or sets the length of the match.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken">
            <summary>
            A <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.Token"/> which represents a measurement, which consists of a numeric
            value and a unit.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.NumberToken">
            <summary>
            A <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.Token"/> which represents a numeric value.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.NumberToken._GroupSeparator">
            <summary>
            The group separator used in the token
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.NumberToken._DecimalSeparator">
            <summary>
            The decimal separator used in the token
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.NumberToken._AlternateGroupSeparator">
            <summary>
            An alternate group separator, or the null character if none is used.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.NumberToken._AlternateDecimalSeparator">
            <summary>
            An alternate decimal separator, or the null character if none is used.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.NumberToken._Sign">
            <summary>
            The sign of the numeric value
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.NumberToken._RawFractionalDigits">
            <summary>
            The "raw" fractional digits, i.e. the sequence of digits without any separators
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.NumberToken._RawDecimalDigits">
            <summary>
            The "raw" decimal digits, i.e. the sequence of digits without any separators
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.NumberToken._RawSign">
            <summary>
            The "raw" sign, i.e. the original character without canonicalization
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.NumberToken._CanonicalNumber">
            <summary>
            The canonical number, i.e. the default representation of the number value
            as a sequence of the optional minus character, the raw decimal digits, a full
            stop character, and the sequence of fractional digits.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.#ctor(System.String,System.String,System.String,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="text">The token text</param>
            <param name="sign">The sign of the numeric value</param>
            <param name="decimalPart">The decimal part of the numeric value</param>
            <param name="fractionalPart">The fractional part of the numeric value</param>
            <param name="format">The number format of the token's culture, used to determine 
            whether default or alternate separators were used</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.#ctor(System.String,Sdl.LanguagePlatform.Core.Tokenization.NumericSeparator,Sdl.LanguagePlatform.Core.Tokenization.NumericSeparator,System.Char,System.Char,Sdl.LanguagePlatform.Core.Tokenization.Sign,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="text">The text of the token, as it appeared in the input</param>
            <param name="groupSeparator">The type of group separator used</param>
            <param name="decimalSeparator">The type of decimal separator used</param>
            <param name="alternateGroupSeparator">The character of an alternative group separator, if used</param>
            <param name="alternateDecimalSeparator">The character of an alternative decimal separator, if used</param>
            <param name="sign">The type of sign used</param>
            <param name="rawSign">The "raw text" of the sign</param>
            <param name="rawDecimalDigits">The "raw decimal digits", without separators, between 0-9</param>
            <param name="rawFractionalDigits">The "raw fractional digits", without separators, between 0-9</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.#ctor(Sdl.LanguagePlatform.Core.Tokenization.NumberToken)">
            <summary>
            Initializes a new instance with the values of another instance, creating a deep copy.
            </summary>
            <param name="other">The instance to copy</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.SetValue(Sdl.LanguagePlatform.Core.Tokenization.Token,System.Boolean)">
            <summary>
            Overwrites the current token's value with the value from <paramref name="blueprint"/>, which
            also must be a <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken"/>. Note that only the value and the type are
            overwritten, not the textual representation. 
            </summary>
            <param name="blueprint">The token to take the value from</param>
            <param name="keepNumericSeparators">Applicable to numeric (number and measurement) tokens only: if true, do not
            override the original group and decimal separators.</param>
            <returns>A flag indicating whether the token's value or type were changed.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.SetValue(System.String,System.String,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Overwrites the current token values with the specified values.
            </summary>
            <param name="sign">The sign of the numeric value</param>
            <param name="decimalPart">The decimal part of the numeric value</param>
            <param name="fractionalPart">The fractional part of the numeric value</param>
            <param name="format">The number format of the token's culture, used to determine 
            whether default or alternate separators were used</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.Duplicate">
            <summary>
            See <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.Duplicate"/>
            </summary>
            <returns>A new instance that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings)">
            <summary>
            Auto-localizes the token according to the settings of the specified target culture 
            and the provided auto-localization settings. The text of the token will be changed, 
            but not the values.
            <para>
            For some token types, special <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> will be used, if provided.
            </para>
            </summary>
            <param name="culture">The target culture</param>
            <param name="autoLocalizationSettings">Contains the <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> to use for some token types. May be null, 
            in which case default settings will be used.</param>
            <returns><c>true</c> if the token text has been changed, and <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken,System.Boolean)">
            <summary>
            Auto-localizes the token according to the settings of the specified target culture 
            and the provided auto-localization settings. The text of the token will be changed, 
            but not the values.
            <para>
            For some token types, special <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> will be used, if provided.
            </para>
            </summary>
            <param name="culture">The target culture</param>
            <param name="autoLocalizationSettings">Contains the <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> to use for some token types. May be null, 
            in which case default settings will be used.</param>
            <param name="originalMemoryToken">The original memory token. Some auto-localization settings will 
            be derived from the token, if provided.</param>
            <param name="adjustCasing">If true, it is assumed that the token is in segment-initial position. Then, casing
            will be adjusted if the original memory token is supplied as well.</param>
            <returns><c>true</c> if the token text has been changed, and <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.FormatNumber(System.Globalization.CultureInfo)">
            <summary>
            Format the number according to the provided culture, applying overrides for
            separators as appropriate. This method uses a proprietary implementation for
            the formatting and does not use the default .Net formatting methods.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.FormatNumber(System.Globalization.NumberFormatInfo)">
            <summary>
            Format the number according to the provided number format information, applying overrides for
            separators as appropriate. This method uses a proprietary implementation for
            the formatting and does not use the default .Net formatting methods.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)">
            <summary>
            <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)"/>
            </summary>
            <param name="other">The other instance.</param>
            <returns>A value indicating the degree of similarity to the provided segment element.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(object)"/>
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode(object)"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.GetTokenType">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.Type"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)">
            <summary>
            Visitor pattern implementation. Calls <see cref="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitNumberToken(Sdl.LanguagePlatform.Core.Tokenization.NumberToken)"/>.
            </summary>
            <param name="visitor">The visitor instance</param>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.Value">
            <summary>
            Gets or sets the numeric value. Do not use the setter, it is for internal purposes only.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.ValueValid">
            <summary>
            Gets or sets the flag whether the numeric value is valid or not. Do not use the setter, it is for internal purposes only.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.Sign">
            <summary>
            Gets or sets the sign.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.RawSign">
            <summary>
            Gets or sets the "raw" sign, i.e. the textual representation of the sign
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.DecimalSeparator">
            <summary>
            Gets or sets the decimal separator
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.GroupSeparator">
            <summary>
            Gets or sets the group separator
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.AlternateGroupSeparator">
            <summary>
            Gets or sets an alternate group separator, which is a single char if an alternate
            separator is used, or the null character if no alternate separator is used.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.AlternateDecimalSeparator">
            <summary>
            Gets or sets an alternate decimal separator, which is a single char if an alternate
            separator is used, or the null character if no alternate separator is used.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.RawFractionalDigits">
            <summary>
            Gets or sets the raw fractional digits, which are a sequence of digits without 
            separators or signs.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.RawDecimalDigits">
            <summary>
            Gets or sets the raw decimal digits, which are a sequence of digits without 
            separators or signs.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.IsPlaceable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable"/>. Always <c>true</c> for this class.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.NumberToken.IsSubstitutable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable"/>. Always <c>true</c> for this class.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.#ctor(System.String,System.String,System.String,System.String,Sdl.LanguagePlatform.Core.Tokenization.Unit,System.String,System.Char,System.Globalization.NumberFormatInfo)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="text">The token text to assign to the token</param>
            <param name="sign">The sign of the numeric value</param>
            <param name="decimalPart">The decimal part of the numeric value</param>
            <param name="fractionalPart">The fractional part of the numeric value</param>
            <param name="unit">The unit of the measurement</param>
            <param name="unitString">The textual unit of the measurement</param>
            <param name="unitSeparator">The unit separator used between the numeric part and the unit</param>
            <param name="format">The token's culture default number format info, to determine
            whether primary or alternate separators are used</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.#ctor(System.String,Sdl.LanguagePlatform.Core.Tokenization.NumberToken,Sdl.LanguagePlatform.Core.Tokenization.Unit,System.String,System.Char)">
            <summary>
            Initializes a new instance with the specified values. This constructor is for internal
            purposes only and should not be used directly.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.#ctor(Sdl.LanguagePlatform.Core.Tokenization.MeasureToken)">
            <summary>
            Initializes a new instance with the values of another instance, creating a deep copy.
            </summary>
            <param name="other">The instance to create a copy of</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.SetValue(Sdl.LanguagePlatform.Core.Tokenization.Token,System.Boolean)">
            <summary>
            Overwrites the current token's value with the value from <paramref name="blueprint"/>, which
            also must be a <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken"/>. Note that only the value and the type are
            overwritten, not the textual representation. 
            </summary>
            <param name="blueprint">The token to take the value from</param>
            <param name="keepNumericSeparators">Applicable to numeric (number and measurement) tokens only: if true, do not
            override the original group and decimal separators.</param>
            <returns>A flag indicating whether the token's value or type were changed.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.Duplicate">
            <summary>
            See <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.Duplicate"/>
            </summary>
            <returns>A new instance that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)">
            <summary>
            <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)"/>
            </summary>
            <param name="other">The other instance.</param>
            <returns>A value indicating the degree of similarity to the provided segment element.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(object)"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode()"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.GetTokenType">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.Type"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings)">
            <summary>
            Auto-localizes the token according to the settings of the specified target culture 
            and the provided auto-localization settings. The text of the token will be changed, 
            but not the values.
            <para>
            For some token types, special <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> will be used, if provided.
            </para>
            </summary>
            <param name="culture">The target culture</param>
            <param name="autoLocalizationSettings">Contains the <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> to use for some token types. May be null, 
            in which case default settings will be used.</param>
            <returns><c>true</c> if the token text has been changed, and <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken,System.Boolean)">
            <summary>
            Auto-localizes the token according to the settings of the specified target culture 
            and the provided auto-localization settings. The text of the token will be changed, 
            but not the values.
            <para>
            For some token types, special <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> will be used, if provided.
            </para>
            </summary>
            <param name="culture">The target culture</param>
            <param name="autoLocalizationSettings">Contains the <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings"/> to use for some token types. May be null, 
            in which case default settings will be used.</param>
            <param name="originalMemoryToken">The original memory token. Some auto-localization settings will 
            be derived from the token, if provided.</param>
            <param name="adjustCasing">If true, it is assumed that the token is in segment-initial position. Then, casing
            will be adjusted if the original memory token is supplied as well.</param>
            <returns><c>true</c> if the token text has been changed, and <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)">
            <summary>
            Visitor pattern implementation. Calls <see cref="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitMeasureToken(Sdl.LanguagePlatform.Core.Tokenization.MeasureToken)"/>.
            </summary>
            <param name="visitor">The visitor instance</param>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.Unit">
            <summary>
            Gets or sets the unit.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.UnitSeparator">
            <summary>
            Gets or sets the unit separator.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.UnitString">
            <summary>
            Gets or sets the unit string, in case the unit is unknown.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.IsPlaceable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable"/>. Always <c>true</c> for this class.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.IsSubstitutable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable"/>. Always <c>true</c> for this class.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.IsValid">
            <summary>
            Gets a boolean value which indicates whether this measurement is valid. A measurement
            is valid if either the unit is not the default unit (<see cref="F:Unit.NoUnit"/>) or
            the <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.MeasureToken.UnitString"/> is set. In most cases, both are set by the tokenizer.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.NumericSeparator">
            <summary>
            The numeric separators type which can occur in a number token.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.NumericSeparator.None">
            <summary>
            Indicates that no explicit separator is used.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.NumericSeparator.Primary">
            <summary>
            Indicates that the culture's primary separator (group or decimal separator) is used.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.NumericSeparator.Alternate">
            <summary>
            Indicates that an alternate separator (group or decimal separator) is used.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.Sign">
            <summary>
            The sign of a number
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Sign.None">
            <summary>
            No explicit sign at the start of the number.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Sign.Plus">
            <summary>
            An explicit plus sign at the start of the number.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Sign.Minus">
            <summary>
            A minus sign at the start of the number.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.UnitType">
            <summary>
            Enumerates the known types of a unit, i.e. whether it represents a length, area, etc.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitType.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitType.Area">
            <summary>
            Area
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitType.Mass">
            <summary>
            Mass
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitType.Capacity">
            <summary>
            Capacity
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitType.Temperature">
            <summary>
            Temperature
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitType.Other">
            <summary>
            Other (not participating in auto-conversion)
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitType.NoType">
            <summary>
            Unknown or untyped (such as percent)
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.UnitSystem">
            <summary>
            The unit system of a unit (metric, BIS, etc.)
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSystem.Metric">
            <summary>
            Metric
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSystem.BIS">
            <summary>
            BIS (British Imperial System)
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSystem.BISUK">
            <summary>
            BIS (United Kingdom)
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSystem.BISUSFluid">
            <summary>
            US Fluid Measure
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSystem.BISUSDry">
            <summary>
            US Dry Measure
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSystem.NoSystem">
            <summary>
            No particular system, unknown, or not yet identified
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit">
            <summary>
            Encapsulates information about the available physical units and their interrelationships.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetSystem(Sdl.LanguagePlatform.Core.Tokenization.Unit)">
            <summary>
            Obtains the <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.UnitSystem"/> of the specified unit.
            </summary>
            <param name="unit">The unit to look up</param>
            <returns>The unit system of the unit, or <see cref="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSystem.NoSystem"/> if the 
            unit is unknown.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.IsMetric(Sdl.LanguagePlatform.Core.Tokenization.Unit)">
            <summary>
            Determines whether the specified unit belongs to the metric system.
            </summary>
            <param name="unit">The unit</param>
            <returns><c>true</c> if the unit belongs to the metric system, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitType(Sdl.LanguagePlatform.Core.Tokenization.Unit)">
            <summary>
            Obtains the <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.UnitType"/> of the specified unit.
            </summary>
            <param name="unit">The unit to look up</param>
            <returns>The unit type of the unit, or <see cref="F:Sdl.LanguagePlatform.Core.Tokenization.UnitType.NoType"/> if the 
            unit is unknown.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitTypesCompatible(Sdl.LanguagePlatform.Core.Tokenization.Unit,Sdl.LanguagePlatform.Core.Tokenization.Unit)">
            <summary>
            Determines whether the unit types of the specified units are compatible. 
            Two unit types are compatible if both their types are well-defined 
            (not "other" or "no type") and are identical.
            </summary>
            <param name="a">The first unit</param>
            <param name="b">The second unit</param>
            <returns>A flag indicating whether the units' types are compatible or not.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetAbbreviations(Sdl.LanguagePlatform.Core.Tokenization.Unit)">
            <summary>
            Gets the known abbreviations for the specified unit. The return value may indicate
            vertical bars to indicate multiple alternative abbreviations.
            </summary>
            <param name="unit">The unit to look up</param>
            <returns>The known abbreviations for the unit, or <c>null</c> if the unit 
            wasn't found or has no known abbreviations.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetPreferredAbbreviation(Sdl.LanguagePlatform.Core.Tokenization.Unit,System.Globalization.CultureInfo)">
            <summary>
            Gets the preferred abbreviation for the specified unit. The preferred abbreviation
            is used for auto-localization. It is the first abbreviation in a list of alternative
            abbreviations for the unit.
            </summary>
            <param name="unit">The unit to look up</param>
            <param name="culture">An optional culture, in which case the method will 
            return the preferred abbreviation for the target culture (currently ignored)</param>
            <returns>The preferred abbreviation for the unit, or <c>null</c> if the unit 
            wasn't found or has no known abbreviation.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetName(Sdl.LanguagePlatform.Core.Tokenization.Unit)">
            <summary>
            Gets the name for the specified unit.
            </summary>
            <param name="unit">The unit</param>
            <returns>The name of the unit, or <c>null</c> if the unit is unknown or has no name.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetDefaultSystem(Sdl.LanguagePlatform.Core.Tokenization.UnitType,System.Globalization.CultureInfo)">
            <summary>
            Determines the default <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.UnitSystem"/> for the specified unit type in the
            specified culture.
            </summary>
            <param name="type">The type of the unit</param>
            <param name="culture">The culture to determine the default system for</param>
            <returns>The default unit system for the specified combination of unit type and
            culture, or <see cref="F:Sdl.LanguagePlatform.Core.Tokenization.UnitSystem.Metric"/> if no information about the default
            system is available.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find(System.String,System.Globalization.CultureInfo)">
            <summary>
            Looks up and returns the unit associated with the specified unit abbreviation. The 
            default unit system for the abbreviation is determined by looking up the default 
            system for capacity in the specified culture.
            </summary>
            <param name="abbreviation">The unit abbreviation</param>
            <param name="culture">The optional culture to use during lookup, in case the abbreviation
            is culture-specific or the preferred system needs to be determined from the culture</param>
            <returns>The unit which most closely matches the search criteria</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find(System.String,Sdl.LanguagePlatform.Core.Tokenization.UnitSystem,System.Globalization.CultureInfo)">
            <summary>
            Looks up and returns the unit associated with the specified unit abbreviation.
            </summary>
            <param name="abbreviation">The unit abbreviation</param>
            <param name="preferredSystem">The preferred system, in case the abbreviation is known in 
            multiple systems.</param>
            <param name="culture">The optional culture to use during lookup, in case the abbreviation
            is culture-specific or the preferred system needs to be determined from the culture</param>
            <returns>The unit which most closely matches the search criteria</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameCategory(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="UnitA"></param>
            <param name="UnitB"></param>
            <returns></returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitsRX(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Returns a regular expression which matches all units known for the provided culture.
            </summary>
            <param name="culture">The culture (may be null)</param>
            <param name="includeDefaultAbbreviationsWithCultureAbbreviations">If true, the 
            default units are included with the culture-specifc units.</param>
            <returns>A string representing a regular expression.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnits(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Returns a word list which contains all units known for the provided culture.
            </summary>
            <param name="culture">The culture (may be null)</param>
            <param name="includeDefaultAbbreviationsWithCultureAbbreviations">If true, the 
            default units are included with the culture-specifc units.</param>
            <returns>A word list which includes the relevant units.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find(Sdl.LanguagePlatform.Core.Tokenization.Unit)">
            <summary>
            Looks up the unit description for the specified unit.
            </summary>
            <param name="unit">The unit to look up</param>
            <returns>The unit description, or <c>null</c> if none is found.</returns>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription">
            <summary>
            Represents data associated with physical units known and processed by the system.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.#ctor">
            <summary>
            For XML (de)serialization only
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.#ctor(Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription)">
            <summary>
            Initializes a new instance, using the values of another instance, creating a deep copy.
            </summary>
            <param name="other">The instance to copy</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.#ctor(Sdl.LanguagePlatform.Core.Tokenization.Unit,Sdl.LanguagePlatform.Core.Tokenization.UnitType,Sdl.LanguagePlatform.Core.Tokenization.UnitSystem,System.Boolean,System.Int32,System.Double,Sdl.LanguagePlatform.Core.Tokenization.Unit,System.String,System.String)">
            <summary>
            Initializes a new instance with the provided values.
            </summary>
            <param name="u">The unit</param>
            <param name="ut">The unit type</param>
            <param name="us">The unit system</param>
            <param name="isCanonical">A flag indicating whether this unit is canonical for the 
            specified unit type (i.e. is the base for conversions)</param>
            <param name="magnitude">The magnitude level of this unit</param>
            <param name="conversionFactor">The conversion factor to the conversion unit</param>
            <param name="conversionUnit">The unit to use for conversions</param>
            <param name="name">The name of the unit</param>
            <param name="abbreviation">The abbreviations of this unit, separated by a vertical bar</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.#ctor(Sdl.LanguagePlatform.Core.Tokenization.Unit,Sdl.LanguagePlatform.Core.Tokenization.UnitType,Sdl.LanguagePlatform.Core.Tokenization.UnitSystem,System.Boolean,System.Int32,System.Double,Sdl.LanguagePlatform.Core.Tokenization.Unit,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance with the provided values.
            </summary>
            <param name="u">The unit</param>
            <param name="ut">The unit type</param>
            <param name="us">The unit system</param>
            <param name="isCanonical">A flag indicating whether this unit is canonical for the 
            specified unit type (i.e. is the base for conversions)</param>
            <param name="magnitude">The magnitude level of this unit</param>
            <param name="conversionFactor">The conversion factor to the conversion unit</param>
            <param name="conversionUnit">The unit to use for conversions</param>
            <param name="name">The name of the unit</param>
            <param name="abbreviation">The abbreviations of this unit, separated by a vertical bar</param>
            <param name="preferredAbbreviation">The preferred abbreviation (optional)</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.HasAbbreviation(System.String)">
            <summary>
            Computes a value indicating whether the specified abbreviation is a known 
            abbreviation for this unit.
            </summary>
            <param name="abbr">A unit abbreviation</param>
            <returns>A value indicating whether the specified abbreviation is a known 
            abbreviation for this unit.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.GetCultureSpecificAbbreviations(System.Globalization.CultureInfo)">
            <summary>
            Obtains the culture-specific abbreviations for this unit, separated by a 
            vertical bar.
            </summary>
            <param name="culture">The culture to obtain the abbreviations for</param>
            <returns>The culture-specific unit abbreviations, or <c>null</c> if none are known</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.HasAbbreviation(System.String,System.Globalization.CultureInfo)">
            <summary>
            Computes a value indicating whether the specified abbreviation is a known 
            abbreviation for this unit.
            </summary>
            <param name="abbr">A unit abbreviation</param>
            <param name="culture">If specified, the culture-specific abbreviations for the 
            unit will be checked in addition to the default abbreviations.</param>
            <returns>A value indicating whether the specified abbreviation is a known 
            abbreviation for this unit.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.Unit">
            <summary>
            Gets or sets the unit
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.UnitType">
            <summary>
            Gets or sets the unit type
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.UnitSystem">
            <summary>
            Gets or sets the unit system
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.IsCanonical">
            <summary>
            Gets or sets a flag which indicates whether this unit is the canonical unit in the 
            current unit type and system
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.Magnitude">
            <summary>
            Gets or sets the magnitude of this unit, in comparison to other units of the same type and system.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.ConversionFactor">
            <summary>
            Gets or sets the conversion factor to apply when converting to the <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.ConversionUnit"/>
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.ConversionUnit">
            <summary>
            Gets or sets the conversion unit to use when converting across unit systems
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.Name">
            <summary>
            Gets or sets the name of the unit
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.Abbreviations">
            <summary>
            Gets or sets the standard (culture-independent) abbreviations of this unit, separated by a 
            vertical bar.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnitDescription.CultureSpecificAbbreviations">
            <summary>
            Gets or sets a list of culture-specific abbreviations for this unit, 
            in the form of pairs where the first part is a culture code, and the
            second is the list of abbreviations.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.TagToken">
            <summary>
            A <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.Token"/> which encapsulates a tag in the input.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TagToken.#ctor">
            <summary>
            Initializes a new instance with default values.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TagToken.#ctor(Sdl.LanguagePlatform.Core.Tag)">
            <summary>
            Initializes a new instance with the specified tag.
            </summary>
            <param name="tag">The tag (must not be null)</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TagToken.#ctor(Sdl.LanguagePlatform.Core.Tokenization.TagToken)">
            <summary>
            Initializes a new instance from another instance, creating a deep copy
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TagToken.Duplicate">
            <summary>
            See <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.Duplicate"/>
            </summary>
            <returns>A new instance that is a deep copy of this instance.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TagToken.UpdateValue(Sdl.LanguagePlatform.Core.Tokenization.TagToken)">
            <summary>
            Updates the token's value, using the values of another instance.
            </summary>
            <param name="blueprint">The instance to update this instance from.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TagToken.UpdateValue(Sdl.LanguagePlatform.Core.Tokenization.TagToken,System.Boolean)">
            <summary>
            Updates the token's value, using the values of another instance.
            </summary>
            <param name="blueprint">The instance to update this instance from.</param>
            <param name="updateValuesOnly">If true, only the tag's values are updated. Otherwise, 
            all other information (such as the text) will be updated as well.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TagToken.GetTokenType">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.Type"/>. Always returns <see cref="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Tag"/> for instances
            of this class.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TagToken.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)">
            <summary>
            <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)"/>
            </summary>
            <param name="other">The other instance.</param>
            <returns>A value indicating the degree of similarity to the provided segment element.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TagToken.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(object)"/>
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TagToken.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode(object)"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TagToken.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
            <returns>A string representation of the object, for display purposes.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TagToken.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)">
            <summary>
            Visitor pattern implementation. Calls <see cref="M:Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitTagToken(Sdl.LanguagePlatform.Core.Tokenization.TagToken)"/>.
            </summary>
            <param name="visitor">The visitor instance</param>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.TagToken.Tag">
            <summary>
            Gets or sets the tag encapsulated in this instance.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.TagToken.IsPlaceable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable"/>. Always <c>true</c> for this class.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.TagToken.IsSubstitutable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable"/>. Always <c>true</c> for this class.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.PrioritizedToken">
            <summary>
            A <see cref="F:Sdl.LanguagePlatform.Core.Tokenization.PrioritizedToken.Token"/> with an assigned priority, usually originating from a recognizer's
            priority. This class is for internal purposes only and should not be used in third-party 
            applications.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.PrioritizedToken.#ctor(Sdl.LanguagePlatform.Core.Tokenization.Token,System.Int32)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="t">The token</param>
            <param name="priority">The priority to assign to the token</param>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.PrioritizedToken.Token">
            <summary>
            Gets or sets the token.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.PrioritizedToken.Priority">
            <summary>
            Gets or sets the priority assigned to the token
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle">
            <summary>
            A special <see cref="T:Sdl.LanguagePlatform.Core.Tokenization.Token"/> which represents a set of alternatives (i.e. an ambiguous
            analysis) of other tokens which cover the exactly same input span. 
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.#ctor(Sdl.LanguagePlatform.Core.Tokenization.Token,System.Int32)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
            <param name="t">The first token in the set of alternatives (must not be null). It 
            is also used to set the <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.Text"/> of the bundle.</param>
            <param name="priority">The priority to assign to the first token in the bundle</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.#ctor(System.Collections.Generic.IList{Sdl.LanguagePlatform.Core.Tokenization.PrioritizedToken})">
            <summary>
            Initializes a new instance with a list of prioritized tokens.
            </summary>
            <param name="items">The items to add to the list of alternatives. Only a shallow copy is made.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.Add(Sdl.LanguagePlatform.Core.Tokenization.Token,System.Int32)">
            <summary>
            Adds a new token to the set of alternatives. Potential duplicates are kept.
            </summary>
            <param name="t">The token</param>
            <param name="priority">The priority assigned to the token</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.Add(Sdl.LanguagePlatform.Core.Tokenization.Token,System.Int32,System.Boolean)">
            <summary>
            Adds a new token to the set of alternatives.
            </summary>
            <param name="t">The token</param>
            <param name="priority">The priority assigned to the token</param>
            <param name="keepDuplicates">If <c>true</c>, the token will always be added. If <c>false</c>, 
            and the collection contains a token which Equals <paramref name="t"/>, only the one with the 
            higher priority will be kept.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.GetEnumerator">
            <summary>
            Gets an enumerator to iterate through the list of alternatives.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to iterate through the list of alternatives.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.GetBest">
            <summary>
            Obtains the token with the highest priority in the set of alternatives. If two tokens
            have the same priority, the first one will be the winner.
            </summary>
            <returns>The token with the highest priority in the set of alternatives.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.SortByDecreasingPriority">
            <summary>
            Sorts the set of alternatives by decreasing priority.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.Contains(Sdl.LanguagePlatform.Core.Tokenization.Token)">
            <summary>
            Determines whether the specified token is contained in the set of alternatives.
            </summary>
            <param name="t">The token to search</param>
            <returns><c>true</c> if the token is equal to one of the alternatives, and <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.GetTokenType">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.Type"/>. Returns the token type of the first alternative in the collection. 
            However, be aware that the alternatives may represent different token types.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)">
            <summary>
            Invalid for this class. Will throw a <see cref="T:System.InvalidOperationException"/>
            </summary>
            <param name="visitor">(ignored)</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.Duplicate">
            <summary>
            Invalid for this class. Will throw a <see cref="T:System.InvalidOperationException"/>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)">
            <summary>
            <see cref="M:Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)"/>. Returns the highest similarity to any
            of the alternatives.
            </summary>
            <param name="other">The other instance.</param>
            <returns>A value indicating the degree of similarity to the provided segment element.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.Item(System.Int32)">
            <summary>
            Gets the prioritized token at the specified index position. If the index position
            is invalid, an exception is thrown.
            </summary>
            <param name="index">The index</param>
            <returns>The prioritized token at the index position</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.IsPlaceable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable"/>. Is <c>true</c> if any of the alternatives
            is a placeable token.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.IsSubstitutable">
            <summary>
            <see cref="P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable"/>. Is <c>true</c> if any of the alternatives
            is a substitutable token.
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.TokenizerFlags">
            <summary>
            Flags controlling tokenizer behaviour
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenizerFlags.NoFlags">
            <summary>
            No tokenizer flags set
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenizerFlags.BreakOnHyphen">
            <summary>
            If true, break tokens on hyphen characters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenizerFlags.BreakOnDash">
            <summary>
            If true, break tokens on dash characters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenizerFlags.BreakOnApostrophe">
            <summary>
            If true, break tokens on apostrophe characters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenizerFlags.AllFlags">
            <summary>
            All flags set
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenizerFlags.DefaultFlags">
            <summary>
            Default flag values
            <remarks>May differ from AllFlags if further flags are added</remarks>
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.TokenType">
            <summary>
            The type of a token, e.g. whether the token represents a word, punctuation, etc.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Unknown">
            <summary>
            The token type is unknown or has not yet been determined.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Word">
            <summary>
            The token represents a word.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Abbreviation">
            <summary>
            The token represents an abbreviation.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.CharSequence">
            <summary>
            The token represents a character sequence. This is used in contexts (such as 
            tokenization of some far-east languages) where word boundaries cannot easily
            be determined.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.GeneralPunctuation">
            <summary>
            The token represents general punctuation.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.OpeningPunctuation">
            <summary>
            The token represents opening punctuation, such as a left parenthesis, which is 
            typically followed by the closing counterpart.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.ClosingPunctuation">
            <summary>
            The token represents closing punctuation, such as a right parenthesis, which is 
            typically preceded by the opening counterpart.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Date">
            <summary>
            The token represents a complex date expression.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Time">
            <summary>
            The token represents a complex time expression.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Variable">
            <summary>
            The token represents a substitutable variable.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Number">
            <summary>
            The token represents a number.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Measurement">
            <summary>
            The token represents a measurement, which is a combination of a number followed by a unit.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Whitespace">
            <summary>
            The token represents a non-empty sequence of whitespace.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Acronym">
            <summary>
            The token represents an acronym.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Uri">
            <summary>
            The token represents a URI/URL.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.OtherTextPlaceable">
            <summary>
            The token represents an unspecified text placeable (not a tag placeables), which can
            be placed, but not auto-substituted.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.UserDefined">
            <summary>
            The token represents a user-defined entity.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.Tag">
            <summary>
            The token represents a tag.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.TokenType.AlphaNumeric">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Tokenization.Unit">
            <summary>
            Enumerates the units known by the system. Only those units are listed which may 
            require cross-system conversion (not yet implemented).
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mmm">
            <summary>
            Metric millimeters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mcm">
            <summary>
            Metric centimeters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mdm">
            <summary>
            Metric decimeters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mm">
            <summary>
            Metric meters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mkm">
            <summary>
            Metric kilometers
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mmm2">
            <summary>
            Metric square millimeters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mcm2">
            <summary>
            Metric square centimeters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mm2">
            <summary>
            Metric square meters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Ma">
            <summary>
            Metric are
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mha">
            <summary>
            Metric hectare
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mkm2">
            <summary>
            Metric square kilometers
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mmg">
            <summary>
            Metric milligrams
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mg">
            <summary>
            Metric grams
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mkg">
            <summary>
            Metric kilograms
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mt">
            <summary>
            Metric tons
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mml">
            <summary>
            Metric milliliters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mcm3">
            <summary>
            Metric cubic centimeters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mcl">
            <summary>
            Metric centiliters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mdl">
            <summary>
            Metric deciliters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Ml">
            <summary>
            Metric liters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mm3">
            <summary>
            Metric cubic meters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mcentigrade">
            <summary>
            Mcentigrade
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mfahrenheit">
            <summary>
            Mfahrenheit
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mkelvin">
            <summary>
            Mkelvin
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mpercent">
            <summary>
            Mpercent
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Mdegree">
            <summary>
            Mdegree
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISin">
            <summary>
            BISin
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISft">
            <summary>
            BISft
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISyd">
            <summary>
            BISyd
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISfurlong">
            <summary>
            BISfurlong
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISmi">
            <summary>
            BISmi
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISin2">
            <summary>
            BISin2
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISft2">
            <summary>
            BISft2
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISyd2">
            <summary>
            BISyd2
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISacre">
            <summary>
            BISacre
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISmi2">
            <summary>
            BISmi2
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISoz">
            <summary>
            BISoz
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISlb">
            <summary>
            BISlb
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISstone">
            <summary>
            BISstone
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISshortHW">
            <summary>
            BISshortHW
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISlongHW">
            <summary>
            BISlongHW
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISshortTon">
            <summary>
            BISshortTon
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISlongTon">
            <summary>
            BISlongTon
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISflozUK">
            <summary>
            BISflozUK
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISptUK">
            <summary>
            BISptUK
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISqtUK">
            <summary>
            BISqtUK
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISgalUK">
            <summary>
            BISgalUK
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISbuUK">
            <summary>
            BISbuUK
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISflozUS">
            <summary>
            BISflozUS
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISptUS">
            <summary>
            BISptUS
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISgalUS">
            <summary>
            BISgalUS
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISptUSDry">
            <summary>
            BISptUSDry
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.BISbuUSDry">
            <summary>
            BISbuUSDry
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Other">
            <summary>
            The unit represents another, general unit for which no cross-system conversion will
            be available.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.Currency">
            <summary>
            The unit represents a currency
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.Tokenization.Unit.NoUnit">
            <summary>
            A sentinel, should not be used
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.UnicodeBlock">
            <summary>
            The Unicode blocks (code point ranges), according to the Unicode standard
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Unknown">
            <summary>
            An unknown block
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.BasicLatin">
            <summary>
            Basic Latin
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Latin1Supplement">
            <summary>
            Latin 1 Supplement
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.LatinExtendedA">
            <summary>
            Latin Extended A
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.LatinExtendedB">
            <summary>
            Latin Extended B
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.IPAExtensions">
            <summary>
            IPA Extensions
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.SpacingModifierLetters">
            <summary>
            Spacing Modifier Letters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CombiningDiacriticalMarks">
            <summary>
            Combining Diacritical Marks
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.GreekAndCoptic">
            <summary>
            Greek and Coptic
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Cyrillic">
            <summary>
            Cyrillic
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CyrillicSupplement">
            <summary>
            Cyrillic Supplement
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Armenian">
            <summary>
            Armenian
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Hebrew">
            <summary>
            Hebrew
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Arabic">
            <summary>
            Arabic
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Syriac">
            <summary>
            Syriac
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.ArabicSupplement">
            <summary>
            Arabic Supplement
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Thaana">
            <summary>
            Thaana
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.NKo">
            <summary>
            NKo
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Devanagari">
            <summary>
            Devanagari
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Bengali">
            <summary>
            Bengali
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Gurmukhi">
            <summary>
            Gurmurkhi
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Gujarati">
            <summary>
            Gujarati
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Oriya">
            <summary>
            Oriya
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Tamil">
            <summary>
            Tamil
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Telugu">
            <summary>
            Telugu
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Kannada">
            <summary>
            Kannada
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Malayalam">
            <summary>
            Malayalam
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Sinhala">
            <summary>
            Sinhala
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Thai">
            <summary>
            Thai
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Lao">
            <summary>
            Lao
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Tibetan">
            <summary>
            Tibetan
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Myanmar">
            <summary>
            Myanmar
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Georgian">
            <summary>
            Georgian
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.HangulJamo">
            <summary>
            Hangul Jamo
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Ethiopic">
            <summary>
            Ethiopic
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.EthiopicSupplement">
            <summary>
            Ethiopic Supplement
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Cherokee">
            <summary>
            Cherokee
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.UnifiedCanadianAboriginalSyllabics">
            <summary>
            Unified Canadian Aboriginal Syllabics
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Ogham">
            <summary>
            Ogham
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Runic">
            <summary>
            Runic
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Tagalog">
            <summary>
            Tagalog
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Hanunoo">
            <summary>
            Hanunoo
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Buhid">
            <summary>
            Buhid
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Tagbanwa">
            <summary>
            Tagbanwa
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Khmer">
            <summary>
            Khmer
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Mongolian">
            <summary>
            Mongolian
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Limbu">
            <summary>
            Limbu
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.TaiLe">
            <summary>
            Tai Le
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.NewTaiLue">
            <summary>
            New Tai Lue
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.KhmerSymbols">
            <summary>
            Khmer Symbols
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Buginese">
            <summary>
            Buginese
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Balinese">
            <summary>
            Balinese
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.PhoneticExtensions">
            <summary>
            Phonetic Extensions
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.PhoneticExtensionsSupplement">
            <summary>
            Phonetic Extensions Supplement
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CombiningDiacriticalMarksSupplement">
            <summary>
            Combining Diacritical Marks Supplement
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.LatinExtendedAdditional">
            <summary>
            Latin Extended Additional
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.GreekExtended">
            <summary>
            Greek Extended
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.GeneralPunctuation">
            <summary>
            GeneralPunctuation
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.SuperscriptsAndSubscripts">
            <summary>
            SuperscriptsAndSubscripts
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CurrencySymbols">
            <summary>
            CurrencySymbols
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CombiningDiacriticalMarksForSymbols">
            <summary>
            CombiningDiacriticalMarksForSymbols
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.LetterlikeSymbols">
            <summary>
            LetterlikeSymbols
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.NumberForms">
            <summary>
            NumberForms
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Arrows">
            <summary>
            Arrows
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.MathematicalOperators">
            <summary>
            MathematicalOperators
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.MiscellaneousTechnical">
            <summary>
            MiscellaneousTechnical
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.ControlPictures">
            <summary>
            ControlPictures
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.OpticalCharacterRecognition">
            <summary>
            OpticalCharacterRecognition
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.EnclosedAlphanumerics">
            <summary>
            EnclosedAlphanumerics
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.BoxDrawing">
            <summary>
            BoxDrawing
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.BlockElements">
            <summary>
            BlockElements
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.GeometricShapes">
            <summary>
            GeometricShapes
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.MiscellaneousSymbols">
            <summary>
            MiscellaneousSymbols
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Dingbats">
            <summary>
            Dingbats
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.MiscellaneousMathematicalSymbolsA">
            <summary>
            MiscellaneousMathematicalSymbolsA
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.SupplementalArrowsA">
            <summary>
            SupplementalArrowsA
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.BraillePatterns">
            <summary>
            BraillePatterns
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.SupplementalArrowsB">
            <summary>
            SupplementalArrowsB
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.MiscellaneousMathematicalSymbolsB">
            <summary>
            MiscellaneousMathematicalSymbolsB
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.SupplementalMathematicalOperators">
            <summary>
            SupplementalMathematicalOperators
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.MiscellaneousSymbolsAndArrows">
            <summary>
            MiscellaneousSymbolsAndArrows
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Glagolitic">
            <summary>
            Glagolitic
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.LatinExtendedC">
            <summary>
            LatinExtendedC
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Coptic">
            <summary>
            Coptic
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.GeorgianSupplement">
            <summary>
            GeorgianSupplement
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Tifinagh">
            <summary>
            Tifinagh
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.EthiopicExtended">
            <summary>
            EthiopicExtended
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.SupplementalPunctuation">
            <summary>
            SupplementalPunctuation
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CJKRadicalsSupplement">
            <summary>
            CJKRadicalsSupplement
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.KangxiRadicals">
            <summary>
            KangxiRadicals
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.IdeographicDescriptionCharacters">
            <summary>
            IdeographicDescriptionCharacters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CJKSymbolsAndPunctuation">
            <summary>
            CJKSymbolsAndPunctuation
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Hiragana">
            <summary>
            Hiragana
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Katakana">
            <summary>
            Katakana
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Bopomofo">
            <summary>
            Bopomofo
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.HangulCompatibilityJamo">
            <summary>
            HangulCompatibilityJamo
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Kanbun">
            <summary>
            Kanbun
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.BopomofoExtended">
            <summary>
            BopomofoExtended
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CJKStrokes">
            <summary>
            CJKStrokes
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.KatakanaPhoneticExtensions">
            <summary>
            KatakanaPhoneticExtensions
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.EnclosedCJKLettersAndMonths">
            <summary>
            EnclosedCJKLettersAndMonths
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CJKCompatibility">
            <summary>
            CJKCompatibility
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CJKUnifiedIdeographsExtensionA">
            <summary>
            CJKUnifiedIdeographsExtensionA
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.YijingHexagramSymbols">
            <summary>
            YijingHexagramSymbols
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CJKUnifiedIdeographs">
            <summary>
            CJKUnifiedIdeographs
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.YiSyllables">
            <summary>
            YiSyllables
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.YiRadicals">
            <summary>
            YiRadicals
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.ModifierToneLetters">
            <summary>
            ModifierToneLetters
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.LatinExtendedD">
            <summary>
            LatinExtendedD
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.SylotiNagri">
            <summary>
            SylotiNagri
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Phagspa">
            <summary>
            Phagspa
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.HangulSyllables">
            <summary>
            HangulSyllables
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.HighSurrogates">
            <summary>
            HighSurrogates
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.HighPrivateUseSurrogates">
            <summary>
            HighPrivateUseSurrogates
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.LowSurrogates">
            <summary>
            LowSurrogates
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.PrivateUseArea">
            <summary>
            PrivateUseArea
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CJKCompatibilityIdeographs">
            <summary>
            CJKCompatibilityIdeographs
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.AlphabeticPresentationForms">
            <summary>
            AlphabeticPresentationForms
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.ArabicPresentationFormsA">
            <summary>
            ArabicPresentationFormsA
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.VariationSelectors">
            <summary>
            VariationSelectors
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.VerticalForms">
            <summary>
            VerticalForms
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CombiningHalfMarks">
            <summary>
            CombiningHalfMarks
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.CJKCompatibilityForms">
            <summary>
            CJKCompatibilityForms
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.SmallFormVariants">
            <summary>
            SmallFormVariants
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.ArabicPresentationFormsB">
            <summary>
            ArabicPresentationFormsB
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.HalfwidthAndFullwidthForms">
            <summary>
            HalfwidthAndFullwidthForms
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.UnicodeBlock.Specials">
            <summary>
            Specials
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.SearchOption">
            <summary>
            Options which modify search behavior.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.SearchOption.None">
            <summary>
            Case-sensitive search.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.SearchOption.CaseInsensitive">
            <summary>
            Case-insensitive search.
            </summary>
        </member>
        <member name="F:Sdl.LanguagePlatform.Core.SearchOption.DiacriticsInsensitive">
            <summary>
            Diacritics-insensitive search (ignores the accents, umblauts, etc).
            </summary>
        </member>
        <member name="T:Sdl.LanguagePlatform.Core.Wordlist">
            <summary>
            A searchable word list with index.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.#ctor">
            <summary>
            Initializes a new instance of the Wordlist class with an empty wordlist.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.#ctor(Sdl.LanguagePlatform.Core.SearchOption)">
            <summary>
            Initializes a new instance of the Wordlist class with an empty wordlist.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.#ctor(Sdl.LanguagePlatform.Core.Wordlist)">
            <summary>
            Creates a new instance and deep-copies the other instance.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.Contains(System.String)">
            <summary>
            Determines whether this wordlist contains the specified string.
            </summary>
            <param name="s">The string to search for.</param>
            <returns>true if s is part of this wordlist, otherwise false.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.Clear">
            <summary>
            Removes all words from the list, but keeps the flags.
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.Merge(Sdl.LanguagePlatform.Core.Wordlist)">
            <summary>
            Merges the contents of another instance into this word list. Note that conflicting
            flags and search options are ignored.
            </summary>
            <param name="other">The instance to merge into this instance.</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.Merge(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Wordlist})">
            <summary>
            Creates a new word list and merges all specified wordLists into the new one. 
            </summary>
            <param name="wordLists">The word lists to merge.</param>
            <returns>The result of the merge, or null if all specified word lists are null.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.GetRegularExpression(Sdl.LanguagePlatform.Core.CharacterSet@)">
            <summary>
            Computes a <see cref="T:System.Text.RegularExpressions.Regex">regular expression</see> 
            which matches the words in the list. The expression is not anchored.
            <para>
            NOTE: if the word list is case insensitive, the regular expression will include the 
            corresponding option "(?i-:)". 
            </para>
            </summary>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.Add(System.String)">
            <summary>
            Adds a new string to this wordlist if it isn't already there.
            </summary>
            <returns>true iff the word was added</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.Remove(System.String)">
            <summary>
            Removes <paramref name="s"/> from the list.
            </summary>
            <returns>true iff the word was removed</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.Save(System.IO.TextWriter)">
            <summary>
            Saves the word list in textual format to the specified stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.CleanupList(System.String,System.String,System.Boolean)">
            <summary>
            Loads a word list from the specified input file, removes all duplicates, and writes the result
            to the output file. The two file names should not be the same. Only used internally.
            </summary>
            <param name="inputFileName">The input file name</param>
            <param name="outputFileName">The output file name</param>
            <param name="ignoreComments">Ignore comments flag, if not set it is true</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.Load(System.String,System.Boolean)">
            <summary>
            Adds new words to this wordlist from a stream. A UTF8 data encoding is assumed, but byte order
            marks will be honored.
            </summary>
            <param name="filename">The name of the file to load</param>
            <param name="ignoreComments">Ignore comments flag, if not set it is true</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Adds new words to this wordlist from a stream. A UTF8 data encoding is assumed, but byte order
            marks will be honored.
            </summary>
            <param name="stream">The stream.</param>
            <param name="ignoreComments">Ignore comments flag, if not set it is true</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.Load(System.Byte[],System.Boolean)">
            <summary>
            Read the word list from an array of bytes. A UTF8 encoding is assumed, but byte order
            marks will be honored.
            </summary>
            <param name="data"></param>
            <param name="ignoreComments">Ignore comments flag, if not set it is true</param>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.GetBytes">
            <summary>
            Returns the contents of the word list as an array of bytes. The data is UTF8-encoded. Note
            that search flags (such as case invariance) are not preserved.
            </summary>
            <returns>An array of bytes which represents the word list.</returns>
        </member>
        <member name="M:Sdl.LanguagePlatform.Core.Wordlist.Clone">
            <summary>
            <see cref="M:System.ICloneable.Clone"/>
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Wordlist.Flags">
            <summary>
            Gets the search flags.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Wordlist.Items">
            <summary>
            Gets the list of words.
            </summary>
        </member>
        <member name="P:Sdl.LanguagePlatform.Core.Wordlist.Count">
            <summary>
            Returns the number of words in the word list.
            </summary>
        </member>
    </members>
</doc>
